
TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009438  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d378  0800d378  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d378  0800d378  0001d378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d380  0800d380  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d380  0800d380  0001d380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800d388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000001c  0800d3a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800d3a4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009abf  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cad  00000000  00000000  00029b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000211c7  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ac2f  00000000  00000000  0004d217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c7860  00000000  00000000  00057e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0011f6a6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000007a8  00000000  00000000  0011f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000219c  00000000  00000000  0011fea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003f28 	.word	0x08003f28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08003f28 	.word	0x08003f28

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <demoTFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void demoTFT(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af04      	add	r7, sp, #16
 ST7735_SetRotation(r);
 800050e:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <demoTFT+0x130>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fa58 	bl	80019c8 <ST7735_SetRotation>

 ST7735_FillScreen(ST7735_BLACK);
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fe71 	bl	8001200 <ST7735_FillScreen>

 for(int x = 0; x < ST7735_GetWidth(); x++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e018      	b.n	8000556 <demoTFT+0x4e>
 {
   ST7735_DrawPixel(x, 0, ST7735_WHITE);
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	b29b      	uxth	r3, r3
 8000528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fcf6 	bl	8000f20 <ST7735_DrawPixel>
   ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	b29c      	uxth	r4, r3
 8000538:	f001 faf0 	bl	8001b1c <ST7735_GetHeight>
 800053c:	4603      	mov	r3, r0
 800053e:	b29b      	uxth	r3, r3
 8000540:	3b01      	subs	r3, #1
 8000542:	b29b      	uxth	r3, r3
 8000544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000548:	4619      	mov	r1, r3
 800054a:	4620      	mov	r0, r4
 800054c:	f000 fce8 	bl	8000f20 <ST7735_DrawPixel>
 for(int x = 0; x < ST7735_GetWidth(); x++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	f001 faed 	bl	8001b34 <ST7735_GetWidth>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	4293      	cmp	r3, r2
 8000562:	dbdf      	blt.n	8000524 <demoTFT+0x1c>
 }

 for(int y = 0; y < ST7735_GetHeight(); y++)
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	e017      	b.n	800059a <demoTFT+0x92>
 {
   ST7735_DrawPixel(0, y, ST7735_WHITE);
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	b29b      	uxth	r3, r3
 800056e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000572:	4619      	mov	r1, r3
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fcd3 	bl	8000f20 <ST7735_DrawPixel>
   ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 800057a:	f001 fadb 	bl	8001b34 <ST7735_GetWidth>
 800057e:	4603      	mov	r3, r0
 8000580:	b29b      	uxth	r3, r3
 8000582:	3b01      	subs	r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	b291      	uxth	r1, r2
 800058a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fcc6 	bl	8000f20 <ST7735_DrawPixel>
 for(int y = 0; y < ST7735_GetHeight(); y++)
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	f001 fabf 	bl	8001b1c <ST7735_GetHeight>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	4293      	cmp	r3, r2
 80005a6:	dbe0      	blt.n	800056a <demoTFT+0x62>
 }

 ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(), ST7735_WHITE);
 80005a8:	f001 fac4 	bl	8001b34 <ST7735_GetWidth>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461c      	mov	r4, r3
 80005b0:	f001 fab4 	bl	8001b1c <ST7735_GetHeight>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4613      	mov	r3, r2
 80005c0:	4622      	mov	r2, r4
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f001 f8de 	bl	8001786 <ST7735_DrawLine>
 ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(), ST7735_WHITE);
 80005ca:	f001 fab3 	bl	8001b34 <ST7735_GetWidth>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461c      	mov	r4, r3
 80005d2:	f001 faa3 	bl	8001b1c <ST7735_GetHeight>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4613      	mov	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	4620      	mov	r0, r4
 80005e8:	f001 f8cd 	bl	8001786 <ST7735_DrawLine>

 HAL_Delay(2000);
 80005ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f0:	f001 fc30 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fe03 	bl	8001200 <ST7735_FillScreen>

 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e011      	b.n	8000624 <demoTFT+0x11c>
 {
  ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	b21c      	sxth	r4, r3
 8000604:	f001 fa96 	bl	8001b34 <ST7735_GetWidth>
 8000608:	4603      	mov	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	3b01      	subs	r3, #1
 800060e:	b29b      	uxth	r3, r3
 8000610:	b21a      	sxth	r2, r3
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	4621      	mov	r1, r4
 8000618:	2000      	movs	r0, #0
 800061a:	f001 f995 	bl	8001948 <ST7735_DrawFastHLine>
 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3304      	adds	r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	f001 fa7a 	bl	8001b1c <ST7735_GetHeight>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4293      	cmp	r3, r2
 8000630:	dbe6      	blt.n	8000600 <demoTFT+0xf8>
 }

 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	e013      	b.n	8000660 <demoTFT+0x158>
 8000638:	20000038 	.word	0x20000038
 {
  ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	b21c      	sxth	r4, r3
 8000640:	f001 fa6c 	bl	8001b1c <ST7735_GetHeight>
 8000644:	4603      	mov	r3, r0
 8000646:	b29b      	uxth	r3, r3
 8000648:	3b01      	subs	r3, #1
 800064a:	b29b      	uxth	r3, r3
 800064c:	b21a      	sxth	r2, r3
 800064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000652:	2100      	movs	r1, #0
 8000654:	4620      	mov	r0, r4
 8000656:	f001 f935 	bl	80018c4 <ST7735_DrawFastVLine>
 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3304      	adds	r3, #4
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	f001 fa68 	bl	8001b34 <ST7735_GetWidth>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4293      	cmp	r3, r2
 800066c:	dbe6      	blt.n	800063c <demoTFT+0x134>
 }

 HAL_Delay(2000);
 800066e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000672:	f001 fbef 	bl	8001e54 <HAL_Delay>

 // Check fonts
 ST7735_FillScreen(ST7735_BLACK);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fdc2 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "STM32 TFT ", Font_16x26, ST7735_RED, ST7735_BLACK);
 800067c:	4ba0      	ldr	r3, [pc, #640]	; (8000900 <demoTFT+0x3f8>)
 800067e:	2200      	movs	r2, #0
 8000680:	9202      	str	r2, [sp, #8]
 8000682:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a9d      	ldr	r2, [pc, #628]	; (8000904 <demoTFT+0x3fc>)
 8000690:	2100      	movs	r1, #0
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fc8a 	bl	8000fac <ST7735_DrawString>
 ST7735_DrawString(0, 3*20, "ELECTRONICS", Font_16x26, ST7735_GREEN, ST7735_BLACK);
 8000698:	4b99      	ldr	r3, [pc, #612]	; (8000900 <demoTFT+0x3f8>)
 800069a:	2200      	movs	r2, #0
 800069c:	9202      	str	r2, [sp, #8]
 800069e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	9200      	str	r2, [sp, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a97      	ldr	r2, [pc, #604]	; (8000908 <demoTFT+0x400>)
 80006ac:	213c      	movs	r1, #60	; 0x3c
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fc7c 	bl	8000fac <ST7735_DrawString>
 ST7735_DrawString(0, 3*20+3*18, "Ismail", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80006b4:	4b92      	ldr	r3, [pc, #584]	; (8000900 <demoTFT+0x3f8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	9202      	str	r2, [sp, #8]
 80006ba:	221f      	movs	r2, #31
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a91      	ldr	r2, [pc, #580]	; (800090c <demoTFT+0x404>)
 80006c6:	2172      	movs	r1, #114	; 0x72
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fc6f 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(2000);
 80006ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d2:	f001 fbbf 	bl	8001e54 <HAL_Delay>

 // Check colors
 ST7735_FillScreen(ST7735_BLACK);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fd92 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLACK", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 80006dc:	4b88      	ldr	r3, [pc, #544]	; (8000900 <demoTFT+0x3f8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	9202      	str	r2, [sp, #8]
 80006e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e6:	9201      	str	r2, [sp, #4]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a88      	ldr	r2, [pc, #544]	; (8000910 <demoTFT+0x408>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 fc5a 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f001 fbaa 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLUE);
 8000700:	201f      	movs	r0, #31
 8000702:	f000 fd7d 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLUE", Font_16x26, ST7735_BLACK, ST7735_BLUE);
 8000706:	4b7e      	ldr	r3, [pc, #504]	; (8000900 <demoTFT+0x3f8>)
 8000708:	221f      	movs	r2, #31
 800070a:	9202      	str	r2, [sp, #8]
 800070c:	2200      	movs	r2, #0
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a7f      	ldr	r2, [pc, #508]	; (8000914 <demoTFT+0x40c>)
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fc46 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000724:	f001 fb96 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_RED);
 8000728:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800072c:	f000 fd68 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "RED", Font_16x26, ST7735_BLACK, ST7735_RED);
 8000730:	4b73      	ldr	r3, [pc, #460]	; (8000900 <demoTFT+0x3f8>)
 8000732:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000736:	9202      	str	r2, [sp, #8]
 8000738:	2200      	movs	r2, #0
 800073a:	9201      	str	r2, [sp, #4]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	9200      	str	r2, [sp, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a75      	ldr	r2, [pc, #468]	; (8000918 <demoTFT+0x410>)
 8000744:	2100      	movs	r1, #0
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fc30 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 800074c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000750:	f001 fb80 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_GREEN);
 8000754:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000758:	f000 fd52 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "GREEN", Font_16x26, ST7735_BLACK, ST7735_GREEN);
 800075c:	4b68      	ldr	r3, [pc, #416]	; (8000900 <demoTFT+0x3f8>)
 800075e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	2200      	movs	r2, #0
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a6b      	ldr	r2, [pc, #428]	; (800091c <demoTFT+0x414>)
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fc1a 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f001 fb6a 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_CYAN);
 8000780:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000784:	f000 fd3c 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "CYAN", Font_16x26, ST7735_BLACK, ST7735_CYAN);
 8000788:	4b5d      	ldr	r3, [pc, #372]	; (8000900 <demoTFT+0x3f8>)
 800078a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800078e:	9202      	str	r2, [sp, #8]
 8000790:	2200      	movs	r2, #0
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	9200      	str	r2, [sp, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a61      	ldr	r2, [pc, #388]	; (8000920 <demoTFT+0x418>)
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fc04 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 80007a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a8:	f001 fb54 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_MAGENTA);
 80007ac:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80007b0:	f000 fd26 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "MAGENTA", Font_16x26, ST7735_BLACK, ST7735_MAGENTA);
 80007b4:	4b52      	ldr	r3, [pc, #328]	; (8000900 <demoTFT+0x3f8>)
 80007b6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80007ba:	9202      	str	r2, [sp, #8]
 80007bc:	2200      	movs	r2, #0
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a57      	ldr	r2, [pc, #348]	; (8000924 <demoTFT+0x41c>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fbee 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d4:	f001 fb3e 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_YELLOW);
 80007d8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80007dc:	f000 fd10 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "YELLOW", Font_16x26, ST7735_BLACK, ST7735_YELLOW);
 80007e0:	4b47      	ldr	r3, [pc, #284]	; (8000900 <demoTFT+0x3f8>)
 80007e2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007e6:	9202      	str	r2, [sp, #8]
 80007e8:	2200      	movs	r2, #0
 80007ea:	9201      	str	r2, [sp, #4]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	9200      	str	r2, [sp, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a4d      	ldr	r2, [pc, #308]	; (8000928 <demoTFT+0x420>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fbd8 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 80007fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000800:	f001 fb28 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_WHITE);
 8000804:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000808:	f000 fcfa 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "WHITE", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800080c:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <demoTFT+0x3f8>)
 800080e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000812:	9202      	str	r2, [sp, #8]
 8000814:	2200      	movs	r2, #0
 8000816:	9201      	str	r2, [sp, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a43      	ldr	r2, [pc, #268]	; (800092c <demoTFT+0x424>)
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fbc2 	bl	8000fac <ST7735_DrawString>
 HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f001 fb12 	bl	8001e54 <HAL_Delay>

 // Draw circles
 ST7735_FillScreen(ST7735_BLACK);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fce5 	bl	8001200 <ST7735_FillScreen>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e017      	b.n	800086c <demoTFT+0x364>
 {
  ST7735_DrawCircle(ST7735_GetWidth() / 2, ST7735_GetHeight() / 2, i, ST7735_YELLOW);
 800083c:	f001 f97a 	bl	8001b34 <ST7735_GetWidth>
 8000840:	4603      	mov	r3, r0
 8000842:	0fda      	lsrs	r2, r3, #31
 8000844:	4413      	add	r3, r2
 8000846:	105b      	asrs	r3, r3, #1
 8000848:	b21c      	sxth	r4, r3
 800084a:	f001 f967 	bl	8001b1c <ST7735_GetHeight>
 800084e:	4603      	mov	r3, r0
 8000850:	0fda      	lsrs	r2, r3, #31
 8000852:	4413      	add	r3, r2
 8000854:	105b      	asrs	r3, r3, #1
 8000856:	b219      	sxth	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	b21a      	sxth	r2, r3
 800085c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000860:	4620      	mov	r0, r4
 8000862:	f000 fd59 	bl	8001318 <ST7735_DrawCircle>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3302      	adds	r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	f001 f956 	bl	8001b1c <ST7735_GetHeight>
 8000870:	4603      	mov	r3, r0
 8000872:	0fda      	lsrs	r2, r3, #31
 8000874:	4413      	add	r3, r2
 8000876:	105b      	asrs	r3, r3, #1
 8000878:	b21b      	sxth	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4293      	cmp	r3, r2
 8000880:	dbdc      	blt.n	800083c <demoTFT+0x334>
 }
 HAL_Delay(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000886:	f001 fae5 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fcb8 	bl	8001200 <ST7735_FillScreen>
 ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(), ST7735_GetWidth(), 0, ST7735_RED);
 8000890:	f001 f950 	bl	8001b34 <ST7735_GetWidth>
 8000894:	4603      	mov	r3, r0
 8000896:	0fda      	lsrs	r2, r3, #31
 8000898:	4413      	add	r3, r2
 800089a:	105b      	asrs	r3, r3, #1
 800089c:	b21c      	sxth	r4, r3
 800089e:	f001 f93d 	bl	8001b1c <ST7735_GetHeight>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461d      	mov	r5, r3
 80008a6:	f001 f945 	bl	8001b34 <ST7735_GetWidth>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	2300      	movs	r3, #0
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	9200      	str	r2, [sp, #0]
 80008ba:	462b      	mov	r3, r5
 80008bc:	4622      	mov	r2, r4
 80008be:	2100      	movs	r1, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fdfb 	bl	80014bc <ST7735_FillTriangle>
 HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f001 fac3 	bl	8001e54 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 fc96 	bl	8001200 <ST7735_FillScreen>
 ST7735_DrawImage(0, 0, 128, 128, (uint16_t*) test_img_128x128);
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <demoTFT+0x428>)
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	2100      	movs	r1, #0
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 fcaa 	bl	8001238 <ST7735_DrawImage>
 HAL_Delay(3000);
 80008e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008e8:	f001 fab4 	bl	8001e54 <HAL_Delay>

 r++;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <demoTFT+0x42c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <demoTFT+0x42c>)
 80008f6:	701a      	strb	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	08003f40 	.word	0x08003f40
 8000908:	08003f4c 	.word	0x08003f4c
 800090c:	08003f58 	.word	0x08003f58
 8000910:	08003f60 	.word	0x08003f60
 8000914:	08003f68 	.word	0x08003f68
 8000918:	08003f70 	.word	0x08003f70
 800091c:	08003f74 	.word	0x08003f74
 8000920:	08003f7c 	.word	0x08003f7c
 8000924:	08003f84 	.word	0x08003f84
 8000928:	08003f8c 	.word	0x08003f8c
 800092c:	08003f94 	.word	0x08003f94
 8000930:	080052e8 	.word	0x080052e8
 8000934:	20000038 	.word	0x20000038

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f001 fa18 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f80e 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f8d6 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000948:	f000 f8b4 	bl	8000ab4 <MX_DMA_Init>
  MX_SPI1_Init();
 800094c:	f000 f87a 	bl	8000a44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000950:	f000 fac2 	bl	8000ed8 <ST7735_Init>
  ST7735_Backlight_On();
 8000954:	f000 fcd4 	bl	8001300 <ST7735_Backlight_On>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  demoTFT();
 8000958:	f7ff fdd6 	bl	8000508 <demoTFT>
 800095c:	e7fc      	b.n	8000958 <main+0x20>
	...

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fad2 	bl	8003f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <SystemClock_Config+0xdc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <SystemClock_Config+0xdc>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemClock_Config+0xdc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemClock_Config+0xe0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <SystemClock_Config+0xe0>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemClock_Config+0xe0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2310      	movs	r3, #16
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d4:	23b4      	movs	r3, #180	; 0xb4
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fbed 	bl	80031c8 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f4:	f000 f90a 	bl	8000c0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f8:	f002 f880 	bl	8002afc <HAL_PWREx_EnableOverDrive>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a02:	f000 f903 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2105      	movs	r1, #5
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 f8b9 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a30:	f000 f8ec 	bl	8000c0c <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a92:	220a      	movs	r2, #10
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a98:	f002 fe34 	bl	8003704 <HAL_SPI_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000aa2:	f000 f8b3 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000003c 	.word	0x2000003c
 8000ab0:	40013000 	.word	0x40013000

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	203b      	movs	r0, #59	; 0x3b
 8000adc:	f001 fab9 	bl	8002052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ae0:	203b      	movs	r0, #59	; 0x3b
 8000ae2:	f001 fad2 	bl	800208a <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_BL_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f248 0140 	movw	r1, #32832	; 0x8040
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <MX_GPIO_Init+0x10c>)
 8000b82:	f001 ffa1 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x110>)
 8000b8c:	f001 ff9c 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	481c      	ldr	r0, [pc, #112]	; (8000c08 <MX_GPIO_Init+0x114>)
 8000b98:	f001 ff96 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_BL_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_BL_Pin|ST7735_CS_Pin;
 8000b9c:	f248 0340 	movw	r3, #32832	; 0x8040
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x10c>)
 8000bb6:	f001 fdf3 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin;
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_RES_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0x110>)
 8000bd2:	f001 fde5 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin;
 8000bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_DC_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_GPIO_Init+0x114>)
 8000bf0:	f001 fdd6 	bl	80027a0 <HAL_GPIO_Init>

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>

08000c16 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <ST7735_Reset+0x24>)
 8000c2e:	f001 ff4b 	bl	8002ac8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000c32:	2014      	movs	r0, #20
 8000c34:	f001 f90e 	bl	8001e54 <HAL_Delay>
	TFT_RES_H();
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <ST7735_Reset+0x24>)
 8000c3e:	f001 ff43 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020800 	.word	0x40020800

08000c4c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <ST7735_WriteCommand+0x2c>)
 8000c5e:	f001 ff33 	bl	8002ac8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c62:	1df9      	adds	r1, r7, #7
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <ST7735_WriteCommand+0x30>)
 8000c6c:	f002 fdd3 	bl	8003816 <HAL_SPI_Transmit>
//#endif
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	2000003c 	.word	0x2000003c

08000c80 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <ST7735_WriteData+0x3c>)
 8000c92:	f001 ff19 	bl	8002ac8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <ST7735_WriteData+0x40>)
 8000ca0:	f002 fef6 	bl	8003a90 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8000ca4:	bf00      	nop
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <ST7735_WriteData+0x40>)
 8000ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d0f9      	beq.n	8000ca6 <ST7735_WriteData+0x26>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	2000003c 	.word	0x2000003c

08000cc4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000cd6:	e034      	b.n	8000d42 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffb1 	bl	8000c4c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000cfe:	7abb      	ldrb	r3, [r7, #10]
 8000d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000d06:	7abb      	ldrb	r3, [r7, #10]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d0c:	7abb      	ldrb	r3, [r7, #10]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ffb5 	bl	8000c80 <ST7735_WriteData>
            addr += numArgs;
 8000d16:	7abb      	ldrb	r3, [r7, #10]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00e      	beq.n	8000d42 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d102      	bne.n	8000d3a <ST7735_ExecuteCommandList+0x76>
 8000d34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d38:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000d3a:	89bb      	ldrh	r3, [r7, #12]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 f889 	bl	8001e54 <HAL_Delay>
    while(numCommands--)
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	73fa      	strb	r2, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1c5      	bne.n	8000cd8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	717b      	strb	r3, [r7, #5]
 8000d72:	4613      	mov	r3, r2
 8000d74:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000d76:	202a      	movs	r0, #42	; 0x2a
 8000d78:	f7ff ff68 	bl	8000c4c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	733b      	strb	r3, [r7, #12]
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <ST7735_SetAddressWindow+0x88>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	737b      	strb	r3, [r7, #13]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73bb      	strb	r3, [r7, #14]
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <ST7735_SetAddressWindow+0x88>)
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	4413      	add	r3, r2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff6c 	bl	8000c80 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000da8:	202b      	movs	r0, #43	; 0x2b
 8000daa:	f7ff ff4f 	bl	8000c4c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <ST7735_SetAddressWindow+0x8c>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <ST7735_SetAddressWindow+0x8c>)
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	793b      	ldrb	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff57 	bl	8000c80 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000dd2:	202c      	movs	r0, #44	; 0x2c
 8000dd4:	f7ff ff3a 	bl	8000c4c <ST7735_WriteCommand>
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	200000f5 	.word	0x200000f5
 8000de4:	200000f6 	.word	0x200000f6

08000de8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000de8:	b082      	sub	sp, #8
 8000dea:	b590      	push	{r4, r7, lr}
 8000dec:	b089      	sub	sp, #36	; 0x24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
 8000df6:	460b      	mov	r3, r1
 8000df8:	80bb      	strh	r3, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	b2d9      	uxtb	r1, r3
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3b01      	subs	r3, #1
 8000e14:	b2dc      	uxtb	r4, r3
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4622      	mov	r2, r4
 8000e28:	f7ff ff96 	bl	8000d58 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	e043      	b.n	8000eba <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	3b20      	subs	r3, #32
 8000e38:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	440b      	add	r3, r1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	e029      	b.n	8000ea8 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000e64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	743b      	strb	r3, [r7, #16]
 8000e6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff00 	bl	8000c80 <ST7735_WriteData>
 8000e80:	e00f      	b.n	8000ea2 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	733b      	strb	r3, [r7, #12]
 8000e8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff feef 	bl	8000c80 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000eac:	461a      	mov	r2, r3
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d3cf      	bcc.n	8000e54 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d3b5      	bcc.n	8000e32 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3724      	adds	r7, #36	; 0x24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ed2:	b002      	add	sp, #8
 8000ed4:	4770      	bx	lr
	...

08000ed8 <ST7735_Init>:

void ST7735_Init()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000edc:	f7ff fe9b 	bl	8000c16 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <ST7735_Init+0x38>)
 8000ee6:	f001 fdef 	bl	8002ac8 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000eea:	f7ff fe9b 	bl	8000c24 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <ST7735_Init+0x3c>)
 8000ef0:	f7ff fee8 	bl	8000cc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <ST7735_Init+0x40>)
 8000ef6:	f7ff fee5 	bl	8000cc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <ST7735_Init+0x44>)
 8000efc:	f7ff fee2 	bl	8000cc4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000f00:	2201      	movs	r2, #1
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <ST7735_Init+0x38>)
 8000f06:	f001 fddf 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020400 	.word	0x40020400
 8000f14:	0800d2e8 	.word	0x0800d2e8
 8000f18:	0800d324 	.word	0x0800d324
 8000f1c:	0800d334 	.word	0x0800d334

08000f20 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	80bb      	strh	r3, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <ST7735_DrawPixel+0x80>)
 8000f36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	da2c      	bge.n	8000f98 <ST7735_DrawPixel+0x78>
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <ST7735_DrawPixel+0x84>)
 8000f42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f46:	4293      	cmp	r3, r2
 8000f48:	da26      	bge.n	8000f98 <ST7735_DrawPixel+0x78>
        return;

    TFT_CS_L();
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <ST7735_DrawPixel+0x88>)
 8000f50:	f001 fdba 	bl	8002ac8 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	b2d8      	uxtb	r0, r3
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f7ff fef4 	bl	8000d58 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe7a 	bl	8000c80 <ST7735_WriteData>

    TFT_CS_H();
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <ST7735_DrawPixel+0x88>)
 8000f92:	f001 fd99 	bl	8002ac8 <HAL_GPIO_WritePin>
 8000f96:	e000      	b.n	8000f9a <ST7735_DrawPixel+0x7a>
        return;
 8000f98:	bf00      	nop
}
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000000e 	.word	0x2000000e
 8000fa4:	2000000c 	.word	0x2000000c
 8000fa8:	40020400 	.word	0x40020400

08000fac <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000fac:	b082      	sub	sp, #8
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af04      	add	r7, sp, #16
 8000fb4:	603a      	str	r2, [r7, #0]
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	4603      	mov	r3, r0
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <ST7735_DrawString+0xac>)
 8000fc6:	f001 fd7f 	bl	8002ac8 <HAL_GPIO_WritePin>

    while(*str)
 8000fca:	e033      	b.n	8001034 <ST7735_DrawString+0x88>
    {
        if(x + font.width >= _width)
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	7d3a      	ldrb	r2, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <ST7735_DrawString+0xb0>)
 8000fd4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	db16      	blt.n	800100a <ST7735_DrawString+0x5e>
        {
            x = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000fe0:	7d7b      	ldrb	r3, [r7, #21]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	7d7a      	ldrb	r2, [r7, #21]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <ST7735_DrawString+0xb4>)
 8000ff2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	da21      	bge.n	800103e <ST7735_DrawString+0x92>
            {
                break;
            }

            if(*str == ' ')
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d103      	bne.n	800100a <ST7735_DrawString+0x5e>
            {
                // skip spaces in the beginning of the new line
                str++;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	603b      	str	r3, [r7, #0]
                continue;
 8001008:	e014      	b.n	8001034 <ST7735_DrawString+0x88>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	88b9      	ldrh	r1, [r7, #4]
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	8c3b      	ldrh	r3, [r7, #32]
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	8bbb      	ldrh	r3, [r7, #28]
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f7ff fee2 	bl	8000de8 <ST7735_WriteChar>
        x += font.width;
 8001024:	7d3b      	ldrb	r3, [r7, #20]
 8001026:	b29a      	uxth	r2, r3
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4413      	add	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
        str++;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	603b      	str	r3, [r7, #0]
    while(*str)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1c7      	bne.n	8000fcc <ST7735_DrawString+0x20>
 800103c:	e000      	b.n	8001040 <ST7735_DrawString+0x94>
                break;
 800103e:	bf00      	nop
    }
    TFT_CS_H();
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <ST7735_DrawString+0xac>)
 8001046:	f001 fd3f 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001054:	b002      	add	sp, #8
 8001056:	4770      	bx	lr
 8001058:	40020400 	.word	0x40020400
 800105c:	2000000e 	.word	0x2000000e
 8001060:	2000000c 	.word	0x2000000c

08001064 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4606      	mov	r6, r0
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4633      	mov	r3, r6
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	4603      	mov	r3, r0
 800107a:	80bb      	strh	r3, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	803b      	strh	r3, [r7, #0]
 8001084:	466b      	mov	r3, sp
 8001086:	469a      	mov	sl, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4a58      	ldr	r2, [pc, #352]	; (80011ec <ST7735_FillRectangle+0x188>)
 800108c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001090:	4293      	cmp	r3, r2
 8001092:	da05      	bge.n	80010a0 <ST7735_FillRectangle+0x3c>
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <ST7735_FillRectangle+0x18c>)
 8001098:	f9b2 2000 	ldrsh.w	r2, [r2]
 800109c:	4293      	cmp	r3, r2
 800109e:	db01      	blt.n	80010a4 <ST7735_FillRectangle+0x40>
 80010a0:	46d5      	mov	sp, sl
 80010a2:	e09f      	b.n	80011e4 <ST7735_FillRectangle+0x180>
        return;
    if ((x + w - 1) >= _width)
 80010a4:	88fa      	ldrh	r2, [r7, #6]
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a50      	ldr	r2, [pc, #320]	; (80011ec <ST7735_FillRectangle+0x188>)
 80010ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dd06      	ble.n	80010c2 <ST7735_FillRectangle+0x5e>
        w = _width - x;
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <ST7735_FillRectangle+0x188>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height)
 80010c2:	88ba      	ldrh	r2, [r7, #4]
 80010c4:	883b      	ldrh	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <ST7735_FillRectangle+0x18c>)
 80010ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010ce:	4293      	cmp	r3, r2
 80010d0:	dd06      	ble.n	80010e0 <ST7735_FillRectangle+0x7c>
        h = _height - y;
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <ST7735_FillRectangle+0x18c>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4843      	ldr	r0, [pc, #268]	; (80011f4 <ST7735_FillRectangle+0x190>)
 80010e6:	f001 fcef 	bl	8002ac8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	b2d9      	uxtb	r1, r3
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3b01      	subs	r3, #1
 8001100:	b2de      	uxtb	r6, r3
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4632      	mov	r2, r6
 8001114:	f7ff fe20 	bl	8000d58 <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 8001118:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b29b      	uxth	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	723b      	strb	r3, [r7, #8]
 8001122:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001124:	b2db      	uxtb	r3, r3
 8001126:	727b      	strb	r3, [r7, #9]
    TFT_DC_D();
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112e:	4832      	ldr	r0, [pc, #200]	; (80011f8 <ST7735_FillRectangle+0x194>)
 8001130:	f001 fcca 	bl	8002ac8 <HAL_GPIO_WritePin>

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	005e      	lsls	r6, r3, #1
 8001138:	1e73      	subs	r3, r6, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	4632      	mov	r2, r6
 800113e:	2300      	movs	r3, #0
 8001140:	4690      	mov	r8, r2
 8001142:	4699      	mov	r9, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001150:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001154:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001158:	4632      	mov	r2, r6
 800115a:	2300      	movs	r3, #0
 800115c:	4614      	mov	r4, r2
 800115e:	461d      	mov	r5, r3
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	00eb      	lsls	r3, r5, #3
 800116a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800116e:	00e2      	lsls	r2, r4, #3
 8001170:	4633      	mov	r3, r6
 8001172:	3307      	adds	r3, #7
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	ebad 0d03 	sub.w	sp, sp, r3
 800117c:	466b      	mov	r3, sp
 800117e:	3300      	adds	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
    for (y = h; y > 0; y--) {
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	e024      	b.n	80011d2 <ST7735_FillRectangle+0x16e>
        for (int x = w * 2; x >= 0; x -= 2) {
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e00d      	b.n	80011ac <ST7735_FillRectangle+0x148>
            tbuf[x] = data[0];
 8001190:	7a39      	ldrb	r1, [r7, #8]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	7a79      	ldrb	r1, [r7, #9]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3b02      	subs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	daee      	bge.n	8001190 <ST7735_FillRectangle+0x12c>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 80011b2:	b2b3      	uxth	r3, r6
 80011b4:	461a      	mov	r2, r3
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <ST7735_FillRectangle+0x198>)
 80011ba:	f002 fc69 	bl	8003a90 <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 80011be:	bf00      	nop
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <ST7735_FillRectangle+0x198>)
 80011c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d0f9      	beq.n	80011c0 <ST7735_FillRectangle+0x15c>
    for (y = h; y > 0; y--) {
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1d7      	bne.n	8001188 <ST7735_FillRectangle+0x124>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 80011d8:	2201      	movs	r2, #1
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ST7735_FillRectangle+0x190>)
 80011de:	f001 fc73 	bl	8002ac8 <HAL_GPIO_WritePin>
 80011e2:	46d5      	mov	sp, sl
}
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ec:	2000000e 	.word	0x2000000e
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020000 	.word	0x40020000
 80011fc:	2000003c 	.word	0x2000003c

08001200 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af02      	add	r7, sp, #8
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <ST7735_FillScreen+0x30>)
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <ST7735_FillScreen+0x34>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	b299      	uxth	r1, r3
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	460b      	mov	r3, r1
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ff1e 	bl	8001064 <ST7735_FillRectangle>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000000e 	.word	0x2000000e
 8001234:	2000000c 	.word	0x2000000c

08001238 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	4603      	mov	r3, r0
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <ST7735_DrawImage+0xbc>)
 800125a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800125e:	4293      	cmp	r3, r2
 8001260:	da40      	bge.n	80012e4 <ST7735_DrawImage+0xac>
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <ST7735_DrawImage+0xc0>)
 8001266:	f9b2 2000 	ldrsh.w	r2, [r2]
 800126a:	4293      	cmp	r3, r2
 800126c:	da3a      	bge.n	80012e4 <ST7735_DrawImage+0xac>
    if((x + w - 1) >= _width) return;
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4413      	add	r3, r2
 8001274:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <ST7735_DrawImage+0xbc>)
 8001276:	f9b2 2000 	ldrsh.w	r2, [r2]
 800127a:	4293      	cmp	r3, r2
 800127c:	dc34      	bgt.n	80012e8 <ST7735_DrawImage+0xb0>
    if((y + h - 1) >= _height) return;
 800127e:	88ba      	ldrh	r2, [r7, #4]
 8001280:	883b      	ldrh	r3, [r7, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <ST7735_DrawImage+0xc0>)
 8001286:	f9b2 2000 	ldrsh.w	r2, [r2]
 800128a:	4293      	cmp	r3, r2
 800128c:	dc2e      	bgt.n	80012ec <ST7735_DrawImage+0xb4>

    TFT_CS_L();
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <ST7735_DrawImage+0xc4>)
 8001294:	f001 fc18 	bl	8002ac8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2d8      	uxtb	r0, r3
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	b2d9      	uxtb	r1, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b2dc      	uxtb	r4, r3
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4622      	mov	r2, r4
 80012c2:	f7ff fd49 	bl	8000d58 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	883a      	ldrh	r2, [r7, #0]
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	69b8      	ldr	r0, [r7, #24]
 80012d4:	f7ff fcd4 	bl	8000c80 <ST7735_WriteData>
    TFT_CS_H();
 80012d8:	2201      	movs	r2, #1
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <ST7735_DrawImage+0xc4>)
 80012de:	f001 fbf3 	bl	8002ac8 <HAL_GPIO_WritePin>
 80012e2:	e004      	b.n	80012ee <ST7735_DrawImage+0xb6>
    if((x >= _width) || (y >= _height)) return;
 80012e4:	bf00      	nop
 80012e6:	e002      	b.n	80012ee <ST7735_DrawImage+0xb6>
    if((x + w - 1) >= _width) return;
 80012e8:	bf00      	nop
 80012ea:	e000      	b.n	80012ee <ST7735_DrawImage+0xb6>
    if((y + h - 1) >= _height) return;
 80012ec:	bf00      	nop
}
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	2000000e 	.word	0x2000000e
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40020400 	.word	0x40020400

08001300 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	TFT_BL_H();
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	4802      	ldr	r0, [pc, #8]	; (8001314 <ST7735_Backlight_On+0x14>)
 800130c:	f001 fbdc 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40020400 	.word	0x40020400

08001318 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	f1c3 0301 	rsb	r3, r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	425b      	negs	r3, r3
 8001348:	b29a      	uxth	r2, r3
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	88b9      	ldrh	r1, [r7, #4]
 8001360:	883a      	ldrh	r2, [r7, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fddc 	bl	8000f20 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29b      	uxth	r3, r3
 8001370:	88b9      	ldrh	r1, [r7, #4]
 8001372:	883a      	ldrh	r2, [r7, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdd3 	bl	8000f20 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 800137a:	88f8      	ldrh	r0, [r7, #6]
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	883a      	ldrh	r2, [r7, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fdca 	bl	8000f20 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 800138c:	88f8      	ldrh	r0, [r7, #6]
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	883a      	ldrh	r2, [r7, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fdc1 	bl	8000f20 <ST7735_DrawPixel>

  while (x < r)
 800139e:	e081      	b.n	80014a4 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 80013a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0e      	blt.n	80013c6 <ST7735_DrawCircle+0xae>
    {
      r--;
 80013a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 80013bc:	89fa      	ldrh	r2, [r7, #14]
 80013be:	897b      	ldrh	r3, [r7, #10]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 80013c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	3302      	adds	r3, #2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 80013da:	89fa      	ldrh	r2, [r7, #14]
 80013dc:	89bb      	ldrh	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 80013e4:	88fa      	ldrh	r2, [r7, #6]
 80013e6:	893b      	ldrh	r3, [r7, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	b298      	uxth	r0, r3
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	883a      	ldrh	r2, [r7, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fd92 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	893b      	ldrh	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b298      	uxth	r0, r3
 8001404:	88ba      	ldrh	r2, [r7, #4]
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	883a      	ldrh	r2, [r7, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fd86 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	893b      	ldrh	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b298      	uxth	r0, r3
 800141c:	88ba      	ldrh	r2, [r7, #4]
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	883a      	ldrh	r2, [r7, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fd7a 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	893b      	ldrh	r3, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	b298      	uxth	r0, r3
 8001434:	88ba      	ldrh	r2, [r7, #4]
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	883a      	ldrh	r2, [r7, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fd6e 	bl	8000f20 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	4413      	add	r3, r2
 800144a:	b298      	uxth	r0, r3
 800144c:	88ba      	ldrh	r2, [r7, #4]
 800144e:	893b      	ldrh	r3, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	b29b      	uxth	r3, r3
 8001454:	883a      	ldrh	r2, [r7, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fd62 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b298      	uxth	r0, r3
 8001464:	88ba      	ldrh	r2, [r7, #4]
 8001466:	893b      	ldrh	r3, [r7, #8]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	883a      	ldrh	r2, [r7, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fd56 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b298      	uxth	r0, r3
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	883a      	ldrh	r2, [r7, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fd4a 	bl	8000f20 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4413      	add	r3, r2
 8001492:	b298      	uxth	r0, r3
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	893b      	ldrh	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	883a      	ldrh	r2, [r7, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fd3e 	bl	8000f20 <ST7735_DrawPixel>
  while (x < r)
 80014a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f6ff af77 	blt.w	80013a0 <ST7735_DrawCircle+0x88>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b08d      	sub	sp, #52	; 0x34
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4623      	mov	r3, r4
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	4603      	mov	r3, r0
 80014d0:	80bb      	strh	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]
 80014d6:	4613      	mov	r3, r2
 80014d8:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 80014da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dd0b      	ble.n	80014fe <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	80bb      	strh	r3, [r7, #4]
 80014ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014f0:	803b      	strh	r3, [r7, #0]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	843b      	strh	r3, [r7, #32]
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	8c3b      	ldrh	r3, [r7, #32]
 80014fc:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 80014fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001502:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001506:	429a      	cmp	r2, r3
 8001508:	dd0f      	ble.n	800152a <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 800150a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800150e:	83fb      	strh	r3, [r7, #30]
 8001510:	883b      	ldrh	r3, [r7, #0]
 8001512:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001516:	8bfb      	ldrh	r3, [r7, #30]
 8001518:	803b      	strh	r3, [r7, #0]
 800151a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800151e:	83bb      	strh	r3, [r7, #28]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001526:	8bbb      	ldrh	r3, [r7, #28]
 8001528:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 800152a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800152e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001532:	429a      	cmp	r2, r3
 8001534:	dd0b      	ble.n	800154e <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	837b      	strh	r3, [r7, #26]
 800153a:	883b      	ldrh	r3, [r7, #0]
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	8b7b      	ldrh	r3, [r7, #26]
 8001540:	803b      	strh	r3, [r7, #0]
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	833b      	strh	r3, [r7, #24]
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	8b3b      	ldrh	r3, [r7, #24]
 800154c:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 800154e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001552:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001556:	429a      	cmp	r2, r3
 8001558:	d137      	bne.n	80015ca <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800155e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001560:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 8001562:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001566:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800156a:	429a      	cmp	r2, r3
 800156c:	da02      	bge.n	8001574 <ST7735_FillTriangle+0xb8>
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001572:	e007      	b.n	8001584 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 8001574:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001578:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800157c:	429a      	cmp	r2, r3
 800157e:	dd01      	ble.n	8001584 <ST7735_FillTriangle+0xc8>
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 8001584:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001588:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800158c:	429a      	cmp	r2, r3
 800158e:	da03      	bge.n	8001598 <ST7735_FillTriangle+0xdc>
 8001590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001594:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001596:	e008      	b.n	80015aa <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001598:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800159c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dd02      	ble.n	80015aa <ST7735_FillTriangle+0xee>
 80015a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 80015aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015c0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80015c4:	f000 f9c0 	bl	8001948 <ST7735_DrawFastHLine>
    return;
 80015c8:	e0da      	b.n	8001780 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 80015d4:	883a      	ldrh	r2, [r7, #0]
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 80015de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 80015ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80015ee:	88bb      	ldrh	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 80015f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b29b      	uxth	r3, r3
 8001600:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 8001602:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001606:	883b      	ldrh	r3, [r7, #0]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 800160e:	2300      	movs	r3, #0
 8001610:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 8001616:	f9b7 2000 	ldrsh.w	r2, [r7]
 800161a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800161e:	429a      	cmp	r2, r3
 8001620:	d102      	bne.n	8001628 <ST7735_FillTriangle+0x16c>
 8001622:	883b      	ldrh	r3, [r7, #0]
 8001624:	853b      	strh	r3, [r7, #40]	; 0x28
 8001626:	e003      	b.n	8001630 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 8001628:	883b      	ldrh	r3, [r7, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001634:	e040      	b.n	80016b8 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 8001636:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800163a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800163e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001642:	b29a      	uxth	r2, r3
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 800164c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001654:	fb92 f3f3 	sdiv	r3, r2, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4413      	add	r3, r2
 800165e:	b29b      	uxth	r3, r3
 8001660:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8001662:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001664:	8afb      	ldrh	r3, [r7, #22]
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800166c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800166e:	8a7b      	ldrh	r3, [r7, #18]
 8001670:	4413      	add	r3, r2
 8001672:	b29b      	uxth	r3, r3
 8001674:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001676:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800167a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800167e:	429a      	cmp	r2, r3
 8001680:	dd05      	ble.n	800168e <ST7735_FillTriangle+0x1d2>
 8001682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001684:	813b      	strh	r3, [r7, #8]
 8001686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001688:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800168a:	893b      	ldrh	r3, [r7, #8]
 800168c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 800168e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	3301      	adds	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	b21a      	sxth	r2, r3
 800169c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016a0:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80016a4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80016a8:	f000 f94e 	bl	8001948 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 80016ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016b8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80016bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016c0:	429a      	cmp	r2, r3
 80016c2:	ddb8      	ble.n	8001636 <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 80016c4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80016c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	fb12 f303 	smulbb	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 80016da:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80016de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	fb12 f303 	smulbb	r3, r2, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 80016f0:	e040      	b.n	8001774 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 80016f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	b29a      	uxth	r2, r3
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001708:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800170c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001710:	fb92 f3f3 	sdiv	r3, r2, r3
 8001714:	b29a      	uxth	r2, r3
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4413      	add	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 800171e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001732:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001736:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800173a:	429a      	cmp	r2, r3
 800173c:	dd05      	ble.n	800174a <ST7735_FillTriangle+0x28e>
 800173e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001744:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 800174a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800174c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21a      	sxth	r2, r3
 8001758:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800175c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001760:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001764:	f000 f8f0 	bl	8001948 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8001768:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3301      	adds	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001774:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001778:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800177c:	429a      	cmp	r2, r3
 800177e:	ddb8      	ble.n	80016f2 <ST7735_FillTriangle+0x236>
  }
}
 8001780:	3734      	adds	r7, #52	; 0x34
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}

08001786 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001786:	b590      	push	{r4, r7, lr}
 8001788:	b089      	sub	sp, #36	; 0x24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4604      	mov	r4, r0
 800178e:	4608      	mov	r0, r1
 8001790:	4611      	mov	r1, r2
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	80fb      	strh	r3, [r7, #6]
 8001798:	4603      	mov	r3, r0
 800179a:	80bb      	strh	r3, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80017a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017b6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	1acb      	subs	r3, r1, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	429a      	cmp	r2, r3
 80017c8:	bfcc      	ite	gt
 80017ca:	2301      	movgt	r3, #1
 80017cc:	2300      	movle	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	837b      	strh	r3, [r7, #26]
	if (steep)
 80017d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	833b      	strh	r3, [r7, #24]
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	8b3b      	ldrh	r3, [r7, #24]
 80017e4:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	82fb      	strh	r3, [r7, #22]
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	8afb      	ldrh	r3, [r7, #22]
 80017f0:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 80017f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd0b      	ble.n	8001816 <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	82bb      	strh	r3, [r7, #20]
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	8abb      	ldrh	r3, [r7, #20]
 8001808:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	827b      	strh	r3, [r7, #18]
 800180e:	883b      	ldrh	r3, [r7, #0]
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	8a7b      	ldrh	r3, [r7, #18]
 8001814:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001820:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001824:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	bfb8      	it	lt
 800182e:	425b      	neglt	r3, r3
 8001830:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001832:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001836:	0fda      	lsrs	r2, r3, #31
 8001838:	4413      	add	r3, r2
 800183a:	105b      	asrs	r3, r3, #1
 800183c:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 800183e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001842:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001846:	429a      	cmp	r2, r3
 8001848:	da02      	bge.n	8001850 <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	83bb      	strh	r3, [r7, #28]
 800184e:	e02d      	b.n	80018ac <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8001850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001854:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 8001856:	e029      	b.n	80018ac <ST7735_DrawLine+0x126>
	{
		if (steep)
 8001858:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	88f9      	ldrh	r1, [r7, #6]
 8001864:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb5a 	bl	8000f20 <ST7735_DrawPixel>
 800186c:	e005      	b.n	800187a <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	88b9      	ldrh	r1, [r7, #4]
 8001872:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb53 	bl	8000f20 <ST7735_DrawPixel>
		}
		err -= dy;
 800187a:	8bfa      	ldrh	r2, [r7, #30]
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8001884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da09      	bge.n	80018a0 <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	8bbb      	ldrh	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8001896:	8bfa      	ldrh	r2, [r7, #30]
 8001898:	8a3b      	ldrh	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	80fb      	strh	r3, [r7, #6]
 80018ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	ddcf      	ble.n	8001858 <ST7735_DrawLine+0xd2>
		}
	}
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
	...

080018c4 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	80bb      	strh	r3, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <ST7735_DrawFastVLine+0x7c>)
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	da22      	bge.n	8001936 <ST7735_DrawFastVLine+0x72>
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <ST7735_DrawFastVLine+0x80>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	da1b      	bge.n	8001936 <ST7735_DrawFastVLine+0x72>
  if ((y + h - 1) >= _height) h = _height - y;
 80018fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001902:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001906:	4413      	add	r3, r2
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <ST7735_DrawFastVLine+0x80>)
 800190a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800190e:	4293      	cmp	r3, r2
 8001910:	dd07      	ble.n	8001922 <ST7735_DrawFastVLine+0x5e>
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <ST7735_DrawFastVLine+0x80>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	b29b      	uxth	r3, r3
 8001920:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, 1, h, color);
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	88b9      	ldrh	r1, [r7, #4]
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	2201      	movs	r2, #1
 8001930:	f7ff fb98 	bl	8001064 <ST7735_FillRectangle>
 8001934:	e000      	b.n	8001938 <ST7735_DrawFastVLine+0x74>
  if ((x >= _width) || (y >= _height)) return;
 8001936:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x, y + h - 1, color);
  #endif

}
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	2000000e 	.word	0x2000000e
 8001944:	2000000c 	.word	0x2000000c

08001948 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af02      	add	r7, sp, #8
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	4603      	mov	r3, r0
 800195c:	80bb      	strh	r3, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <ST7735_DrawFastHLine+0x78>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001970:	429a      	cmp	r2, r3
 8001972:	da21      	bge.n	80019b8 <ST7735_DrawFastHLine+0x70>
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <ST7735_DrawFastHLine+0x7c>)
 8001976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	da1a      	bge.n	80019b8 <ST7735_DrawFastHLine+0x70>
  if ((x + w - 1) >= _width)  w = _width - x;
 8001982:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001986:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800198a:	4413      	add	r3, r2
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <ST7735_DrawFastHLine+0x78>)
 800198e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001992:	4293      	cmp	r3, r2
 8001994:	dd07      	ble.n	80019a6 <ST7735_DrawFastHLine+0x5e>
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <ST7735_DrawFastHLine+0x78>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b29a      	uxth	r2, r3
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, w, 1, color);
 80019a6:	88f8      	ldrh	r0, [r7, #6]
 80019a8:	88b9      	ldrh	r1, [r7, #4]
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	883b      	ldrh	r3, [r7, #0]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	f7ff fb57 	bl	8001064 <ST7735_FillRectangle>
 80019b6:	e000      	b.n	80019ba <ST7735_DrawFastHLine+0x72>
  if ((x >= _width) || (y >= _height)) return;
 80019b8:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x + w - 1, y, color);
  #endif
}
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	2000000e 	.word	0x2000000e
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <ST7735_SetRotation+0x138>)
 80019dc:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	4848      	ldr	r0, [pc, #288]	; (8001b04 <ST7735_SetRotation+0x13c>)
 80019e4:	f001 f870 	bl	8002ac8 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 80019e8:	2036      	movs	r0, #54	; 0x36
 80019ea:	f7ff f92f 	bl	8000c4c <ST7735_WriteCommand>

  switch (_value_rotation)
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <ST7735_SetRotation+0x138>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d87a      	bhi.n	8001aec <ST7735_SetRotation+0x124>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <ST7735_SetRotation+0x34>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a49 	.word	0x08001a49
 8001a04:	08001a85 	.word	0x08001a85
 8001a08:	08001ab1 	.word	0x08001ab1
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a1a:	78db      	ldrb	r3, [r3, #3]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001a22:	f107 030f 	add.w	r3, r7, #15
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f929 	bl	8000c80 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <ST7735_SetRotation+0x144>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <ST7735_SetRotation+0x148>)
 8001a36:	22a0      	movs	r2, #160	; 0xa0
 8001a38:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <ST7735_SetRotation+0x14c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8001a40:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <ST7735_SetRotation+0x150>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
    }
     break;
 8001a46:	e051      	b.n	8001aec <ST7735_SetRotation+0x124>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a4a:	785a      	ldrb	r2, [r3, #1]
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a4e:	789b      	ldrb	r3, [r3, #2]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001a5e:	f107 030e 	add.w	r3, r7, #14
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f90b 	bl	8000c80 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <ST7735_SetRotation+0x144>)
 8001a6c:	22a0      	movs	r2, #160	; 0xa0
 8001a6e:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <ST7735_SetRotation+0x148>)
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <ST7735_SetRotation+0x14c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <ST7735_SetRotation+0x150>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001a82:	e033      	b.n	8001aec <ST7735_SetRotation+0x124>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001a8a:	f107 030d 	add.w	r3, r7, #13
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f8f5 	bl	8000c80 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <ST7735_SetRotation+0x144>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <ST7735_SetRotation+0x148>)
 8001a9e:	22a0      	movs	r2, #160	; 0xa0
 8001aa0:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <ST7735_SetRotation+0x14c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <ST7735_SetRotation+0x150>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001aae:	e01d      	b.n	8001aec <ST7735_SetRotation+0x124>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001ab6:	789b      	ldrb	r3, [r3, #2]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <ST7735_SetRotation+0x140>)
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8d7 	bl	8000c80 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <ST7735_SetRotation+0x144>)
 8001ad4:	22a0      	movs	r2, #160	; 0xa0
 8001ad6:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <ST7735_SetRotation+0x148>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <ST7735_SetRotation+0x14c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <ST7735_SetRotation+0x150>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001aea:	bf00      	nop
  }
  TFT_CS_H();
 8001aec:	2201      	movs	r2, #1
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <ST7735_SetRotation+0x13c>)
 8001af2:	f000 ffe9 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200000f4 	.word	0x200000f4
 8001b04:	40020400 	.word	0x40020400
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	2000000e 	.word	0x2000000e
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	200000f5 	.word	0x200000f5
 8001b18:	200000f6 	.word	0x200000f6

08001b1c <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return _height;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <ST7735_GetHeight+0x14>)
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return _width;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <ST7735_GetWidth+0x14>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	2000000e 	.word	0x2000000e

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b8a:	2007      	movs	r0, #7
 8001b8c:	f000 fa56 	bl	800203c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <HAL_SPI_MspInit+0xe0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d159      	bne.n	8001c72 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a2e      	ldr	r2, [pc, #184]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_SPI_MspInit+0xe4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bf6:	23a0      	movs	r3, #160	; 0xa0
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c06:	2305      	movs	r3, #5
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481c      	ldr	r0, [pc, #112]	; (8001c84 <HAL_SPI_MspInit+0xe8>)
 8001c12:	f000 fdc5 	bl	80027a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_SPI_MspInit+0xf0>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c1e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c56:	480c      	ldr	r0, [pc, #48]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c58:	f000 fa32 	bl	80020c0 <HAL_DMA_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001c62:	f7fe ffd3 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c6a:	649a      	str	r2, [r3, #72]	; 0x48
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_SPI_MspInit+0xec>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40013000 	.word	0x40013000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000094 	.word	0x20000094
 8001c8c:	40026458 	.word	0x40026458

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <NMI_Handler+0x4>

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f89a 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA2_Stream3_IRQHandler+0x10>)
 8001cea:	f000 faef 	bl	80022cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000094 	.word	0x20000094

08001cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480d      	ldr	r0, [pc, #52]	; (8001d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d22:	490e      	ldr	r1, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d24:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d38:	4c0b      	ldr	r4, [pc, #44]	; (8001d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d46:	f7ff ffd7 	bl	8001cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f002 f8c1 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4e:	f7fe fdf3 	bl	8000938 <main>
  bx  lr    
 8001d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001d60:	0800d388 	.word	0x0800d388
  ldr r2, =_sbss
 8001d64:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001d68:	200000fc 	.word	0x200000fc

08001d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_Init+0x40>)
 8001d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_Init+0x40>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x40>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f94f 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fed2 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f967 	bl	80020a6 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f92f 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	20000018 	.word	0x20000018
 8001e10:	20000014 	.word	0x20000014

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000018 	.word	0x20000018
 8001e38:	200000f8 	.word	0x200000f8

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200000f8 	.word	0x200000f8

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000018 	.word	0x20000018

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff feb6 	bl	8001e3c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e099      	b.n	8002210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fc:	e00f      	b.n	800211e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020fe:	f7ff fe9d 	bl	8001e3c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b05      	cmp	r3, #5
 800210a:	d908      	bls.n	800211e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e078      	b.n	8002210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e8      	bne.n	80020fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_DMA_Init+0x158>)
 8002138:	4013      	ands	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	2b04      	cmp	r3, #4
 8002176:	d107      	bne.n	8002188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4313      	orrs	r3, r2
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f023 0307 	bic.w	r3, r3, #7
 800219e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d117      	bne.n	80021e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fa6f 	bl	80026a8 <DMA_CheckFifoParam>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021de:	2301      	movs	r3, #1
 80021e0:	e016      	b.n	8002210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fa26 	bl	800263c <DMA_CalcBaseAndBitshift>
 80021f0:	4603      	mov	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	223f      	movs	r2, #63	; 0x3f
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	f010803f 	.word	0xf010803f

0800221c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_DMA_Start_IT+0x26>
 800223e:	2302      	movs	r3, #2
 8002240:	e040      	b.n	80022c4 <HAL_DMA_Start_IT+0xa8>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d12f      	bne.n	80022b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9b8 	bl	80025e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0216 	orr.w	r2, r2, #22
 800228a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0208 	orr.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e005      	b.n	80022c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022d8:	4b8e      	ldr	r3, [pc, #568]	; (8002514 <HAL_DMA_IRQHandler+0x248>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a8e      	ldr	r2, [pc, #568]	; (8002518 <HAL_DMA_IRQHandler+0x24c>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a9b      	lsrs	r3, r3, #10
 80022e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2208      	movs	r2, #8
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01a      	beq.n	8002338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2208      	movs	r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	2201      	movs	r2, #1
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2201      	movs	r2, #1
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	2204      	movs	r2, #4
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d012      	beq.n	80023a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2204      	movs	r2, #4
 8002392:	409a      	lsls	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2210      	movs	r2, #16
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d043      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03c      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2210      	movs	r2, #16
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d018      	beq.n	800240e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d024      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e01f      	b.n	800243c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
 800240c:	e016      	b.n	800243c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0208 	bic.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2220      	movs	r2, #32
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 808f 	beq.w	800256c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8087 	beq.w	800256c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	2220      	movs	r2, #32
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b05      	cmp	r3, #5
 8002474:	d136      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0216 	bic.w	r2, r2, #22
 8002484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_DMA_IRQHandler+0x1da>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0208 	bic.w	r2, r2, #8
 80024b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	223f      	movs	r2, #63	; 0x3f
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
        }
        return;
 80024e2:	e079      	b.n	80025d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01d      	beq.n	800252e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	2b00      	cmp	r3, #0
 8002506:	d031      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e02c      	b.n	800256c <HAL_DMA_IRQHandler+0x2a0>
 8002512:	bf00      	nop
 8002514:	20000010 	.word	0x20000010
 8002518:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
 800252c:	e01e      	b.n	800256c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0210 	bic.w	r2, r2, #16
 800254a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d032      	beq.n	80025da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2205      	movs	r2, #5
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3301      	adds	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d307      	bcc.n	80025b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f2      	bne.n	8002598 <HAL_DMA_IRQHandler+0x2cc>
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e000      	b.n	80025da <HAL_DMA_IRQHandler+0x30e>
        return;
 80025d8:	bf00      	nop
    }
  }
}
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d108      	bne.n	8002620 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800261e:	e007      	b.n	8002630 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3b10      	subs	r3, #16
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <DMA_CalcBaseAndBitshift+0x64>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d909      	bls.n	800267e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	; 0x58
 800267c:	e007      	b.n	800268e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	aaaaaaab 	.word	0xaaaaaaab
 80026a4:	0800d370 	.word	0x0800d370

080026a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d11f      	bne.n	8002702 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d856      	bhi.n	8002776 <DMA_CheckFifoParam+0xce>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <DMA_CheckFifoParam+0x28>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026f3 	.word	0x080026f3
 80026d8:	080026e1 	.word	0x080026e1
 80026dc:	08002777 	.word	0x08002777
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d046      	beq.n	800277a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e043      	b.n	800277a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026fa:	d140      	bne.n	800277e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e03d      	b.n	800277e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270a:	d121      	bne.n	8002750 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d837      	bhi.n	8002782 <DMA_CheckFifoParam+0xda>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <DMA_CheckFifoParam+0x70>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002729 	.word	0x08002729
 800271c:	0800272f 	.word	0x0800272f
 8002720:	08002729 	.word	0x08002729
 8002724:	08002741 	.word	0x08002741
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e030      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d025      	beq.n	8002786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273e:	e022      	b.n	8002786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800274e:	e01c      	b.n	800278a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d903      	bls.n	800275e <DMA_CheckFifoParam+0xb6>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d003      	beq.n	8002764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800275c:	e018      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      break;
 8002762:	e015      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e00b      	b.n	800278e <DMA_CheckFifoParam+0xe6>
      break;
 8002776:	bf00      	nop
 8002778:	e00a      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800277a:	bf00      	nop
 800277c:	e008      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
 8002780:	e006      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;   
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
    }
  } 
  
  return status; 
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e165      	b.n	8002a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8154 	bne.w	8002a82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80ae 	beq.w	8002a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a5c      	ldr	r2, [pc, #368]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x308>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x21a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_GPIO_Init+0x30c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x216>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x310>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x212>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_GPIO_Init+0x314>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x20e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <HAL_GPIO_Init+0x318>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x20a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x31c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x206>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_GPIO_Init+0x320>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x202>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae96 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b28:	f7ff f988 	bl	8001e3c <HAL_GetTick>
 8002b2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b2e:	e009      	b.n	8002b44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b30:	f7ff f984 	bl	8001e3c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3e:	d901      	bls.n	8002b44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e01f      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d1ee      	bne.n	8002b30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7ff f970 	bl	8001e3c <HAL_GetTick>
 8002b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b5e:	e009      	b.n	8002b74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b60:	f7ff f96c 	bl	8001e3c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b6e:	d901      	bls.n	8002b74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e007      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b80:	d1ee      	bne.n	8002b60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	420e0040 	.word	0x420e0040
 8002b94:	40007000 	.word	0x40007000
 8002b98:	420e0044 	.word	0x420e0044

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0cc      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d90c      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	494d      	ldr	r1, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7ff f8d6 	bl	8001e3c <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7ff f8d2 	bl	8001e3c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20c      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e032      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4916      	ldr	r1, [pc, #88]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490e      	ldr	r1, [pc, #56]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f821 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	490a      	ldr	r1, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f836 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	0800d360 	.word	0x0800d360
 8002d60:	20000010 	.word	0x20000010
 8002d64:	20000014 	.word	0x20000014

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b0ae      	sub	sp, #184	; 0xb8
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8e:	4bcb      	ldr	r3, [pc, #812]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	f200 8206 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x440>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	080031a9 	.word	0x080031a9
 8002dac:	080031a9 	.word	0x080031a9
 8002db0:	080031a9 	.word	0x080031a9
 8002db4:	08002de1 	.word	0x08002de1
 8002db8:	080031a9 	.word	0x080031a9
 8002dbc:	080031a9 	.word	0x080031a9
 8002dc0:	080031a9 	.word	0x080031a9
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	080031a9 	.word	0x080031a9
 8002dcc:	080031a9 	.word	0x080031a9
 8002dd0:	080031a9 	.word	0x080031a9
 8002dd4:	08002fd9 	.word	0x08002fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4bb9      	ldr	r3, [pc, #740]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dde:	e1e7      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4bb8      	ldr	r3, [pc, #736]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002de6:	e1e3      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de8:	4bb4      	ldr	r3, [pc, #720]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df4:	4bb1      	ldr	r3, [pc, #708]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d071      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e00:	4bae      	ldr	r3, [pc, #696]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4621      	mov	r1, r4
 8002e40:	1a51      	subs	r1, r2, r1
 8002e42:	6439      	str	r1, [r7, #64]	; 0x40
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e58:	4649      	mov	r1, r9
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e62:	4641      	mov	r1, r8
 8002e64:	018a      	lsls	r2, r1, #6
 8002e66:	4641      	mov	r1, r8
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e80:	4649      	mov	r1, r9
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4622      	mov	r2, r4
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	024b      	lsls	r3, r1, #9
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eba:	4621      	mov	r1, r4
 8002ebc:	024a      	lsls	r2, r1, #9
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ed4:	f7fd f996 	bl	8000204 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee2:	e067      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b75      	ldr	r3, [pc, #468]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efe:	2300      	movs	r3, #0
 8002f00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0159      	lsls	r1, r3, #5
 8002f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f18:	0150      	lsls	r0, r2, #5
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4621      	mov	r1, r4
 8002f20:	1a51      	subs	r1, r2, r1
 8002f22:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f38:	4649      	mov	r1, r9
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f42:	4641      	mov	r1, r8
 8002f44:	018a      	lsls	r2, r1, #6
 8002f46:	4641      	mov	r1, r8
 8002f48:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f66:	4692      	mov	sl, r2
 8002f68:	469b      	mov	fp, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	462b      	mov	r3, r5
 8002f74:	eb4b 0303 	adc.w	r3, fp, r3
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f86:	4629      	mov	r1, r5
 8002f88:	028b      	lsls	r3, r1, #10
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f90:	4621      	mov	r1, r4
 8002f92:	028a      	lsls	r2, r1, #10
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fa6:	f7fd f92d 	bl	8000204 <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4613      	mov	r3, r2
 8002fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fd6:	e0eb      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d06b      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	663b      	str	r3, [r7, #96]	; 0x60
 8003004:	2300      	movs	r3, #0
 8003006:	667b      	str	r3, [r7, #100]	; 0x64
 8003008:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800300c:	4622      	mov	r2, r4
 800300e:	462b      	mov	r3, r5
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0159      	lsls	r1, r3, #5
 800301a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301e:	0150      	lsls	r0, r2, #5
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4621      	mov	r1, r4
 8003026:	1a51      	subs	r1, r2, r1
 8003028:	61b9      	str	r1, [r7, #24]
 800302a:	4629      	mov	r1, r5
 800302c:	eb63 0301 	sbc.w	r3, r3, r1
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800303e:	4659      	mov	r1, fp
 8003040:	018b      	lsls	r3, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003048:	4651      	mov	r1, sl
 800304a:	018a      	lsls	r2, r1, #6
 800304c:	4651      	mov	r1, sl
 800304e:	ebb2 0801 	subs.w	r8, r2, r1
 8003052:	4659      	mov	r1, fp
 8003054:	eb63 0901 	sbc.w	r9, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003064:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003068:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306c:	4690      	mov	r8, r2
 800306e:	4699      	mov	r9, r3
 8003070:	4623      	mov	r3, r4
 8003072:	eb18 0303 	adds.w	r3, r8, r3
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	462b      	mov	r3, r5
 800307a:	eb49 0303 	adc.w	r3, r9, r3
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800308c:	4629      	mov	r1, r5
 800308e:	024b      	lsls	r3, r1, #9
 8003090:	4621      	mov	r1, r4
 8003092:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003096:	4621      	mov	r1, r4
 8003098:	024a      	lsls	r2, r1, #9
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a2:	2200      	movs	r2, #0
 80030a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ac:	f7fd f8aa 	bl	8000204 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ba:	e065      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x420>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	2200      	movs	r2, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	4611      	mov	r1, r2
 80030d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030d8:	653b      	str	r3, [r7, #80]	; 0x50
 80030da:	2300      	movs	r3, #0
 80030dc:	657b      	str	r3, [r7, #84]	; 0x54
 80030de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	0159      	lsls	r1, r3, #5
 80030f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f4:	0150      	lsls	r0, r2, #5
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4641      	mov	r1, r8
 80030fc:	1a51      	subs	r1, r2, r1
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	4649      	mov	r1, r9
 8003102:	eb63 0301 	sbc.w	r3, r3, r1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003114:	4659      	mov	r1, fp
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	4651      	mov	r1, sl
 800311a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800311e:	4651      	mov	r1, sl
 8003120:	018a      	lsls	r2, r1, #6
 8003122:	4651      	mov	r1, sl
 8003124:	1a54      	subs	r4, r2, r1
 8003126:	4659      	mov	r1, fp
 8003128:	eb63 0501 	sbc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	464b      	mov	r3, r9
 8003148:	eb45 0303 	adc.w	r3, r5, r3
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003170:	2200      	movs	r2, #0
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
 8003174:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003176:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800317a:	f7fd f843 	bl	8000204 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4613      	mov	r3, r2
 8003184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800319a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031a6:	e003      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	37b8      	adds	r7, #184	; 0xb8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400

080031c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e28d      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8083 	beq.w	80032ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d019      	beq.n	8003228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f4:	4b91      	ldr	r3, [pc, #580]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003200:	4b8e      	ldr	r3, [pc, #568]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320c:	d00c      	beq.n	8003228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d112      	bne.n	8003240 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b84      	ldr	r3, [pc, #528]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05b      	beq.n	80032ec <HAL_RCC_OscConfig+0x124>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d157      	bne.n	80032ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e25a      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x90>
 800324a:	4b7c      	ldr	r3, [pc, #496]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7b      	ldr	r2, [pc, #492]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xcc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0xb4>
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a72      	ldr	r2, [pc, #456]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xcc>
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6e      	ldr	r2, [pc, #440]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6b      	ldr	r2, [pc, #428]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fdce 	bl	8001e3c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fdca 	bl	8001e3c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e21f      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xdc>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fdba 	bl	8001e3c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fdb6 	bl	8001e3c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e20b      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b57      	ldr	r3, [pc, #348]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x104>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d06f      	beq.n	80033da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032fa:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003306:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330e:	2b08      	cmp	r3, #8
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x186>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1d3      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4937      	ldr	r1, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x278>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe fd63 	bl	8001e3c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe fd5f 	bl	8001e3c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1b4      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x278>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fd42 	bl	8001e3c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe fd3e 	bl	8001e3c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e193      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fd22 	bl	8001e3c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe fd1e 	bl	8001e3c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e173      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x234>
 800341a:	e01b      	b.n	8003454 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x27c>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fd0b 	bl	8001e3c <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	e00e      	b.n	8003448 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe fd07 	bl	8001e3c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d907      	bls.n	8003448 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e15c      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ea      	bne.n	800342a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b83      	ldr	r3, [pc, #524]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fcc7 	bl	8001e3c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe fcc3 	bl	8001e3c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e118      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x31e>
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x358>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x340>
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5d      	ldr	r2, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x358>
 8003508:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a59      	ldr	r2, [pc, #356]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fc88 	bl	8001e3c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe fc84 	bl	8001e3c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0d7      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x368>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fc72 	bl	8001e3c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fc6e 	bl	8001e3c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0c1      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80ad 	beq.w	80036f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d060      	beq.n	8003668 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d145      	bne.n	800363a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fc42 	bl	8001e3c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe fc3e 	bl	8001e3c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e093      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe fc13 	bl	8001e3c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe fc0f 	bl	8001e3c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e064      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x452>
 8003638:	e05c      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fbfc 	bl	8001e3c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fbf8 	bl	8001e3c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04d      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x480>
 8003666:	e045      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e040      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_OscConfig+0x538>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d030      	beq.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d129      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d122      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d119      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10f      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07b      	b.n	800380e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d009      	beq.n	800373c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e005      	b.n	800373c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fa20 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0104 	and.w	r1, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0210 	and.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_SPI_Transmit+0x22>
 8003834:	2302      	movs	r3, #2
 8003836:	e126      	b.n	8003a86 <HAL_SPI_Transmit+0x270>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003840:	f7fe fafc 	bl	8001e3c <HAL_GetTick>
 8003844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385a:	e10b      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Transmit+0x52>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386c:	e102      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d10f      	bne.n	80038d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fc:	d14b      	bne.n	8003996 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0xf6>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13e      	bne.n	800398a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003930:	e02b      	b.n	800398a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d112      	bne.n	8003966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
 8003964:	e011      	b.n	800398a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fe fa69 	bl	8001e3c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Transmit+0x168>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Transmit+0x16e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003988:	e074      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ce      	bne.n	8003932 <HAL_SPI_Transmit+0x11c>
 8003994:	e04c      	b.n	8003a30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x18e>
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d140      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ca:	e02c      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d113      	bne.n	8003a02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a00:	e011      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a02:	f7fe fa1b 	bl	8001e3c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d803      	bhi.n	8003a1a <HAL_SPI_Transmit+0x204>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d102      	bne.n	8003a20 <HAL_SPI_Transmit+0x20a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a24:	e026      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cd      	bne.n	80039cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fa09 	bl	8003e4c <SPI_EndRxTxTransaction>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e000      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_SPI_Transmit_DMA+0x20>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e09b      	b.n	8003be8 <HAL_SPI_Transmit_DMA+0x158>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac8:	e089      	b.n	8003bde <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_Transmit_DMA+0x46>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ada:	e080      	b.n	8003bde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d10f      	bne.n	8003b44 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_SPI_Transmit_DMA+0x160>)
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_SPI_Transmit_DMA+0x164>)
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_SPI_Transmit_DMA+0x168>)
 8003b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	2200      	movs	r2, #0
 8003b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b7c:	f7fe fb4e 	bl	800221c <HAL_DMA_Start_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003b9e:	e01e      	b.n	8003bde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d007      	beq.n	8003bbe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0220 	orr.w	r2, r2, #32
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0202 	orr.w	r2, r2, #2
 8003bdc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08003ce1 	.word	0x08003ce1
 8003bf4:	08003c39 	.word	0x08003c39
 8003bf8:	08003cfd 	.word	0x08003cfd

08003bfc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c46:	f7fe f8f9 	bl	8001e3c <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5a:	d03b      	beq.n	8003cd4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0220 	bic.w	r2, r2, #32
 8003c6a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0202 	bic.w	r2, r2, #2
 8003c7a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	2164      	movs	r1, #100	; 0x64
 8003c80:	6978      	ldr	r0, [r7, #20]
 8003c82:	f000 f8e3 	bl	8003e4c <SPI_EndRxTxTransaction>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ccc:	6978      	ldr	r0, [r7, #20]
 8003cce:	f7ff ffa9 	bl	8003c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003cd2:	e002      	b.n	8003cda <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f7ff ff91 	bl	8003bfc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff ff8e 	bl	8003c10 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0203 	bic.w	r2, r2, #3
 8003d18:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff ff78 	bl	8003c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d4c:	f7fe f876 	bl	8001e3c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d5c:	f7fe f86e 	bl	8001e3c <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	015b      	lsls	r3, r3, #5
 8003d68:	0d1b      	lsrs	r3, r3, #20
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d72:	e054      	b.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d050      	beq.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d7c:	f7fe f85e 	bl	8001e3c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d902      	bls.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d13d      	bne.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003daa:	d111      	bne.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d004      	beq.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d107      	bne.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd8:	d10f      	bne.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e017      	b.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d19b      	bne.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000010 	.word	0x20000010

08003e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <SPI_EndRxTxTransaction+0x7c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <SPI_EndRxTxTransaction+0x80>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0d5b      	lsrs	r3, r3, #21
 8003e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e76:	d112      	bne.n	8003e9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f7ff ff5a 	bl	8003d3c <SPI_WaitFlagStateUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e00f      	b.n	8003ebe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d0f2      	beq.n	8003e9e <SPI_EndRxTxTransaction+0x52>
 8003eb8:	e000      	b.n	8003ebc <SPI_EndRxTxTransaction+0x70>
        break;
 8003eba:	bf00      	nop
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	165e9f81 	.word	0x165e9f81

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4d0d      	ldr	r5, [pc, #52]	; (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2600      	movs	r6, #0
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4d0b      	ldr	r5, [pc, #44]	; (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f820 	bl	8003f28 <_init>
 8003ee8:	1b64      	subs	r4, r4, r5
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2600      	movs	r6, #0
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	0800d380 	.word	0x0800d380
 8003f0c:	0800d380 	.word	0x0800d380
 8003f10:	0800d380 	.word	0x0800d380
 8003f14:	0800d384 	.word	0x0800d384

08003f18 <memset>:
 8003f18:	4402      	add	r2, r0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <_init>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr

08003f34 <_fini>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr
