
SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  0800ce90  0800ce90  0001ce90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d84c  0800d84c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d84c  0800d84c  0001d84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d854  0800d854  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002458  200001f8  0800da54  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002650  0800da54  00022650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014814  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba5  00000000  00000000  00034a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4d0  00000000  00000000  00039b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001842e  00000000  00000000  00053fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc7e  00000000  00000000  0006c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d0  00000000  00000000  0010a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce78 	.word	0x0800ce78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800ce78 	.word	0x0800ce78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2110      	movs	r1, #16
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <SELECT+0x18>)
 8001012:	f002 f8e5 	bl	80031e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f001 faa6 	bl	8002568 <HAL_Delay>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020000 	.word	0x40020000

08001024 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <DESELECT+0x18>)
 800102e:	f002 f8d7 	bl	80031e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 fa98 	bl	8002568 <HAL_Delay>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020000 	.word	0x40020000

08001040 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104a:	bf00      	nop
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SPI_TxByte+0x30>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d1f8      	bne.n	800104c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800105a:	1df9      	adds	r1, r7, #7
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	2201      	movs	r2, #1
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <SPI_TxByte+0x30>)
 8001062:	f002 fdb8 	bl	8003bd6 <HAL_SPI_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000264 	.word	0x20000264

08001074 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001080:	bf00      	nop
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SPI_TxBuffer+0x30>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b02      	cmp	r3, #2
 800108e:	d1f8      	bne.n	8001082 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <SPI_TxBuffer+0x30>)
 8001098:	f002 fd9d 	bl	8003bd6 <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000264 	.word	0x20000264

080010a8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010b2:	bf00      	nop
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <SPI_RxByte+0x34>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1f8      	bne.n	80010b4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010c2:	1dba      	adds	r2, r7, #6
 80010c4:	1df9      	adds	r1, r7, #7
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <SPI_RxByte+0x34>)
 80010ce:	f002 febe 	bl	8003e4e <HAL_SPI_TransmitReceive>

	return data;
 80010d2:	79bb      	ldrb	r3, [r7, #6]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000264 	.word	0x20000264

080010e0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010e8:	f7ff ffde 	bl	80010a8 <SPI_RxByte>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <SD_ReadyWait+0x30>)
 8001104:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001108:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800110a:	f7ff ffcd 	bl	80010a8 <SPI_RxByte>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d003      	beq.n	8001120 <SD_ReadyWait+0x24>
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <SD_ReadyWait+0x30>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f4      	bne.n	800110a <SD_ReadyWait+0xe>

	return res;
 8001120:	79fb      	ldrb	r3, [r7, #7]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000216 	.word	0x20000216

08001130 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001136:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800113a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800113c:	f7ff ff72 	bl	8001024 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	e005      	b.n	8001152 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001146:	20ff      	movs	r0, #255	; 0xff
 8001148:	f7ff ff7a 	bl	8001040 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b09      	cmp	r3, #9
 8001156:	ddf6      	ble.n	8001146 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001158:	f7ff ff56 	bl	8001008 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001170:	2395      	movs	r3, #149	; 0x95
 8001172:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001174:	463b      	mov	r3, r7
 8001176:	2106      	movs	r1, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff7b 	bl	8001074 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800117e:	e002      	b.n	8001186 <SD_PowerOn+0x56>
	{
		cnt--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3b01      	subs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001186:	f7ff ff8f 	bl	80010a8 <SPI_RxByte>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d002      	beq.n	8001196 <SD_PowerOn+0x66>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f4      	bne.n	8001180 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001196:	f7ff ff45 	bl	8001024 <DESELECT>
	SPI_TxByte(0XFF);
 800119a:	20ff      	movs	r0, #255	; 0xff
 800119c:	f7ff ff50 	bl	8001040 <SPI_TxByte>

	PowerFlag = 1;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <SD_PowerOn+0x80>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000219 	.word	0x20000219

080011b4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <SD_PowerOff+0x14>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000219 	.word	0x20000219

080011cc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <SD_CheckPower+0x14>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000219 	.word	0x20000219

080011e4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <SD_RxDataBlock+0x58>)
 80011f0:	22c8      	movs	r2, #200	; 0xc8
 80011f2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011f4:	f7ff ff58 	bl	80010a8 <SPI_RxByte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d103      	bne.n	800120a <SD_RxDataBlock+0x26>
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <SD_RxDataBlock+0x58>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f4      	bne.n	80011f4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2bfe      	cmp	r3, #254	; 0xfe
 800120e:	d001      	beq.n	8001214 <SD_RxDataBlock+0x30>
 8001210:	2300      	movs	r3, #0
 8001212:	e00f      	b.n	8001234 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff60 	bl	80010e0 <SPI_RxBytePtr>
	} while(len--);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	603a      	str	r2, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800122a:	f7ff ff3d 	bl	80010a8 <SPI_RxByte>
	SPI_RxByte();
 800122e:	f7ff ff3b 	bl	80010a8 <SPI_RxByte>

	return TRUE;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000214 	.word	0x20000214

08001240 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001250:	f7ff ff54 	bl	80010fc <SD_ReadyWait>
 8001254:	4603      	mov	r3, r0
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	d001      	beq.n	800125e <SD_TxDataBlock+0x1e>
 800125a:	2300      	movs	r3, #0
 800125c:	e02f      	b.n	80012be <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff feed 	bl	8001040 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2bfd      	cmp	r3, #253	; 0xfd
 800126a:	d020      	beq.n	80012ae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff feff 	bl	8001074 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001276:	f7ff ff17 	bl	80010a8 <SPI_RxByte>
		SPI_RxByte();
 800127a:	f7ff ff15 	bl	80010a8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800127e:	e00b      	b.n	8001298 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001280:	f7ff ff12 	bl	80010a8 <SPI_RxByte>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	2b05      	cmp	r3, #5
 8001290:	d006      	beq.n	80012a0 <SD_TxDataBlock+0x60>
			i++;
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3301      	adds	r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	2b40      	cmp	r3, #64	; 0x40
 800129c:	d9f0      	bls.n	8001280 <SD_TxDataBlock+0x40>
 800129e:	e000      	b.n	80012a2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012a0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012a2:	bf00      	nop
 80012a4:	f7ff ff00 	bl	80010a8 <SPI_RxByte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0fa      	beq.n	80012a4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d101      	bne.n	80012bc <SD_TxDataBlock+0x7c>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <SD_TxDataBlock+0x7e>

	return FALSE;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	6039      	str	r1, [r7, #0]
 80012d0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012d2:	f7ff ff13 	bl	80010fc <SD_ReadyWait>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2bff      	cmp	r3, #255	; 0xff
 80012da:	d001      	beq.n	80012e0 <SD_SendCmd+0x1a>
 80012dc:	23ff      	movs	r3, #255	; 0xff
 80012de:	e042      	b.n	8001366 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff feac 	bl	8001040 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	0e1b      	lsrs	r3, r3, #24
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fea6 	bl	8001040 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fea0 	bl	8001040 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe9a 	bl	8001040 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe95 	bl	8001040 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d102      	bne.n	8001322 <SD_SendCmd+0x5c>
 800131c:	2395      	movs	r3, #149	; 0x95
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e007      	b.n	8001332 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b48      	cmp	r3, #72	; 0x48
 8001326:	d102      	bne.n	800132e <SD_SendCmd+0x68>
 8001328:	2387      	movs	r3, #135	; 0x87
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <SD_SendCmd+0x6c>
	else crc = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe83 	bl	8001040 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b4c      	cmp	r3, #76	; 0x4c
 800133e:	d101      	bne.n	8001344 <SD_SendCmd+0x7e>
 8001340:	f7ff feb2 	bl	80010a8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001344:	230a      	movs	r3, #10
 8001346:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001348:	f7ff feae 	bl	80010a8 <SPI_RxByte>
 800134c:	4603      	mov	r3, r0
 800134e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001350:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001354:	2b00      	cmp	r3, #0
 8001356:	da05      	bge.n	8001364 <SD_SendCmd+0x9e>
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	3b01      	subs	r3, #1
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f1      	bne.n	8001348 <SD_SendCmd+0x82>

	return res;
 8001364:	7b7b      	ldrb	r3, [r7, #13]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SD_disk_initialize+0x14>
 8001380:	2301      	movs	r3, #1
 8001382:	e0d1      	b.n	8001528 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <SD_disk_initialize+0x1c0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <SD_disk_initialize+0x2a>
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <SD_disk_initialize+0x1c0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	e0c6      	b.n	8001528 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800139a:	f7ff fec9 	bl	8001130 <SD_PowerOn>

	/* slave select */
	SELECT();
 800139e:	f7ff fe33 	bl	8001008 <SELECT>

	/* check disk type */
	type = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013a6:	2100      	movs	r1, #0
 80013a8:	2040      	movs	r0, #64	; 0x40
 80013aa:	f7ff ff8c 	bl	80012c6 <SD_SendCmd>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f040 80a1 	bne.w	80014f8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <SD_disk_initialize+0x1c4>)
 80013b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013bc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013c2:	2048      	movs	r0, #72	; 0x48
 80013c4:	f7ff ff7f 	bl	80012c6 <SD_SendCmd>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d155      	bne.n	800147a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e00c      	b.n	80013ee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013d4:	7bfc      	ldrb	r4, [r7, #15]
 80013d6:	f7ff fe67 	bl	80010a8 <SPI_RxByte>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	f104 0310 	add.w	r3, r4, #16
 80013e2:	443b      	add	r3, r7
 80013e4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	3301      	adds	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d9ef      	bls.n	80013d4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013f4:	7abb      	ldrb	r3, [r7, #10]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d17e      	bne.n	80014f8 <SD_disk_initialize+0x188>
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	2baa      	cmp	r3, #170	; 0xaa
 80013fe:	d17b      	bne.n	80014f8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001400:	2100      	movs	r1, #0
 8001402:	2077      	movs	r0, #119	; 0x77
 8001404:	f7ff ff5f 	bl	80012c6 <SD_SendCmd>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d807      	bhi.n	800141e <SD_disk_initialize+0xae>
 800140e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001412:	2069      	movs	r0, #105	; 0x69
 8001414:	f7ff ff57 	bl	80012c6 <SD_SendCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <SD_disk_initialize+0x1c4>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ec      	bne.n	8001400 <SD_disk_initialize+0x90>
 8001426:	e000      	b.n	800142a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001428:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800142a:	4b42      	ldr	r3, [pc, #264]	; (8001534 <SD_disk_initialize+0x1c4>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d062      	beq.n	80014f8 <SD_disk_initialize+0x188>
 8001432:	2100      	movs	r1, #0
 8001434:	207a      	movs	r0, #122	; 0x7a
 8001436:	f7ff ff46 	bl	80012c6 <SD_SendCmd>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d15b      	bne.n	80014f8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e00c      	b.n	8001460 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001446:	7bfc      	ldrb	r4, [r7, #15]
 8001448:	f7ff fe2e 	bl	80010a8 <SPI_RxByte>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	f104 0310 	add.w	r3, r4, #16
 8001454:	443b      	add	r3, r7
 8001456:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d9ef      	bls.n	8001446 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SD_disk_initialize+0x104>
 8001470:	230c      	movs	r3, #12
 8001472:	e000      	b.n	8001476 <SD_disk_initialize+0x106>
 8001474:	2304      	movs	r3, #4
 8001476:	73bb      	strb	r3, [r7, #14]
 8001478:	e03e      	b.n	80014f8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800147a:	2100      	movs	r1, #0
 800147c:	2077      	movs	r0, #119	; 0x77
 800147e:	f7ff ff22 	bl	80012c6 <SD_SendCmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d808      	bhi.n	800149a <SD_disk_initialize+0x12a>
 8001488:	2100      	movs	r1, #0
 800148a:	2069      	movs	r0, #105	; 0x69
 800148c:	f7ff ff1b 	bl	80012c6 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d801      	bhi.n	800149a <SD_disk_initialize+0x12a>
 8001496:	2302      	movs	r3, #2
 8001498:	e000      	b.n	800149c <SD_disk_initialize+0x12c>
 800149a:	2301      	movs	r3, #1
 800149c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d10e      	bne.n	80014c2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014a4:	2100      	movs	r1, #0
 80014a6:	2077      	movs	r0, #119	; 0x77
 80014a8:	f7ff ff0d 	bl	80012c6 <SD_SendCmd>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d80e      	bhi.n	80014d0 <SD_disk_initialize+0x160>
 80014b2:	2100      	movs	r1, #0
 80014b4:	2069      	movs	r0, #105	; 0x69
 80014b6:	f7ff ff06 	bl	80012c6 <SD_SendCmd>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <SD_disk_initialize+0x160>
 80014c0:	e00c      	b.n	80014dc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014c2:	2100      	movs	r1, #0
 80014c4:	2041      	movs	r0, #65	; 0x41
 80014c6:	f7ff fefe 	bl	80012c6 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <SD_disk_initialize+0x1c4>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e2      	bne.n	800149e <SD_disk_initialize+0x12e>
 80014d8:	e000      	b.n	80014dc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014da:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <SD_disk_initialize+0x1c4>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <SD_disk_initialize+0x184>
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	2050      	movs	r0, #80	; 0x50
 80014ea:	f7ff feec 	bl	80012c6 <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SD_disk_initialize+0x188>
 80014f4:	2300      	movs	r3, #0
 80014f6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <SD_disk_initialize+0x1c8>)
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014fe:	f7ff fd91 	bl	8001024 <DESELECT>
	SPI_RxByte();
 8001502:	f7ff fdd1 	bl	80010a8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <SD_disk_initialize+0x1c0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SD_disk_initialize+0x1c0>)
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e001      	b.n	8001522 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800151e:	f7ff fe49 	bl	80011b4 <SD_PowerOff>
	}

	return Stat;
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <SD_disk_initialize+0x1c0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000214 	.word	0x20000214
 8001538:	20000218 	.word	0x20000218

0800153c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SD_disk_status+0x14>
 800154c:	2301      	movs	r3, #1
 800154e:	e002      	b.n	8001556 <SD_disk_status+0x1a>
	return Stat;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SD_disk_status+0x28>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <SD_disk_read+0x1c>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <SD_disk_read+0x20>
 8001584:	2304      	movs	r3, #4
 8001586:	e051      	b.n	800162c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <SD_disk_read+0xcc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SD_disk_read+0x32>
 8001596:	2303      	movs	r3, #3
 8001598:	e048      	b.n	800162c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <SD_disk_read+0xd0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <SD_disk_read+0x44>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ac:	f7ff fd2c 	bl	8001008 <SELECT>

	if (count == 1)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d111      	bne.n	80015da <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	2051      	movs	r0, #81	; 0x51
 80015ba:	f7ff fe84 	bl	80012c6 <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d129      	bne.n	8001618 <SD_disk_read+0xb0>
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f7ff fe0b 	bl	80011e4 <SD_RxDataBlock>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d021      	beq.n	8001618 <SD_disk_read+0xb0>
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	e01e      	b.n	8001618 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2052      	movs	r0, #82	; 0x52
 80015de:	f7ff fe72 	bl	80012c6 <SD_SendCmd>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d117      	bne.n	8001618 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f7ff fdf9 	bl	80011e4 <SD_RxDataBlock>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <SD_disk_read+0xa6>
				buff += 512;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ed      	bne.n	80015e8 <SD_disk_read+0x80>
 800160c:	e000      	b.n	8001610 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800160e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	204c      	movs	r0, #76	; 0x4c
 8001614:	f7ff fe57 	bl	80012c6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001618:	f7ff fd04 	bl	8001024 <DESELECT>
	SPI_RxByte();
 800161c:	f7ff fd44 	bl	80010a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000218 	.word	0x20000218

0800163c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <SD_disk_write+0x1c>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <SD_disk_write+0x20>
 8001658:	2304      	movs	r3, #4
 800165a:	e06b      	b.n	8001734 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <SD_disk_write+0x100>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SD_disk_write+0x32>
 800166a:	2303      	movs	r3, #3
 800166c:	e062      	b.n	8001734 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <SD_disk_write+0x100>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_write+0x44>
 800167c:	2302      	movs	r3, #2
 800167e:	e059      	b.n	8001734 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <SD_disk_write+0x104>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <SD_disk_write+0x56>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	607b      	str	r3, [r7, #4]

	SELECT();
 8001692:	f7ff fcb9 	bl	8001008 <SELECT>

	if (count == 1)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d110      	bne.n	80016be <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	2058      	movs	r0, #88	; 0x58
 80016a0:	f7ff fe11 	bl	80012c6 <SD_SendCmd>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d13a      	bne.n	8001720 <SD_disk_write+0xe4>
 80016aa:	21fe      	movs	r1, #254	; 0xfe
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7ff fdc7 	bl	8001240 <SD_TxDataBlock>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d033      	beq.n	8001720 <SD_disk_write+0xe4>
			count = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	e030      	b.n	8001720 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <SD_disk_write+0x104>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2077      	movs	r0, #119	; 0x77
 80016ce:	f7ff fdfa 	bl	80012c6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	2057      	movs	r0, #87	; 0x57
 80016d6:	f7ff fdf6 	bl	80012c6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	2059      	movs	r0, #89	; 0x59
 80016de:	f7ff fdf2 	bl	80012c6 <SD_SendCmd>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11b      	bne.n	8001720 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016e8:	21fc      	movs	r1, #252	; 0xfc
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7ff fda8 	bl	8001240 <SD_TxDataBlock>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <SD_disk_write+0xd0>
				buff += 512;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <SD_disk_write+0xac>
 800170a:	e000      	b.n	800170e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800170c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800170e:	21fd      	movs	r1, #253	; 0xfd
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fd95 	bl	8001240 <SD_TxDataBlock>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <SD_disk_write+0xe4>
			{
				count = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001720:	f7ff fc80 	bl	8001024 <DESELECT>
	SPI_RxByte();
 8001724:	f7ff fcc0 	bl	80010a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000218 	.word	0x20000218

08001744 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	603a      	str	r2, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	460b      	mov	r3, r1
 8001752:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SD_disk_ioctl+0x1e>
 800175e:	2304      	movs	r3, #4
 8001760:	e115      	b.n	800198e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d124      	bne.n	80017b8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d012      	beq.n	800179c <SD_disk_ioctl+0x58>
 8001776:	2b02      	cmp	r3, #2
 8001778:	dc1a      	bgt.n	80017b0 <SD_disk_ioctl+0x6c>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <SD_disk_ioctl+0x40>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d006      	beq.n	8001790 <SD_disk_ioctl+0x4c>
 8001782:	e015      	b.n	80017b0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001784:	f7ff fd16 	bl	80011b4 <SD_PowerOff>
			res = RES_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800178e:	e0fc      	b.n	800198a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001790:	f7ff fcce 	bl	8001130 <SD_PowerOn>
			res = RES_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179a:	e0f6      	b.n	800198a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	1c5c      	adds	r4, r3, #1
 80017a0:	f7ff fd14 	bl	80011cc <SD_CheckPower>
 80017a4:	4603      	mov	r3, r0
 80017a6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ae:	e0ec      	b.n	800198a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017b0:	2304      	movs	r3, #4
 80017b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017b6:	e0e8      	b.n	800198a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017b8:	4b77      	ldr	r3, [pc, #476]	; (8001998 <SD_disk_ioctl+0x254>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SD_disk_ioctl+0x86>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0e1      	b.n	800198e <SD_disk_ioctl+0x24a>

		SELECT();
 80017ca:	f7ff fc1d 	bl	8001008 <SELECT>

		switch (ctrl)
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	2b0d      	cmp	r3, #13
 80017d2:	f200 80cb 	bhi.w	800196c <SD_disk_ioctl+0x228>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <SD_disk_ioctl+0x98>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080018d7 	.word	0x080018d7
 80017e0:	08001815 	.word	0x08001815
 80017e4:	080018c7 	.word	0x080018c7
 80017e8:	0800196d 	.word	0x0800196d
 80017ec:	0800196d 	.word	0x0800196d
 80017f0:	0800196d 	.word	0x0800196d
 80017f4:	0800196d 	.word	0x0800196d
 80017f8:	0800196d 	.word	0x0800196d
 80017fc:	0800196d 	.word	0x0800196d
 8001800:	0800196d 	.word	0x0800196d
 8001804:	0800196d 	.word	0x0800196d
 8001808:	080018e9 	.word	0x080018e9
 800180c:	0800190d 	.word	0x0800190d
 8001810:	08001931 	.word	0x08001931
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001814:	2100      	movs	r1, #0
 8001816:	2049      	movs	r0, #73	; 0x49
 8001818:	f7ff fd55 	bl	80012c6 <SD_SendCmd>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80a8 	bne.w	8001974 <SD_disk_ioctl+0x230>
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2110      	movs	r1, #16
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fcda 	bl	80011e4 <SD_RxDataBlock>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809e 	beq.w	8001974 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10e      	bne.n	8001860 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001842:	7d7b      	ldrb	r3, [r7, #21]
 8001844:	b29a      	uxth	r2, r3
 8001846:	7d3b      	ldrb	r3, [r7, #20]
 8001848:	b29b      	uxth	r3, r3
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	3301      	adds	r3, #1
 8001854:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001856:	8bfb      	ldrh	r3, [r7, #30]
 8001858:	029a      	lsls	r2, r3, #10
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e02e      	b.n	80018be <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001860:	7c7b      	ldrb	r3, [r7, #17]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7dbb      	ldrb	r3, [r7, #22]
 800186a:	09db      	lsrs	r3, r3, #7
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7d7b      	ldrb	r3, [r7, #21]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0306 	and.w	r3, r3, #6
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3302      	adds	r3, #2
 8001884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001888:	7d3b      	ldrb	r3, [r7, #20]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29a      	uxth	r2, r3
 8001890:	7cfb      	ldrb	r3, [r7, #19]
 8001892:	b29b      	uxth	r3, r3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	7cbb      	ldrb	r3, [r7, #18]
 800189e:	029b      	lsls	r3, r3, #10
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018b0:	8bfa      	ldrh	r2, [r7, #30]
 80018b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018b6:	3b09      	subs	r3, #9
 80018b8:	409a      	lsls	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018c4:	e056      	b.n	8001974 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d4:	e055      	b.n	8001982 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018d6:	f7ff fc11 	bl	80010fc <SD_ReadyWait>
 80018da:	4603      	mov	r3, r0
 80018dc:	2bff      	cmp	r3, #255	; 0xff
 80018de:	d14b      	bne.n	8001978 <SD_disk_ioctl+0x234>
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018e6:	e047      	b.n	8001978 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018e8:	2100      	movs	r1, #0
 80018ea:	2049      	movs	r0, #73	; 0x49
 80018ec:	f7ff fceb 	bl	80012c6 <SD_SendCmd>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d142      	bne.n	800197c <SD_disk_ioctl+0x238>
 80018f6:	2110      	movs	r1, #16
 80018f8:	6a38      	ldr	r0, [r7, #32]
 80018fa:	f7ff fc73 	bl	80011e4 <SD_RxDataBlock>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03b      	beq.n	800197c <SD_disk_ioctl+0x238>
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190a:	e037      	b.n	800197c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800190c:	2100      	movs	r1, #0
 800190e:	204a      	movs	r0, #74	; 0x4a
 8001910:	f7ff fcd9 	bl	80012c6 <SD_SendCmd>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d132      	bne.n	8001980 <SD_disk_ioctl+0x23c>
 800191a:	2110      	movs	r1, #16
 800191c:	6a38      	ldr	r0, [r7, #32]
 800191e:	f7ff fc61 	bl	80011e4 <SD_RxDataBlock>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02b      	beq.n	8001980 <SD_disk_ioctl+0x23c>
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800192e:	e027      	b.n	8001980 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001930:	2100      	movs	r1, #0
 8001932:	207a      	movs	r0, #122	; 0x7a
 8001934:	f7ff fcc7 	bl	80012c6 <SD_SendCmd>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001944:	e00b      	b.n	800195e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001946:	6a3c      	ldr	r4, [r7, #32]
 8001948:	1c63      	adds	r3, r4, #1
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	f7ff fbac 	bl	80010a8 <SPI_RxByte>
 8001950:	4603      	mov	r3, r0
 8001952:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001958:	3301      	adds	r3, #1
 800195a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800195e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001962:	2b03      	cmp	r3, #3
 8001964:	d9ef      	bls.n	8001946 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800196c:	2304      	movs	r3, #4
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001972:	e006      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001974:	bf00      	nop
 8001976:	e004      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001978:	bf00      	nop
 800197a:	e002      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001980:	bf00      	nop
		}

		DESELECT();
 8001982:	f7ff fb4f 	bl	8001024 <DESELECT>
		SPI_RxByte();
 8001986:	f7ff fb8f 	bl	80010a8 <SPI_RxByte>
	}

	return res;
 800198a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800198e:	4618      	mov	r0, r3
 8001990:	372c      	adds	r7, #44	; 0x2c
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000

0800199c <send_uart>:
void clear_buffer(void) {
	for (int i = 0; i < BUFFER_SIZE; i++)
		buffer[i] = '\0';
}

void send_uart(char *string) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fc1b 	bl	80001e0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, len, HAL_MAX_DELAY); // transmit in blocking mode
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <send_uart+0x2c>)
 80019ba:	f002 ff92 	bl	80048e2 <HAL_UART_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000034c 	.word	0x2000034c
 80019cc:	00000000 	.word	0x00000000

080019d0 <read_temperature>:
float read_temperature(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	uint32_t adc_value;
	float temperature;

	// Start ADC conversion
	HAL_ADC_Start(&hadc1);
 80019d6:	4820      	ldr	r0, [pc, #128]	; (8001a58 <read_temperature+0x88>)
 80019d8:	f000 fe2e 	bl	8002638 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <read_temperature+0x88>)
 80019e2:	f000 fedd 	bl	80027a0 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <read_temperature+0x88>)
 80019e8:	f000 ff65 	bl	80028b6 <HAL_ADC_GetValue>
 80019ec:	6078      	str	r0, [r7, #4]

	// Convert ADC value to temperature
	// Assuming a linear conversion and a 3.3V reference voltage
	temperature = (adc_value * 3.3 / 4095) * 100;  // Example conversion formula
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fd90 	bl	8000514 <__aeabi_ui2d>
 80019f4:	a314      	add	r3, pc, #80	; (adr r3, 8001a48 <read_temperature+0x78>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fe05 	bl	8000608 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	a312      	add	r3, pc, #72	; (adr r3, 8001a50 <read_temperature+0x80>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe ff26 	bl	800085c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <read_temperature+0x8c>)
 8001a1e:	f7fe fdf3 	bl	8000608 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8e5 	bl	8000bf8 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	603b      	str	r3, [r7, #0]

	return temperature;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	ee07 3a90 	vmov	s15, r3
}
 8001a38:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	400a6666 	.word	0x400a6666
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40affe00 	.word	0x40affe00
 8001a58:	2000021c 	.word	0x2000021c
 8001a5c:	40590000 	.word	0x40590000

08001a60 <write_temperature_to_file>:

void write_temperature_to_file(float temperature) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	ed87 0a01 	vstr	s0, [r7, #4]
	char buffer[32];
	snprintf(buffer, sizeof(buffer), "Temperature: %.2f C\n", temperature);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f107 0008 	add.w	r0, r7, #8
 8001a78:	e9cd 2300 	strd	r2, r3, [sp]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <write_temperature_to_file+0x54>)
 8001a7e:	2120      	movs	r1, #32
 8001a80:	f007 fbd4 	bl	800922c <sniprintf>

	//send to serial

	// Open file, append data, and close file
	f_open(&fil, "temperature.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001a84:	2213      	movs	r2, #19
 8001a86:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <write_temperature_to_file+0x58>)
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <write_temperature_to_file+0x5c>)
 8001a8a:	f005 fd33 	bl	80074f4 <f_open>
	f_lseek(&fil, f_size(&fil));
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <write_temperature_to_file+0x5c>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <write_temperature_to_file+0x5c>)
 8001a96:	f006 f935 	bl	8007d04 <f_lseek>
	f_puts(buffer, &fil);
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4907      	ldr	r1, [pc, #28]	; (8001abc <write_temperature_to_file+0x5c>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 fbca 	bl	800823a <f_puts>
	f_close(&fil);
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <write_temperature_to_file+0x5c>)
 8001aa8:	f006 f902 	bl	8007cb0 <f_close>
}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800ce90 	.word	0x0800ce90
 8001ab8:	0800cea8 	.word	0x0800cea8
 8001abc:	200013c8 	.word	0x200013c8

08001ac0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ac6:	f000 fcdd 	bl	8002484 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001aca:	f000 f83d 	bl	8001b48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ace:	f000 f9f7 	bl	8001ec0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001ad2:	f000 f8f5 	bl	8001cc0 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001ad6:	f000 f9c9 	bl	8001e6c <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8001ada:	f003 fa77 	bl	8004fcc <MX_FATFS_Init>
	MX_TIM1_Init();
 8001ade:	f000 f925 	bl	8001d2c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ae2:	f000 f975 	bl	8001dd0 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001ae6:	f000 f899 	bl	8001c1c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8001aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aee:	f000 fd3b 	bl	8002568 <HAL_Delay>

	fresult = f_mount(&fs, "/", 1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	490f      	ldr	r1, [pc, #60]	; (8001b34 <main+0x74>)
 8001af6:	4810      	ldr	r0, [pc, #64]	; (8001b38 <main+0x78>)
 8001af8:	f005 fcb6 	bl	8007468 <f_mount>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <main+0x7c>)
 8001b02:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <main+0x7c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <main+0x54>
		send_uart("ERROR!!! in mounting SD CARD...\n\n");
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <main+0x80>)
 8001b0e:	f7ff ff45 	bl	800199c <send_uart>
 8001b12:	e002      	b.n	8001b1a <main+0x5a>
	else
		send_uart("SD CARD mounted successfully...\n\n");
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <main+0x84>)
 8001b16:	f7ff ff41 	bl	800199c <send_uart>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		float temperature = read_temperature();
 8001b1a:	f7ff ff59 	bl	80019d0 <read_temperature>
 8001b1e:	ed87 0a01 	vstr	s0, [r7, #4]
		write_temperature_to_file(temperature);
 8001b22:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b26:	f7ff ff9b 	bl	8001a60 <write_temperature_to_file>
		HAL_Delay(5000);  // Wait for 5 seconds
 8001b2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b2e:	f000 fd1b 	bl	8002568 <HAL_Delay>
	while (1) {
 8001b32:	e7f2      	b.n	8001b1a <main+0x5a>
 8001b34:	0800ceb8 	.word	0x0800ceb8
 8001b38:	20000390 	.word	0x20000390
 8001b3c:	200023f8 	.word	0x200023f8
 8001b40:	0800cebc 	.word	0x0800cebc
 8001b44:	0800cee0 	.word	0x0800cee0

08001b48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	; 0x50
 8001b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fce0 	bl	800851c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <SystemClock_Config+0xcc>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <SystemClock_Config+0xcc>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <SystemClock_Config+0xcc>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001bc0:	2354      	movs	r3, #84	; 0x54
 8001bc2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fb1f 	bl	8003214 <HAL_RCC_OscConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0x98>
		Error_Handler();
 8001bdc:	f000 f9d6 	bl	8001f8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001be0:	230f      	movs	r3, #15
 8001be2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be4:	2302      	movs	r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fd81 	bl	8003704 <HAL_RCC_ClockConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0xc4>
		Error_Handler();
 8001c08:	f000 f9c0 	bl	8001f8c <Error_Handler>
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3750      	adds	r7, #80	; 0x50
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000

08001c1c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <MX_ADC1_Init+0x9c>)
 8001c32:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c3a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <MX_ADC1_Init+0xa0>)
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c7e:	f000 fc97 	bl	80025b0 <HAL_ADC_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001c88:	f000 f980 	bl	8001f8c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001c8c:	2309      	movs	r3, #9
 8001c8e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_ADC1_Init+0x98>)
 8001c9e:	f000 fe17 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0x90>
		Error_Handler();
 8001ca8:	f000 f970 	bl	8001f8c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000021c 	.word	0x2000021c
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	0f000001 	.word	0x0f000001

08001cc0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d12:	f001 fed7 	bl	8003ac4 <HAL_SPI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001d1c:	f000 f936 	bl	8001f8c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000264 	.word	0x20000264
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <MX_TIM1_Init+0xa0>)
 8001d4e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d62:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d78:	f002 fad6 	bl	8004328 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8001d82:	f000 f903 	bl	8001f8c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d96:	f002 fb16 	bl	80043c6 <HAL_TIM_SlaveConfigSynchro>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x78>
		Error_Handler();
 8001da0:	f000 f8f4 	bl	8001f8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001db2:	f002 fcdb 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8001dbc:	f000 f8e6 	bl	8001f8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200002bc 	.word	0x200002bc
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e18:	f002 fa86 	bl	8004328 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001e22:	f000 f8b3 	bl	8001f8c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e36:	f002 fac6 	bl	80043c6 <HAL_TIM_SlaveConfigSynchro>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM2_Init+0x74>
		Error_Handler();
 8001e40:	f000 f8a4 	bl	8001f8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e52:	f002 fc8b 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001e5c:	f000 f896 	bl	8001f8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000304 	.word	0x20000304

08001e6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART1_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	f002 fcd0 	bl	8004848 <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001eae:	f000 f86d 	bl	8001f8c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000034c 	.word	0x2000034c
 8001ebc:	40011000 	.word	0x40011000

08001ec0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <MX_GPIO_Init+0xc0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	4815      	ldr	r0, [pc, #84]	; (8001f84 <MX_GPIO_Init+0xc4>)
 8001f30:	f001 f956 	bl	80031e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_GPIO_Init+0xc8>)
 8001f3a:	f001 f951 	bl	80031e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <MX_GPIO_Init+0xc4>)
 8001f56:	f000 ffbf 	bl	8002ed8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_GPIO_Init+0xc8>)
 8001f72:	f000 ffb1 	bl	8002ed8 <HAL_GPIO_Init>

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400

08001f8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_ADC_MspInit+0x7c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d127      	bne.n	800205a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_ADC_MspInit+0x80>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <HAL_ADC_MspInit+0x80>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_ADC_MspInit+0x80>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_ADC_MspInit+0x80>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_ADC_MspInit+0x80>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_ADC_MspInit+0x80>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002042:	2302      	movs	r3, #2
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002046:	2303      	movs	r3, #3
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_ADC_MspInit+0x84>)
 8002056:	f000 ff3f 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40012000 	.word	0x40012000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_SPI_MspInit+0x84>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12b      	bne.n	80020ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 800209c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23e0      	movs	r3, #224	; 0xe0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020da:	2305      	movs	r3, #5
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_SPI_MspInit+0x8c>)
 80020e6:	f000 fef7 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_TIM_Base_MspInit+0x64>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800212e:	e012      	b.n	8002156 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d10d      	bne.n	8002156 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_TIM_Base_MspInit+0x68>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0x84>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12c      	bne.n	80021e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d8:	2307      	movs	r3, #7
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_UART_MspInit+0x8c>)
 80021e4:	f000 fe78 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <SysTick_Handler+0x34>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <SysTick_Handler+0x18>
		Timer1--;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <SysTick_Handler+0x34>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <SysTick_Handler+0x34>)
 800225a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <SysTick_Handler+0x38>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <SysTick_Handler+0x2c>
		Timer2--;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <SysTick_Handler+0x38>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <SysTick_Handler+0x38>)
 800226e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 f95a 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000214 	.word	0x20000214
 800227c:	20000216 	.word	0x20000216

08002280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return 1;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_kill>:

int _kill(int pid, int sig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229a:	f006 f915 	bl	80084c8 <__errno>
 800229e:	4603      	mov	r3, r0
 80022a0:	2216      	movs	r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
  return -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_exit>:

void _exit (int status)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe7 	bl	8002290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c2:	e7fe      	b.n	80022c2 <_exit+0x12>

080022c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00a      	b.n	80022ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d6:	f3af 8000 	nop.w
 80022da:	4601      	mov	r1, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf0      	blt.n	80022d6 <_read+0x12>
  }

  return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e009      	b.n	8002324 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf1      	blt.n	8002310 <_write+0x12>
  }
  return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_close>:

int _close(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235e:	605a      	str	r2, [r3, #4]
  return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_isatty>:

int _isatty(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d0:	f006 f87a 	bl	80084c8 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	220c      	movs	r2, #12
 80023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20010000 	.word	0x20010000
 8002400:	00000400 	.word	0x00000400
 8002404:	200023fc 	.word	0x200023fc
 8002408:	20002650 	.word	0x20002650

0800240c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <SystemInit+0x20>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <SystemInit+0x20>)
 8002418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800241c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800244c:	4c0b      	ldr	r4, [pc, #44]	; (800247c <LoopFillZerobss+0x26>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245a:	f7ff ffd7 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f006 f839 	bl	80084d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7ff fb2d 	bl	8001ac0 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002468:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002474:	0800d85c 	.word	0x0800d85c
  ldr r2, =_sbss
 8002478:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800247c:	20002650 	.word	0x20002650

08002480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>
	...

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_Init+0x40>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_Init+0x40>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_Init+0x40>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 fcdf 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	200f      	movs	r0, #15
 80024b4:	f000 f808 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7ff fd6e 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fce9 	bl	8002ebe <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 fcbf 	bl	8002e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000004 	.word	0x20000004
 8002520:	2000000c 	.word	0x2000000c
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c
 800254c:	20002400 	.word	0x20002400

08002550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20002400 	.word	0x20002400

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffee 	bl	8002550 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_Delay+0x44>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffde 	bl	8002550 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e033      	b.n	800262e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd0a 	bl	8001fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f6:	f023 0302 	bic.w	r3, r3, #2
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa86 	bl	8002b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
 800261e:	e001      	b.n	8002624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Start+0x1a>
 800264e:	2302      	movs	r3, #2
 8002650:	e097      	b.n	8002782 <HAL_ADC_Start+0x14a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d018      	beq.n	800269a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002678:	4b45      	ldr	r3, [pc, #276]	; (8002790 <HAL_ADC_Start+0x158>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_ADC_Start+0x15c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9a      	lsrs	r2, r3, #18
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800268c:	e002      	b.n	8002694 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3b01      	subs	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d15f      	bne.n	8002768 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f023 0206 	bic.w	r2, r3, #6
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_ADC_Start+0x160>)
 8002706:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002710:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d129      	bne.n	8002780 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e020      	b.n	8002780 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_ADC_Start+0x164>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d11b      	bne.n	8002780 <HAL_ADC_Start+0x148>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d114      	bne.n	8002780 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	e00b      	b.n	8002780 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	431bde83 	.word	0x431bde83
 8002798:	40012300 	.word	0x40012300
 800279c:	40012000 	.word	0x40012000

080027a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	d113      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027cc:	d10b      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e063      	b.n	80028ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027e6:	f7ff feb3 	bl	8002550 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ec:	e021      	b.n	8002832 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d01d      	beq.n	8002832 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_ADC_PollForConversion+0x6c>
 80027fc:	f7ff fea8 	bl	8002550 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d212      	bcs.n	8002832 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d00b      	beq.n	8002832 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03d      	b.n	80028ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d1d6      	bne.n	80027ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0212 	mvn.w	r2, #18
 8002848:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d123      	bne.n	80028ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11f      	bne.n	80028ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e105      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x228>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d925      	bls.n	8002948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	3b1e      	subs	r3, #30
 8002912:	2207      	movs	r2, #7
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43da      	mvns	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	400a      	ands	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	4603      	mov	r3, r0
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4403      	add	r3, r0
 800293a:	3b1e      	subs	r3, #30
 800293c:	409a      	lsls	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	e022      	b.n	800298e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	2207      	movs	r2, #7
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	400a      	ands	r2, r1
 800296a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	4603      	mov	r3, r0
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4403      	add	r3, r0
 8002984:	409a      	lsls	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d824      	bhi.n	80029e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b05      	subs	r3, #5
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b05      	subs	r3, #5
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
 80029de:	e04c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d824      	bhi.n	8002a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	3b23      	subs	r3, #35	; 0x23
 80029fa:	221f      	movs	r2, #31
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43da      	mvns	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	400a      	ands	r2, r1
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b23      	subs	r3, #35	; 0x23
 8002a24:	fa00 f203 	lsl.w	r2, r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a30:	e023      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b41      	subs	r3, #65	; 0x41
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	400a      	ands	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b41      	subs	r3, #65	; 0x41
 8002a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_ADC_ConfigChannel+0x234>)
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <HAL_ADC_ConfigChannel+0x238>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d109      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1cc>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b12      	cmp	r3, #18
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_ADC_ConfigChannel+0x238>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d123      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x21e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d003      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x1e6>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d11b      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_ADC_ConfigChannel+0x23c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_ADC_ConfigChannel+0x240>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	0c9a      	lsrs	r2, r3, #18
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40012300 	.word	0x40012300
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	431bde83 	.word	0x431bde83

08002b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b1c:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <ADC_Init+0x1f0>)
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	021a      	lsls	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <ADC_Init+0x1f4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d022      	beq.n	8002bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	e00f      	b.n	8002c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0202 	bic.w	r2, r2, #2
 8002c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7e1b      	ldrb	r3, [r3, #24]
 8002c2c:	005a      	lsls	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01b      	beq.n	8002c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	035a      	lsls	r2, r3, #13
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	e007      	b.n	8002c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	051a      	lsls	r2, r3, #20
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cca:	025a      	lsls	r2, r3, #9
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	029a      	lsls	r2, r3, #10
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40012300 	.word	0x40012300
 8002d08:	0f000001 	.word	0x0f000001

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	; (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3c:	d301      	bcc.n	8002e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <SysTick_Config+0x40>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f7ff ff8e 	bl	8002d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <SysTick_Config+0x40>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <SysTick_Config+0x40>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff47 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff5c 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff8e 	bl	8002dc4 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5d 	bl	8002d70 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffb0 	bl	8002e2c <SysTick_Config>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e159      	b.n	80031a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 8148 	bne.w	80031a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d017      	beq.n	8002fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a2 	beq.w	80031a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307a:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x2ec>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a49      	ldr	r2, [pc, #292]	; (80031c8 <HAL_GPIO_Init+0x2f0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x202>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_GPIO_Init+0x2f4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1fe>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_GPIO_Init+0x2f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1fa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a46      	ldr	r2, [pc, #280]	; (80031d4 <HAL_GPIO_Init+0x2fc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1f6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a45      	ldr	r2, [pc, #276]	; (80031d8 <HAL_GPIO_Init+0x300>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1f2>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	; (80031c4 <HAL_GPIO_Init+0x2ec>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_GPIO_Init+0x304>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_GPIO_Init+0x304>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_GPIO_Init+0x304>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f aea2 	bls.w	8002ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e267      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d075      	beq.n	800331e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00c      	beq.n	8003258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d10b      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	4b7e      	ldr	r3, [pc, #504]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05b      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e242      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x74>
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6c      	ldr	r2, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 80032ac:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a68      	ldr	r2, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a65      	ldr	r2, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7ff f940 	bl	8002550 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7ff f93c 	bl	8002550 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e207      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7ff f92c 	bl	8002550 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7ff f928 	bl	8002550 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1f3      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11c      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1c7      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4937      	ldr	r1, [pc, #220]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	e03a      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7ff f8e1 	bl	8002550 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7ff f8dd 	bl	8002550 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1a8      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4925      	ldr	r1, [pc, #148]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7ff f8c0 	bl	8002550 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d4:	f7ff f8bc 	bl	8002550 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e187      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d036      	beq.n	800346c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7ff f8a0 	bl	8002550 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003414:	f7ff f89c 	bl	8002550 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e167      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x200>
 8003432:	e01b      	b.n	800346c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7ff f889 	bl	8002550 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	e00e      	b.n	8003460 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003442:	f7ff f885 	bl	8002550 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d907      	bls.n	8003460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e150      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ea      	bne.n	8003442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8097 	beq.w	80035a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b81      	ldr	r3, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a7c      	ldr	r2, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b77      	ldr	r3, [pc, #476]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a73      	ldr	r2, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7ff f845 	bl	8002550 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7ff f841 	bl	8002550 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e10c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x2ea>
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x30c>
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5b      	ldr	r2, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7ff f806 	bl	8002550 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7ff f802 	bl	8002550 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0cb      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ee      	beq.n	8003548 <HAL_RCC_OscConfig+0x334>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe fff0 	bl	8002550 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fe ffec 	bl	8002550 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0b5      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a1 	beq.w	80036f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d05c      	beq.n	8003678 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d141      	bne.n	800364a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCC_OscConfig+0x478>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe ffc0 	bl	8002550 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe ffbc 	bl	8002550 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e087      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe ff95 	bl	8002550 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe ff91 	bl	8002550 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e05c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x416>
 8003648:	e054      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe ff7e 	bl	8002550 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe ff7a 	bl	8002550 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e045      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x444>
 8003676:	e03d      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e038      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
 800368c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d028      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d121      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11a      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cc      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90c      	bls.n	8003740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e067      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fe feac 	bl	8002550 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe fea8 	bl	8002550 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20c      	bcs.n	800384c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fe0c 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800cf4c 	.word	0x0800cf4c
 80038c8:	20000004 	.word	0x20000004
 80038cc:	20000008 	.word	0x20000008

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b090      	sub	sp, #64	; 0x40
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	2300      	movs	r3, #0
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	2300      	movs	r3, #0
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80a1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x16c>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e09b      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003908:	e09b      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390e:	e098      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391a:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d028      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	627a      	str	r2, [r7, #36]	; 0x24
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003938:	2100      	movs	r1, #0
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800393c:	fb03 f201 	mul.w	r2, r3, r1
 8003940:	2300      	movs	r3, #0
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	4413      	add	r3, r2
 8003948:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800394a:	fba0 1202 	umull	r1, r2, r0, r2
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	460a      	mov	r2, r1
 8003952:	62ba      	str	r2, [r7, #40]	; 0x28
 8003954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003956:	4413      	add	r3, r2
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	2200      	movs	r2, #0
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	61fa      	str	r2, [r7, #28]
 8003962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003966:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800396a:	f7fd f995 	bl	8000c98 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4613      	mov	r3, r2
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003976:	e053      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	2200      	movs	r2, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	617a      	str	r2, [r7, #20]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800398a:	f04f 0b00 	mov.w	fp, #0
 800398e:	4652      	mov	r2, sl
 8003990:	465b      	mov	r3, fp
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	0159      	lsls	r1, r3, #5
 800399c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a0:	0150      	lsls	r0, r2, #5
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	ebb2 080a 	subs.w	r8, r2, sl
 80039aa:	eb63 090b 	sbc.w	r9, r3, fp
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039c2:	ebb2 0408 	subs.w	r4, r2, r8
 80039c6:	eb63 0509 	sbc.w	r5, r3, r9
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	00eb      	lsls	r3, r5, #3
 80039d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d8:	00e2      	lsls	r2, r4, #3
 80039da:	4614      	mov	r4, r2
 80039dc:	461d      	mov	r5, r3
 80039de:	eb14 030a 	adds.w	r3, r4, sl
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	eb45 030b 	adc.w	r3, r5, fp
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	60fa      	str	r2, [r7, #12]
 8003a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a14:	f7fd f940 	bl	8000c98 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3740      	adds	r7, #64	; 0x40
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	017d7840 	.word	0x017d7840

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0800cf5c 	.word	0x0800cf5c

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	0800cf5c 	.word	0x0800cf5c

08003ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07b      	b.n	8003bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d009      	beq.n	8003afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
 8003aee:	e005      	b.n	8003afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe faaa 	bl	8002070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	ea42 0103 	orr.w	r1, r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0104 	and.w	r1, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0210 	and.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b088      	sub	sp, #32
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_SPI_Transmit+0x22>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e126      	b.n	8003e46 <HAL_SPI_Transmit+0x270>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c00:	f7fe fca6 	bl	8002550 <HAL_GetTick>
 8003c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1a:	e10b      	b.n	8003e34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_SPI_Transmit+0x52>
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2c:	e102      	b.n	8003e34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2203      	movs	r2, #3
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	d10f      	bne.n	8003c96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d007      	beq.n	8003cb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d14b      	bne.n	8003d56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_SPI_Transmit+0xf6>
 8003cc6:	8afb      	ldrh	r3, [r7, #22]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d13e      	bne.n	8003d4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf0:	e02b      	b.n	8003d4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d112      	bne.n	8003d26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d24:	e011      	b.n	8003d4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d26:	f7fe fc13 	bl	8002550 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d803      	bhi.n	8003d3e <HAL_SPI_Transmit+0x168>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_Transmit+0x16e>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d48:	e074      	b.n	8003e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ce      	bne.n	8003cf2 <HAL_SPI_Transmit+0x11c>
 8003d54:	e04c      	b.n	8003df0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0x18e>
 8003d5e:	8afb      	ldrh	r3, [r7, #22]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d140      	bne.n	8003de6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d8a:	e02c      	b.n	8003de6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d113      	bne.n	8003dc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dc0:	e011      	b.n	8003de6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc2:	f7fe fbc5 	bl	8002550 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d803      	bhi.n	8003dda <HAL_SPI_Transmit+0x204>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d102      	bne.n	8003de0 <HAL_SPI_Transmit+0x20a>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de4:	e026      	b.n	8003e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1cd      	bne.n	8003d8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fa55 	bl	80042a4 <SPI_EndRxTxTransaction>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e000      	b.n	8003e34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	; 0x30
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x26>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e18a      	b.n	800418a <HAL_SPI_TransmitReceive+0x33c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fe fb68 	bl	8002550 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00f      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea4:	d107      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ebc:	e15b      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed6:	e14e      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d003      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d178      	bne.n	800403c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0x10a>
 8003f52:	8b7b      	ldrh	r3, [r7, #26]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d166      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7c:	e053      	b.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d113      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d119      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004002:	2301      	movs	r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004006:	f7fe faa3 	bl	8002550 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004012:	429a      	cmp	r2, r3
 8004014:	d807      	bhi.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d003      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004024:	e0a7      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1a6      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1a1      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 800403a:	e07c      	b.n	8004136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x1fc>
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d16b      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e057      	b.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11c      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d114      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fc:	f7fe fa28 	bl	8002550 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_TransmitReceive+0x2c6>
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_TransmitReceive+0x2cc>
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004120:	e029      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1a2      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d19d      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8b2 	bl	80042a4 <SPI_EndRxTxTransaction>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004152:	e010      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	e000      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800418a:	4618      	mov	r0, r3
 800418c:	3730      	adds	r7, #48	; 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a4:	f7fe f9d4 	bl	8002550 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b4:	f7fe f9cc 	bl	8002550 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	0d1b      	lsrs	r3, r3, #20
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ca:	e054      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d050      	beq.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d4:	f7fe f9bc 	bl	8002550 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d13d      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d111      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d004      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d107      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004230:	d10f      	bne.n	8004252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e017      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3b01      	subs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d19b      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000004 	.word	0x20000004

080042a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <SPI_EndRxTxTransaction+0x7c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <SPI_EndRxTxTransaction+0x80>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0d5b      	lsrs	r3, r3, #21
 80042bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ce:	d112      	bne.n	80042f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff ff5a 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d0f2      	beq.n	80042f6 <SPI_EndRxTxTransaction+0x52>
 8004310:	e000      	b.n	8004314 <SPI_EndRxTxTransaction+0x70>
        break;
 8004312:	bf00      	nop
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000004 	.word	0x20000004
 8004324:	165e9f81 	.word	0x165e9f81

08004328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e041      	b.n	80043be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fed6 	bl	8002100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 f870 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_TIM_SlaveConfigSynchro+0x18>
 80043da:	2302      	movs	r3, #2
 80043dc:	e031      	b.n	8004442 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8ab 	bl	800454c <TIM_SlaveTimer_SetConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e018      	b.n	8004442 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800442e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a34      	ldr	r2, [pc, #208]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x38>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x38>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a31      	ldr	r2, [pc, #196]	; (8004534 <TIM_Base_SetConfig+0xe8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x38>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a30      	ldr	r2, [pc, #192]	; (8004538 <TIM_Base_SetConfig+0xec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x38>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <TIM_Base_SetConfig+0xf0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d017      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <TIM_Base_SetConfig+0xe8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <TIM_Base_SetConfig+0xec>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <TIM_Base_SetConfig+0xf0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <TIM_Base_SetConfig+0xf4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <TIM_Base_SetConfig+0xf8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0x8a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <TIM_Base_SetConfig+0xfc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	615a      	str	r2, [r3, #20]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b70      	cmp	r3, #112	; 0x70
 8004594:	d01a      	beq.n	80045cc <TIM_SlaveTimer_SetConfig+0x80>
 8004596:	2b70      	cmp	r3, #112	; 0x70
 8004598:	d860      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 800459a:	2b60      	cmp	r3, #96	; 0x60
 800459c:	d054      	beq.n	8004648 <TIM_SlaveTimer_SetConfig+0xfc>
 800459e:	2b60      	cmp	r3, #96	; 0x60
 80045a0:	d85c      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045a2:	2b50      	cmp	r3, #80	; 0x50
 80045a4:	d046      	beq.n	8004634 <TIM_SlaveTimer_SetConfig+0xe8>
 80045a6:	2b50      	cmp	r3, #80	; 0x50
 80045a8:	d858      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d019      	beq.n	80045e2 <TIM_SlaveTimer_SetConfig+0x96>
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d854      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	d055      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045b6:	2b30      	cmp	r3, #48	; 0x30
 80045b8:	d850      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d051      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d84c      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04d      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d04b      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045ca:	e047      	b.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f000 f8a6 	bl	800472c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80045e0:	e040      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d101      	bne.n	80045ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03b      	b.n	8004666 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004614:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
      break;
 8004632:	e017      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	461a      	mov	r2, r3
 8004642:	f000 f814 	bl	800466e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004646:	e00d      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	461a      	mov	r2, r3
 8004656:	f000 f839 	bl	80046cc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800465a:	e003      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e000      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004662:	bf00      	nop
  }

  return status;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f023 0201 	bic.w	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 030a 	bic.w	r3, r3, #10
 80046aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f023 0210 	bic.w	r2, r3, #16
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	031b      	lsls	r3, r3, #12
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004708:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e050      	b.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d013      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10c      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40010000 	.word	0x40010000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40014000 	.word	0x40014000

08004848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e03f      	b.n	80048da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fc7c 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	; 0x24
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f929 	bl	8004ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b08a      	sub	sp, #40	; 0x28
 80048e6:	af02      	add	r7, sp, #8
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d17c      	bne.n	80049fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_UART_Transmit+0x2c>
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e075      	b.n	80049fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_UART_Transmit+0x3e>
 800491c:	2302      	movs	r3, #2
 800491e:	e06e      	b.n	80049fe <HAL_UART_Transmit+0x11c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2221      	movs	r2, #33	; 0x21
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004936:	f7fd fe0b 	bl	8002550 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x82>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004974:	e02a      	b.n	80049cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f840 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e036      	b.n	80049fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e007      	b.n	80049be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1cf      	bne.n	8004976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2140      	movs	r1, #64	; 0x40
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f810 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e000      	b.n	80049fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b090      	sub	sp, #64	; 0x40
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	e050      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d04c      	beq.n	8004aba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a26:	f7fd fd93 	bl	8002550 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d241      	bcs.n	8004aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a56:	637a      	str	r2, [r7, #52]	; 0x34
 8004a58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e5      	bne.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a8a:	623a      	str	r2, [r7, #32]
 8004a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	69f9      	ldr	r1, [r7, #28]
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e5      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e00f      	b.n	8004ada <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d09f      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3740      	adds	r7, #64	; 0x40
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae8:	b0c0      	sub	sp, #256	; 0x100
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	68d9      	ldr	r1, [r3, #12]
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	ea40 0301 	orr.w	r3, r0, r1
 8004b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b3c:	f021 010c 	bic.w	r1, r1, #12
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	6999      	ldr	r1, [r3, #24]
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	ea40 0301 	orr.w	r3, r0, r1
 8004b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d005      	beq.n	8004b84 <UART_SetConfig+0xa0>
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b8d      	ldr	r3, [pc, #564]	; (8004db4 <UART_SetConfig+0x2d0>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d104      	bne.n	8004b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7fe ff8a 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8004b88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b8c:	e003      	b.n	8004b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7fe ff71 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8004b92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba0:	f040 810c 	bne.w	8004dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	462b      	mov	r3, r5
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	eb12 0801 	adds.w	r8, r2, r1
 8004bcc:	4629      	mov	r1, r5
 8004bce:	eb43 0901 	adc.w	r9, r3, r1
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be6:	4690      	mov	r8, r2
 8004be8:	4699      	mov	r9, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	eb18 0303 	adds.w	r3, r8, r3
 8004bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	eb49 0303 	adc.w	r3, r9, r3
 8004bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c12:	460b      	mov	r3, r1
 8004c14:	18db      	adds	r3, r3, r3
 8004c16:	653b      	str	r3, [r7, #80]	; 0x50
 8004c18:	4613      	mov	r3, r2
 8004c1a:	eb42 0303 	adc.w	r3, r2, r3
 8004c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c28:	f7fc f836 	bl	8000c98 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	011c      	lsls	r4, r3, #4
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c54:	415b      	adcs	r3, r3
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c62:	4649      	mov	r1, r9
 8004c64:	eb43 0b01 	adc.w	fp, r3, r1
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c7c:	4692      	mov	sl, r2
 8004c7e:	469b      	mov	fp, r3
 8004c80:	4643      	mov	r3, r8
 8004c82:	eb1a 0303 	adds.w	r3, sl, r3
 8004c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	18db      	adds	r3, r3, r3
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
 8004cae:	4613      	mov	r3, r2
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cbe:	f7fb ffeb 	bl	8000c98 <__aeabi_uldivmod>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004cca:	fba3 2301 	umull	r2, r3, r3, r1
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2264      	movs	r2, #100	; 0x64
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	1acb      	subs	r3, r1, r3
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cec:	441c      	add	r4, r3
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6339      	str	r1, [r7, #48]	; 0x30
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d64:	460b      	mov	r3, r1
 8004d66:	18db      	adds	r3, r3, r3
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d7a:	f7fb ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004d84:	fba3 1302 	umull	r1, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	2164      	movs	r1, #100	; 0x64
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	3332      	adds	r3, #50	; 0x32
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	f003 0207 	and.w	r2, r3, #7
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4422      	add	r2, r4
 8004daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dac:	e105      	b.n	8004fba <UART_SetConfig+0x4d6>
 8004dae:	bf00      	nop
 8004db0:	40011000 	.word	0x40011000
 8004db4:	40011400 	.word	0x40011400
 8004db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dce:	4642      	mov	r2, r8
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	1891      	adds	r1, r2, r2
 8004dd4:	6239      	str	r1, [r7, #32]
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dde:	4641      	mov	r1, r8
 8004de0:	1854      	adds	r4, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb43 0501 	adc.w	r5, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	00eb      	lsls	r3, r5, #3
 8004df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df6:	00e2      	lsls	r2, r4, #3
 8004df8:	4614      	mov	r4, r2
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	18e3      	adds	r3, r4, r3
 8004e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e04:	464b      	mov	r3, r9
 8004e06:	eb45 0303 	adc.w	r3, r5, r3
 8004e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	008b      	lsls	r3, r1, #2
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e34:	4621      	mov	r1, r4
 8004e36:	008a      	lsls	r2, r1, #2
 8004e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e3c:	f7fb ff2c 	bl	8000c98 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4b60      	ldr	r3, [pc, #384]	; (8004fc8 <UART_SetConfig+0x4e4>)
 8004e46:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	011c      	lsls	r4, r3, #4
 8004e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	61b9      	str	r1, [r7, #24]
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e70:	4641      	mov	r1, r8
 8004e72:	1851      	adds	r1, r2, r1
 8004e74:	6139      	str	r1, [r7, #16]
 8004e76:	4649      	mov	r1, r9
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e88:	4659      	mov	r1, fp
 8004e8a:	00cb      	lsls	r3, r1, #3
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e92:	4651      	mov	r1, sl
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec8:	4649      	mov	r1, r9
 8004eca:	008b      	lsls	r3, r1, #2
 8004ecc:	4641      	mov	r1, r8
 8004ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	008a      	lsls	r2, r1, #2
 8004ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eda:	f7fb fedd 	bl	8000c98 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <UART_SetConfig+0x4e4>)
 8004ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2164      	movs	r1, #100	; 0x64
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	3332      	adds	r3, #50	; 0x32
 8004ef6:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <UART_SetConfig+0x4e4>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f02:	441c      	add	r4, r3
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f0c:	677a      	str	r2, [r7, #116]	; 0x74
 8004f0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f12:	4642      	mov	r2, r8
 8004f14:	464b      	mov	r3, r9
 8004f16:	1891      	adds	r1, r2, r2
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f22:	4641      	mov	r1, r8
 8004f24:	1851      	adds	r1, r2, r1
 8004f26:	6039      	str	r1, [r7, #0]
 8004f28:	4649      	mov	r1, r9
 8004f2a:	414b      	adcs	r3, r1
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	00cb      	lsls	r3, r1, #3
 8004f3e:	4651      	mov	r1, sl
 8004f40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f44:	4651      	mov	r1, sl
 8004f46:	00ca      	lsls	r2, r1, #3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4642      	mov	r2, r8
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f54:	464b      	mov	r3, r9
 8004f56:	460a      	mov	r2, r1
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	663b      	str	r3, [r7, #96]	; 0x60
 8004f68:	667a      	str	r2, [r7, #100]	; 0x64
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f76:	4649      	mov	r1, r9
 8004f78:	008b      	lsls	r3, r1, #2
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f80:	4641      	mov	r1, r8
 8004f82:	008a      	lsls	r2, r1, #2
 8004f84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f88:	f7fb fe86 	bl	8000c98 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <UART_SetConfig+0x4e4>)
 8004f92:	fba3 1302 	umull	r1, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2164      	movs	r1, #100	; 0x64
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	3332      	adds	r3, #50	; 0x32
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <UART_SetConfig+0x4e4>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4422      	add	r2, r4
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	51eb851f 	.word	0x51eb851f

08004fcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004fd0:	4904      	ldr	r1, [pc, #16]	; (8004fe4 <MX_FATFS_Init+0x18>)
 8004fd2:	4805      	ldr	r0, [pc, #20]	; (8004fe8 <MX_FATFS_Init+0x1c>)
 8004fd4:	f003 f9a2 	bl	800831c <FATFS_LinkDriver>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <MX_FATFS_Init+0x20>)
 8004fde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20002408 	.word	0x20002408
 8004fe8:	20000010 	.word	0x20000010
 8004fec:	20002404 	.word	0x20002404

08004ff0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ff4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fc f9af 	bl	8001370 <SD_disk_initialize>
 8005012:	4603      	mov	r3, r0
 8005014:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc fa86 	bl	800153c <SD_disk_status>
 8005030:	4603      	mov	r3, r0
 8005032:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800504c:	7bf8      	ldrb	r0, [r7, #15]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	f7fc fa88 	bl	8001568 <SD_disk_read>
 8005058:	4603      	mov	r3, r0
 800505a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005074:	7bf8      	ldrb	r0, [r7, #15]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	f7fc fade 	bl	800163c <SD_disk_write>
 8005080:	4603      	mov	r3, r0
 8005082:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	603a      	str	r2, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
 8005098:	460b      	mov	r3, r1
 800509a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	79b9      	ldrb	r1, [r7, #6]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fb4e 	bl	8001744 <SD_disk_ioctl>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <disk_status+0x30>)
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	79fa      	ldrb	r2, [r7, #7]
 80050cc:	4905      	ldr	r1, [pc, #20]	; (80050e4 <disk_status+0x30>)
 80050ce:	440a      	add	r2, r1
 80050d0:	7a12      	ldrb	r2, [r2, #8]
 80050d2:	4610      	mov	r0, r2
 80050d4:	4798      	blx	r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20002634 	.word	0x20002634

080050e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <disk_initialize+0x48>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d111      	bne.n	8005124 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <disk_initialize+0x48>)
 8005104:	2101      	movs	r1, #1
 8005106:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <disk_initialize+0x48>)
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	79fa      	ldrb	r2, [r7, #7]
 8005116:	4906      	ldr	r1, [pc, #24]	; (8005130 <disk_initialize+0x48>)
 8005118:	440a      	add	r2, r1
 800511a:	7a12      	ldrb	r2, [r2, #8]
 800511c:	4610      	mov	r0, r2
 800511e:	4798      	blx	r3
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20002634 	.word	0x20002634

08005134 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <disk_read+0x3c>)
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	689c      	ldr	r4, [r3, #8]
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	4a07      	ldr	r2, [pc, #28]	; (8005170 <disk_read+0x3c>)
 8005154:	4413      	add	r3, r2
 8005156:	7a18      	ldrb	r0, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	47a0      	blx	r4
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]
  return res;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	20002634 	.word	0x20002634

08005174 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <disk_write+0x3c>)
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68dc      	ldr	r4, [r3, #12]
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <disk_write+0x3c>)
 8005194:	4413      	add	r3, r2
 8005196:	7a18      	ldrb	r0, [r3, #8]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	47a0      	blx	r4
 80051a0:	4603      	mov	r3, r0
 80051a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20002634 	.word	0x20002634

080051b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	603a      	str	r2, [r7, #0]
 80051be:	71fb      	strb	r3, [r7, #7]
 80051c0:	460b      	mov	r3, r1
 80051c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <disk_ioctl+0x38>)
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	79fa      	ldrb	r2, [r7, #7]
 80051d2:	4906      	ldr	r1, [pc, #24]	; (80051ec <disk_ioctl+0x38>)
 80051d4:	440a      	add	r2, r1
 80051d6:	7a10      	ldrb	r0, [r2, #8]
 80051d8:	79b9      	ldrb	r1, [r7, #6]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	4798      	blx	r3
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
  return res;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20002634 	.word	0x20002634

080051f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3301      	adds	r3, #1
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005200:	89fb      	ldrh	r3, [r7, #14]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	b21a      	sxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	b21b      	sxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b21b      	sxth	r3, r3
 8005210:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005212:	89fb      	ldrh	r3, [r7, #14]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3303      	adds	r3, #3
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	3202      	adds	r2, #2
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	3201      	adds	r2, #1
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
	return rv;
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	1c53      	adds	r3, r2, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	6179      	str	r1, [r7, #20]
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3b01      	subs	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f1      	bne.n	800530e <mem_cpy+0x1a>
	}
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005336:	b480      	push	{r7}
 8005338:	b087      	sub	sp, #28
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	617a      	str	r2, [r7, #20]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3b01      	subs	r3, #1
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f3      	bne.n	8005346 <mem_set+0x10>
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	61ba      	str	r2, [r7, #24]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	1acb      	subs	r3, r1, r3
 8005398:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3b01      	subs	r3, #1
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <mem_cmp+0x40>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0eb      	beq.n	8005384 <mem_cmp+0x18>

	return r;
 80053ac:	697b      	ldr	r3, [r7, #20]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3724      	adds	r7, #36	; 0x24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053c4:	e002      	b.n	80053cc <chk_chr+0x12>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3301      	adds	r3, #1
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <chk_chr+0x26>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d1f2      	bne.n	80053c6 <chk_chr+0xc>
	return *str;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	781b      	ldrb	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e029      	b.n	8005458 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <chk_lock+0xb4>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <chk_lock+0xb4>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	4413      	add	r3, r2
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d116      	bne.n	8005452 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005424:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <chk_lock+0xb4>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005434:	429a      	cmp	r2, r3
 8005436:	d10c      	bne.n	8005452 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <chk_lock+0xb4>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	4413      	add	r3, r2
 8005440:	3308      	adds	r3, #8
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005448:	429a      	cmp	r2, r3
 800544a:	d102      	bne.n	8005452 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800544c:	e007      	b.n	800545e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d9d2      	bls.n	8005404 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d109      	bne.n	8005478 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <chk_lock+0x80>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d101      	bne.n	8005474 <chk_lock+0x84>
 8005470:	2300      	movs	r3, #0
 8005472:	e010      	b.n	8005496 <chk_lock+0xa6>
 8005474:	2312      	movs	r3, #18
 8005476:	e00e      	b.n	8005496 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d108      	bne.n	8005490 <chk_lock+0xa0>
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <chk_lock+0xb4>)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	4413      	add	r3, r2
 8005486:	330c      	adds	r3, #12
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	d101      	bne.n	8005494 <chk_lock+0xa4>
 8005490:	2310      	movs	r3, #16
 8005492:	e000      	b.n	8005496 <chk_lock+0xa6>
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20002414 	.word	0x20002414

080054a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e002      	b.n	80054ba <enq_lock+0x12>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d806      	bhi.n	80054ce <enq_lock+0x26>
 80054c0:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <enq_lock+0x40>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	4413      	add	r3, r2
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f2      	bne.n	80054b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20002414 	.word	0x20002414

080054ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e01f      	b.n	800553c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80054fc:	4a41      	ldr	r2, [pc, #260]	; (8005604 <inc_lock+0x118>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	4413      	add	r3, r2
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d113      	bne.n	8005536 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800550e:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <inc_lock+0x118>)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4413      	add	r3, r2
 8005516:	3304      	adds	r3, #4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800551e:	429a      	cmp	r2, r3
 8005520:	d109      	bne.n	8005536 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005522:	4a38      	ldr	r2, [pc, #224]	; (8005604 <inc_lock+0x118>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4413      	add	r3, r2
 800552a:	3308      	adds	r3, #8
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005532:	429a      	cmp	r2, r3
 8005534:	d006      	beq.n	8005544 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d9dc      	bls.n	80054fc <inc_lock+0x10>
 8005542:	e000      	b.n	8005546 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005544:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d132      	bne.n	80055b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e002      	b.n	8005558 <inc_lock+0x6c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d806      	bhi.n	800556c <inc_lock+0x80>
 800555e:	4a29      	ldr	r2, [pc, #164]	; (8005604 <inc_lock+0x118>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f2      	bne.n	8005552 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d101      	bne.n	8005576 <inc_lock+0x8a>
 8005572:	2300      	movs	r3, #0
 8005574:	e040      	b.n	80055f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4922      	ldr	r1, [pc, #136]	; (8005604 <inc_lock+0x118>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	440b      	add	r3, r1
 8005582:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	491e      	ldr	r1, [pc, #120]	; (8005604 <inc_lock+0x118>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	440b      	add	r3, r1
 8005590:	3304      	adds	r3, #4
 8005592:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	491a      	ldr	r1, [pc, #104]	; (8005604 <inc_lock+0x118>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	440b      	add	r3, r1
 80055a0:	3308      	adds	r3, #8
 80055a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <inc_lock+0x118>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4413      	add	r3, r2
 80055ac:	330c      	adds	r3, #12
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <inc_lock+0xe0>
 80055b8:	4a12      	ldr	r2, [pc, #72]	; (8005604 <inc_lock+0x118>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	4413      	add	r3, r2
 80055c0:	330c      	adds	r3, #12
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <inc_lock+0xe0>
 80055c8:	2300      	movs	r3, #0
 80055ca:	e015      	b.n	80055f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <inc_lock+0xf8>
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <inc_lock+0x118>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	4413      	add	r3, r2
 80055da:	330c      	adds	r3, #12
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	3301      	adds	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	e001      	b.n	80055e8 <inc_lock+0xfc>
 80055e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e8:	4906      	ldr	r1, [pc, #24]	; (8005604 <inc_lock+0x118>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	440b      	add	r3, r1
 80055f0:	330c      	adds	r3, #12
 80055f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	20002414 	.word	0x20002414

08005608 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d825      	bhi.n	8005668 <dec_lock+0x60>
		n = Files[i].ctr;
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <dec_lock+0x74>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4413      	add	r3, r2
 8005624:	330c      	adds	r3, #12
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800562a:	89fb      	ldrh	r3, [r7, #14]
 800562c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005630:	d101      	bne.n	8005636 <dec_lock+0x2e>
 8005632:	2300      	movs	r3, #0
 8005634:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <dec_lock+0x3a>
 800563c:	89fb      	ldrh	r3, [r7, #14]
 800563e:	3b01      	subs	r3, #1
 8005640:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005642:	4a0e      	ldr	r2, [pc, #56]	; (800567c <dec_lock+0x74>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4413      	add	r3, r2
 800564a:	330c      	adds	r3, #12
 800564c:	89fa      	ldrh	r2, [r7, #14]
 800564e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <dec_lock+0x5a>
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <dec_lock+0x74>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	737b      	strb	r3, [r7, #13]
 8005666:	e001      	b.n	800566c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005668:	2302      	movs	r3, #2
 800566a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800566c:	7b7b      	ldrb	r3, [r7, #13]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20002414 	.word	0x20002414

08005680 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e010      	b.n	80056b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800568e:	4a0d      	ldr	r2, [pc, #52]	; (80056c4 <clear_lock+0x44>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	4413      	add	r3, r2
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d105      	bne.n	80056aa <clear_lock+0x2a>
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <clear_lock+0x44>)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	4413      	add	r3, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d9eb      	bls.n	800568e <clear_lock+0xe>
	}
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20002414 	.word	0x20002414

080056c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	78db      	ldrb	r3, [r3, #3]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d034      	beq.n	8005746 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7858      	ldrb	r0, [r3, #1]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056ec:	2301      	movs	r3, #1
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f7ff fd40 	bl	8005174 <disk_write>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <sync_window+0x38>
			res = FR_DISK_ERR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	e022      	b.n	8005746 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	1ad2      	subs	r2, r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	429a      	cmp	r2, r3
 8005714:	d217      	bcs.n	8005746 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	789b      	ldrb	r3, [r3, #2]
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e010      	b.n	8005740 <sync_window+0x78>
					wsect += fs->fsize;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4413      	add	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7858      	ldrb	r0, [r3, #1]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005732:	2301      	movs	r3, #1
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	f7ff fd1d 	bl	8005174 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3b01      	subs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d8eb      	bhi.n	800571e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d01b      	beq.n	80057a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ffad 	bl	80056c8 <sync_window>
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7858      	ldrb	r0, [r3, #1]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005782:	2301      	movs	r3, #1
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	f7ff fcd5 	bl	8005134 <disk_read>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ff87 	bl	80056c8 <sync_window>
 80057ba:	4603      	mov	r3, r0
 80057bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d159      	bne.n	8005878 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d149      	bne.n	8005860 <sync_fs+0xb4>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d145      	bne.n	8005860 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	899b      	ldrh	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	2100      	movs	r1, #0
 80057e2:	f7ff fda8 	bl	8005336 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3338      	adds	r3, #56	; 0x38
 80057ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fd37 	bl	8005266 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3338      	adds	r3, #56	; 0x38
 80057fc:	4921      	ldr	r1, [pc, #132]	; (8005884 <sync_fs+0xd8>)
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fd4c 	bl	800529c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3338      	adds	r3, #56	; 0x38
 8005808:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800580c:	491e      	ldr	r1, [pc, #120]	; (8005888 <sync_fs+0xdc>)
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fd44 	bl	800529c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3338      	adds	r3, #56	; 0x38
 8005818:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7ff fd3a 	bl	800529c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3338      	adds	r3, #56	; 0x38
 800582c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7ff fd30 	bl	800529c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7858      	ldrb	r0, [r3, #1]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005854:	2301      	movs	r3, #1
 8005856:	f7ff fc8d 	bl	8005174 <disk_write>
			fs->fsi_flag = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fca3 	bl	80051b4 <disk_ioctl>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <sync_fs+0xcc>
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	41615252 	.word	0x41615252
 8005888:	61417272 	.word	0x61417272

0800588c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	3b02      	subs	r3, #2
 800589a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	3b02      	subs	r3, #2
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d301      	bcc.n	80058ac <clust2sect+0x20>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e008      	b.n	80058be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	895b      	ldrh	r3, [r3, #10]
 80058b0:	461a      	mov	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	fb03 f202 	mul.w	r2, r3, r2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4413      	add	r3, r2
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d904      	bls.n	80058ea <get_fat+0x20>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e0bb      	b.n	8005a68 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f000 8083 	beq.w	8005a06 <get_fat+0x13c>
 8005900:	2b03      	cmp	r3, #3
 8005902:	f300 80a7 	bgt.w	8005a54 <get_fat+0x18a>
 8005906:	2b01      	cmp	r3, #1
 8005908:	d002      	beq.n	8005910 <get_fat+0x46>
 800590a:	2b02      	cmp	r3, #2
 800590c:	d056      	beq.n	80059bc <get_fat+0xf2>
 800590e:	e0a1      	b.n	8005a54 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	899b      	ldrh	r3, [r3, #12]
 8005926:	4619      	mov	r1, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	fbb3 f3f1 	udiv	r3, r3, r1
 800592e:	4413      	add	r3, r2
 8005930:	4619      	mov	r1, r3
 8005932:	6938      	ldr	r0, [r7, #16]
 8005934:	f7ff ff0c 	bl	8005750 <move_window>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 808d 	bne.w	8005a5a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	60fa      	str	r2, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	8992      	ldrh	r2, [r2, #12]
 800594a:	fbb3 f1f2 	udiv	r1, r3, r2
 800594e:	fb01 f202 	mul.w	r2, r1, r2
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800595c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	899b      	ldrh	r3, [r3, #12]
 8005966:	4619      	mov	r1, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	fbb3 f3f1 	udiv	r3, r3, r1
 800596e:	4413      	add	r3, r2
 8005970:	4619      	mov	r1, r3
 8005972:	6938      	ldr	r0, [r7, #16]
 8005974:	f7ff feec 	bl	8005750 <move_window>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d16f      	bne.n	8005a5e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	899b      	ldrh	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	fbb3 f1f2 	udiv	r1, r3, r2
 800598a:	fb01 f202 	mul.w	r2, r1, r2
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4413      	add	r3, r2
 8005994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <get_fat+0xe8>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	e002      	b.n	80059b8 <get_fat+0xee>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b8:	617b      	str	r3, [r7, #20]
			break;
 80059ba:	e055      	b.n	8005a68 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	899b      	ldrh	r3, [r3, #12]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4619      	mov	r1, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80059d0:	4413      	add	r3, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	6938      	ldr	r0, [r7, #16]
 80059d6:	f7ff febb 	bl	8005750 <move_window>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d140      	bne.n	8005a62 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	8992      	ldrh	r2, [r2, #12]
 80059ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80059f2:	fb00 f202 	mul.w	r2, r0, r2
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	440b      	add	r3, r1
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fbf8 	bl	80051f0 <ld_word>
 8005a00:	4603      	mov	r3, r0
 8005a02:	617b      	str	r3, [r7, #20]
			break;
 8005a04:	e030      	b.n	8005a68 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	899b      	ldrh	r3, [r3, #12]
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4619      	mov	r1, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6938      	ldr	r0, [r7, #16]
 8005a20:	f7ff fe96 	bl	8005750 <move_window>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11d      	bne.n	8005a66 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	8992      	ldrh	r2, [r2, #12]
 8005a38:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a3c:	fb00 f202 	mul.w	r2, r0, r2
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	440b      	add	r3, r1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fbeb 	bl	8005220 <ld_dword>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a50:	617b      	str	r3, [r7, #20]
			break;
 8005a52:	e009      	b.n	8005a68 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e006      	b.n	8005a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a66:	bf00      	nop
		}
	}

	return val;
 8005a68:	697b      	ldr	r3, [r7, #20]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a72:	b590      	push	{r4, r7, lr}
 8005a74:	b089      	sub	sp, #36	; 0x24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f240 8102 	bls.w	8005c8e <put_fat+0x21c>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	f080 80fc 	bcs.w	8005c8e <put_fat+0x21c>
		switch (fs->fs_type) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	f000 80b6 	beq.w	8005c0c <put_fat+0x19a>
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	f300 80fd 	bgt.w	8005ca0 <put_fat+0x22e>
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d003      	beq.n	8005ab2 <put_fat+0x40>
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	f000 8083 	beq.w	8005bb6 <put_fat+0x144>
 8005ab0:	e0f6      	b.n	8005ca0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4413      	add	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	899b      	ldrh	r3, [r3, #12]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff fe3b 	bl	8005750 <move_window>
 8005ada:	4603      	mov	r3, r0
 8005adc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ade:	7ffb      	ldrb	r3, [r7, #31]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 80d6 	bne.w	8005c92 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	61ba      	str	r2, [r7, #24]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	8992      	ldrh	r2, [r2, #12]
 8005af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005afa:	fb00 f202 	mul.w	r2, r0, r2
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	440b      	add	r3, r1
 8005b02:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00d      	beq.n	8005b2a <put_fat+0xb8>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	b25a      	sxtb	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	b25b      	sxtb	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e001      	b.n	8005b2e <put_fat+0xbc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	899b      	ldrh	r3, [r3, #12]
 8005b40:	4619      	mov	r1, r3
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b48:	4413      	add	r3, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fdff 	bl	8005750 <move_window>
 8005b52:	4603      	mov	r3, r0
 8005b54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b56:	7ffb      	ldrb	r3, [r7, #31]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 809c 	bne.w	8005c96 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	899b      	ldrh	r3, [r3, #12]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b70:	fb00 f202 	mul.w	r2, r0, r2
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	440b      	add	r3, r1
 8005b78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <put_fat+0x11a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e00e      	b.n	8005baa <put_fat+0x138>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f023 030f 	bic.w	r3, r3, #15
 8005b96:	b25a      	sxtb	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	70da      	strb	r2, [r3, #3]
			break;
 8005bb4:	e074      	b.n	8005ca0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	899b      	ldrh	r3, [r3, #12]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bca:	4413      	add	r3, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fdbe 	bl	8005750 <move_window>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bd8:	7ffb      	ldrb	r3, [r7, #31]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d15d      	bne.n	8005c9a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	8992      	ldrh	r2, [r2, #12]
 8005bec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bf0:	fb00 f202 	mul.w	r2, r0, r2
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fb31 	bl	8005266 <st_word>
			fs->wflag = 1;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	70da      	strb	r2, [r3, #3]
			break;
 8005c0a:	e049      	b.n	8005ca0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	899b      	ldrh	r3, [r3, #12]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c20:	4413      	add	r3, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fd93 	bl	8005750 <move_window>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d134      	bne.n	8005c9e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	8992      	ldrh	r2, [r2, #12]
 8005c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c4c:	fb00 f202 	mul.w	r2, r0, r2
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	440b      	add	r3, r1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fae3 	bl	8005220 <ld_dword>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c60:	4323      	orrs	r3, r4
 8005c62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	8992      	ldrh	r2, [r2, #12]
 8005c72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c76:	fb00 f202 	mul.w	r2, r0, r2
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fb0b 	bl	800529c <st_dword>
			fs->wflag = 1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	70da      	strb	r2, [r3, #3]
			break;
 8005c8c:	e008      	b.n	8005ca0 <put_fat+0x22e>
		}
	}
 8005c8e:	bf00      	nop
 8005c90:	e006      	b.n	8005ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005c92:	bf00      	nop
 8005c94:	e004      	b.n	8005ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005c9e:	bf00      	nop
	return res;
 8005ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}

08005caa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d904      	bls.n	8005cd0 <remove_chain+0x26>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d301      	bcc.n	8005cd4 <remove_chain+0x2a>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e04b      	b.n	8005d6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	69b8      	ldr	r0, [r7, #24]
 8005ce2:	f7ff fec6 	bl	8005a72 <put_fat>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <remove_chain+0x4a>
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	e03b      	b.n	8005d6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fde7 	bl	80058ca <get_fat>
 8005cfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d031      	beq.n	8005d68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <remove_chain+0x64>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e02e      	b.n	8005d6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d101      	bne.n	8005d1a <remove_chain+0x70>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e028      	b.n	8005d6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	69b8      	ldr	r0, [r7, #24]
 8005d20:	f7ff fea7 	bl	8005a72 <put_fat>
 8005d24:	4603      	mov	r3, r0
 8005d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <remove_chain+0x88>
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	e01c      	b.n	8005d6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	3b02      	subs	r3, #2
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d20b      	bcs.n	8005d58 <remove_chain+0xae>
			fs->free_clst++;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d3c6      	bcc.n	8005cf4 <remove_chain+0x4a>
 8005d66:	e000      	b.n	8005d6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <create_chain+0x2c>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d31b      	bcc.n	8005dd8 <create_chain+0x64>
 8005da0:	2301      	movs	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e018      	b.n	8005dd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fd8e 	bl	80058ca <get_fat>
 8005dae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d801      	bhi.n	8005dba <create_chain+0x46>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e070      	b.n	8005e9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d101      	bne.n	8005dc6 <create_chain+0x52>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	e06a      	b.n	8005e9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d201      	bcs.n	8005dd4 <create_chain+0x60>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	e063      	b.n	8005e9c <create_chain+0x128>
		scl = clst;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d307      	bcc.n	8005dfc <create_chain+0x88>
				ncl = 2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <create_chain+0x88>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e04f      	b.n	8005e9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fd63 	bl	80058ca <get_fat>
 8005e04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d003      	beq.n	8005e1a <create_chain+0xa6>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d101      	bne.n	8005e1e <create_chain+0xaa>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	e03e      	b.n	8005e9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d1da      	bne.n	8005ddc <create_chain+0x68>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e038      	b.n	8005e9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	6938      	ldr	r0, [r7, #16]
 8005e34:	f7ff fe1d 	bl	8005a72 <put_fat>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <create_chain+0xe2>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6938      	ldr	r0, [r7, #16]
 8005e4e:	f7ff fe10 	bl	8005a72 <put_fat>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <create_chain+0x116>
		fs->last_clst = ncl;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	3b02      	subs	r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d804      	bhi.n	8005e7a <create_chain+0x106>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	791b      	ldrb	r3, [r3, #4]
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	711a      	strb	r2, [r3, #4]
 8005e88:	e007      	b.n	8005e9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <create_chain+0x122>
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	e000      	b.n	8005e98 <create_chain+0x124>
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	3304      	adds	r3, #4
 8005eba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	899b      	ldrh	r3, [r3, #12]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	8952      	ldrh	r2, [r2, #10]
 8005ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	613a      	str	r2, [r7, #16]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <clmt_clust+0x42>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e010      	b.n	8005f08 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d307      	bcc.n	8005efe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005efc:	e7e9      	b.n	8005ed2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005efe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2a:	d204      	bcs.n	8005f36 <dir_sdi+0x22>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e071      	b.n	800601e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <dir_sdi+0x46>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d902      	bls.n	8005f5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10c      	bne.n	8005f7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	8912      	ldrh	r2, [r2, #8]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d301      	bcc.n	8005f70 <dir_sdi+0x5c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e056      	b.n	800601e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	61da      	str	r2, [r3, #28]
 8005f78:	e02d      	b.n	8005fd6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	895b      	ldrh	r3, [r3, #10]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	899b      	ldrh	r3, [r3, #12]
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f8a:	e019      	b.n	8005fc0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fc9a 	bl	80058ca <get_fat>
 8005f96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d101      	bne.n	8005fa4 <dir_sdi+0x90>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e03c      	b.n	800601e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d904      	bls.n	8005fb4 <dir_sdi+0xa0>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d301      	bcc.n	8005fb8 <dir_sdi+0xa4>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e032      	b.n	800601e <dir_sdi+0x10a>
			ofs -= csz;
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d2e1      	bcs.n	8005f8c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f7ff fc5e 	bl	800588c <clust2sect>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <dir_sdi+0xd4>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e01a      	b.n	800601e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	899b      	ldrh	r3, [r3, #12]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	461a      	mov	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006010:	fb00 f202 	mul.w	r2, r0, r2
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	18ca      	adds	r2, r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	3320      	adds	r3, #32
 800603c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <dir_next+0x28>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800604c:	d301      	bcc.n	8006052 <dir_next+0x2c>
 800604e:	2304      	movs	r3, #4
 8006050:	e0bb      	b.n	80061ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	899b      	ldrh	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	fbb3 f1f2 	udiv	r1, r3, r2
 800605e:	fb01 f202 	mul.w	r2, r1, r2
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 809d 	bne.w	80061a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	8912      	ldrh	r2, [r2, #8]
 8006084:	4293      	cmp	r3, r2
 8006086:	f0c0 808d 	bcc.w	80061a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	61da      	str	r2, [r3, #28]
 8006090:	2304      	movs	r3, #4
 8006092:	e09a      	b.n	80061ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	899b      	ldrh	r3, [r3, #12]
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	8952      	ldrh	r2, [r2, #10]
 80060a4:	3a01      	subs	r2, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d17b      	bne.n	80061a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7ff fc08 	bl	80058ca <get_fat>
 80060ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d801      	bhi.n	80060c6 <dir_next+0xa0>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e081      	b.n	80061ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d101      	bne.n	80060d2 <dir_next+0xac>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e07b      	b.n	80061ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d359      	bcc.n	8006190 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	2304      	movs	r3, #4
 80060ea:	e06e      	b.n	80061ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7ff fe3d 	bl	8005d74 <create_chain>
 80060fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <dir_next+0xe0>
 8006102:	2307      	movs	r3, #7
 8006104:	e061      	b.n	80061ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <dir_next+0xea>
 800610c:	2302      	movs	r3, #2
 800610e:	e05c      	b.n	80061ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d101      	bne.n	800611c <dir_next+0xf6>
 8006118:	2301      	movs	r3, #1
 800611a:	e056      	b.n	80061ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fad3 	bl	80056c8 <sync_window>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <dir_next+0x106>
 8006128:	2301      	movs	r3, #1
 800612a:	e04e      	b.n	80061ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	899b      	ldrh	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	2100      	movs	r1, #0
 800613a:	f7ff f8fc 	bl	8005336 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fba1 	bl	800588c <clust2sect>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	635a      	str	r2, [r3, #52]	; 0x34
 8006150:	e012      	b.n	8006178 <dir_next+0x152>
						fs->wflag = 1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff fab5 	bl	80056c8 <sync_window>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <dir_next+0x142>
 8006164:	2301      	movs	r3, #1
 8006166:	e030      	b.n	80061ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	635a      	str	r2, [r3, #52]	; 0x34
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	461a      	mov	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4293      	cmp	r3, r2
 8006182:	d3e6      	bcc.n	8006152 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fb77 	bl	800588c <clust2sect>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	899b      	ldrh	r3, [r3, #12]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80061bc:	fb00 f202 	mul.w	r2, r0, r2
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	18ca      	adds	r2, r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061e2:	2100      	movs	r1, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fe95 	bl	8005f14 <dir_sdi>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d12b      	bne.n	800624c <dir_alloc+0x7a>
		n = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff faa6 	bl	8005750 <move_window>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11d      	bne.n	800624a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2be5      	cmp	r3, #229	; 0xe5
 8006216:	d004      	beq.n	8006222 <dir_alloc+0x50>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d102      	bne.n	8006236 <dir_alloc+0x64>
 8006230:	e00c      	b.n	800624c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006236:	2101      	movs	r1, #1
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fef4 	bl	8006026 <dir_next>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0d7      	beq.n	80061f8 <dir_alloc+0x26>
 8006248:	e000      	b.n	800624c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800624a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d101      	bne.n	8006256 <dir_alloc+0x84>
 8006252:	2307      	movs	r3, #7
 8006254:	75fb      	strb	r3, [r7, #23]
	return res;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	331a      	adds	r3, #26
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe ffbe 	bl	80051f0 <ld_word>
 8006274:	4603      	mov	r3, r0
 8006276:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d109      	bne.n	8006294 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ffb3 	bl	80051f0 <ld_word>
 800628a:	4603      	mov	r3, r0
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	331a      	adds	r3, #26
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	b292      	uxth	r2, r2
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe ffd6 	bl	8005266 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d109      	bne.n	80062d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f103 0214 	add.w	r2, r3, #20
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe ffc8 	bl	8005266 <st_word>
	}
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	331a      	adds	r3, #26
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe ff7e 	bl	80051f0 <ld_word>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <cmp_lfn+0x1e>
 80062fa:	2300      	movs	r3, #0
 80062fc:	e059      	b.n	80063b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006314:	2301      	movs	r3, #1
 8006316:	81fb      	strh	r3, [r7, #14]
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	e033      	b.n	8006386 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <cmp_lfn+0xdc>)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	4413      	add	r3, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe ff5f 	bl	80051f0 <ld_word>
 8006332:	4603      	mov	r3, r0
 8006334:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01a      	beq.n	8006372 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2bfe      	cmp	r3, #254	; 0xfe
 8006340:	d812      	bhi.n	8006368 <cmp_lfn+0x88>
 8006342:	89bb      	ldrh	r3, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	f002 f835 	bl	80083b4 <ff_wtoupper>
 800634a:	4603      	mov	r3, r0
 800634c:	461c      	mov	r4, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	617a      	str	r2, [r7, #20]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f002 f829 	bl	80083b4 <ff_wtoupper>
 8006362:	4603      	mov	r3, r0
 8006364:	429c      	cmp	r4, r3
 8006366:	d001      	beq.n	800636c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006368:	2300      	movs	r3, #0
 800636a:	e022      	b.n	80063b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800636c:	89bb      	ldrh	r3, [r7, #12]
 800636e:	81fb      	strh	r3, [r7, #14]
 8006370:	e006      	b.n	8006380 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006372:	89bb      	ldrh	r3, [r7, #12]
 8006374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006378:	4293      	cmp	r3, r2
 800637a:	d001      	beq.n	8006380 <cmp_lfn+0xa0>
 800637c:	2300      	movs	r3, #0
 800637e:	e018      	b.n	80063b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3301      	adds	r3, #1
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d9c8      	bls.n	800631e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <cmp_lfn+0xd0>
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <cmp_lfn+0xd0>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <cmp_lfn+0xd0>
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80063b0:	2301      	movs	r3, #1
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	0800cfe4 	.word	0x0800cfe4

080063c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	460b      	mov	r3, r1
 80063d0:	71fb      	strb	r3, [r7, #7]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	330d      	adds	r3, #13
 80063da:	79ba      	ldrb	r2, [r7, #6]
 80063dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	330b      	adds	r3, #11
 80063e2:	220f      	movs	r2, #15
 80063e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	330c      	adds	r3, #12
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	331a      	adds	r3, #26
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe ff36 	bl	8005266 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	1e5a      	subs	r2, r3, #1
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	82fb      	strh	r3, [r7, #22]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006412:	8afb      	ldrh	r3, [r7, #22]
 8006414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <put_lfn+0x6c>
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800642c:	4a17      	ldr	r2, [pc, #92]	; (800648c <put_lfn+0xcc>)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4413      	add	r3, r2
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4413      	add	r3, r2
 800643a:	8afa      	ldrh	r2, [r7, #22]
 800643c:	4611      	mov	r1, r2
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe ff11 	bl	8005266 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006444:	8afb      	ldrh	r3, [r7, #22]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <put_lfn+0x90>
 800644a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800644e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3301      	adds	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d9da      	bls.n	8006412 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800645c:	8afb      	ldrh	r3, [r7, #22]
 800645e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006462:	4293      	cmp	r3, r2
 8006464:	d006      	beq.n	8006474 <put_lfn+0xb4>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <put_lfn+0xbc>
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	79fa      	ldrb	r2, [r7, #7]
 8006480:	701a      	strb	r2, [r3, #0]
}
 8006482:	bf00      	nop
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	0800cfe4 	.word	0x0800cfe4

08006490 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08c      	sub	sp, #48	; 0x30
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800649e:	220b      	movs	r2, #11
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7fe ff26 	bl	80052f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d92b      	bls.n	8006506 <gen_numname+0x76>
		sr = seq;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80064b2:	e022      	b.n	80064fa <gen_numname+0x6a>
			wc = *lfn++;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80064be:	2300      	movs	r3, #0
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c2:	e017      	b.n	80064f4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	005a      	lsls	r2, r3, #1
 80064c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	4413      	add	r3, r2
 80064d0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80064d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <gen_numname+0x5e>
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80064e8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80064ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	3301      	adds	r3, #1
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d9e4      	bls.n	80064c4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1d8      	bne.n	80064b4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006506:	2307      	movs	r3, #7
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	b2db      	uxtb	r3, r3
 8006514:	3330      	adds	r3, #48	; 0x30
 8006516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800651a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800651e:	2b39      	cmp	r3, #57	; 0x39
 8006520:	d904      	bls.n	800652c <gen_numname+0x9c>
 8006522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006526:	3307      	adds	r3, #7
 8006528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	1e5a      	subs	r2, r3, #1
 8006530:	62ba      	str	r2, [r7, #40]	; 0x28
 8006532:	3330      	adds	r3, #48	; 0x30
 8006534:	443b      	add	r3, r7
 8006536:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800653a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1df      	bne.n	800650a <gen_numname+0x7a>
	ns[i] = '~';
 800654a:	f107 0214 	add.w	r2, r7, #20
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	4413      	add	r3, r2
 8006552:	227e      	movs	r2, #126	; 0x7e
 8006554:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e002      	b.n	8006562 <gen_numname+0xd2>
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	3301      	adds	r3, #1
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
 8006562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	429a      	cmp	r2, r3
 8006568:	d205      	bcs.n	8006576 <gen_numname+0xe6>
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b20      	cmp	r3, #32
 8006574:	d1f2      	bne.n	800655c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	2b07      	cmp	r3, #7
 800657a:	d807      	bhi.n	800658c <gen_numname+0xfc>
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	62ba      	str	r2, [r7, #40]	; 0x28
 8006582:	3330      	adds	r3, #48	; 0x30
 8006584:	443b      	add	r3, r7
 8006586:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800658a:	e000      	b.n	800658e <gen_numname+0xfe>
 800658c:	2120      	movs	r1, #32
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	627a      	str	r2, [r7, #36]	; 0x24
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	460a      	mov	r2, r1
 800659a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d9e9      	bls.n	8006576 <gen_numname+0xe6>
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	3730      	adds	r7, #48	; 0x30
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80065b8:	230b      	movs	r3, #11
 80065ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	0852      	lsrs	r2, r2, #1
 80065c2:	01db      	lsls	r3, r3, #7
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	6079      	str	r1, [r7, #4]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ed      	bne.n	80065bc <sum_sfn+0x10>
	return sum;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b086      	sub	sp, #24
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065fc:	2100      	movs	r1, #0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fc88 	bl	8005f14 <dir_sdi>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <dir_find+0x24>
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	e0a9      	b.n	8006766 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006612:	23ff      	movs	r3, #255	; 0xff
 8006614:	753b      	strb	r3, [r7, #20]
 8006616:	7d3b      	ldrb	r3, [r7, #20]
 8006618:	757b      	strb	r3, [r7, #21]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f04f 32ff 	mov.w	r2, #4294967295
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4619      	mov	r1, r3
 8006628:	6938      	ldr	r0, [r7, #16]
 800662a:	f7ff f891 	bl	8005750 <move_window>
 800662e:	4603      	mov	r3, r0
 8006630:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 8090 	bne.w	800675a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006642:	7dbb      	ldrb	r3, [r7, #22]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <dir_find+0x60>
 8006648:	2304      	movs	r3, #4
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	e08a      	b.n	8006764 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	330b      	adds	r3, #11
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665a:	73fb      	strb	r3, [r7, #15]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006662:	7dbb      	ldrb	r3, [r7, #22]
 8006664:	2be5      	cmp	r3, #229	; 0xe5
 8006666:	d007      	beq.n	8006678 <dir_find+0x8a>
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <dir_find+0x98>
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b0f      	cmp	r3, #15
 8006676:	d006      	beq.n	8006686 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006678:	23ff      	movs	r3, #255	; 0xff
 800667a:	757b      	strb	r3, [r7, #21]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
 8006684:	e05e      	b.n	8006744 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d136      	bne.n	80066fa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d154      	bne.n	8006744 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	7b5b      	ldrb	r3, [r3, #13]
 80066aa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80066ac:	7dbb      	ldrb	r3, [r7, #22]
 80066ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b2:	75bb      	strb	r3, [r7, #22]
 80066b4:	7dbb      	ldrb	r3, [r7, #22]
 80066b6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80066c0:	7dba      	ldrb	r2, [r7, #22]
 80066c2:	7d7b      	ldrb	r3, [r7, #21]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d115      	bne.n	80066f4 <dir_find+0x106>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	330d      	adds	r3, #13
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	7d3a      	ldrb	r2, [r7, #20]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10e      	bne.n	80066f4 <dir_find+0x106>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7ff fdfd 	bl	80062e0 <cmp_lfn>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <dir_find+0x106>
 80066ec:	7d7b      	ldrb	r3, [r7, #21]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e000      	b.n	80066f6 <dir_find+0x108>
 80066f4:	23ff      	movs	r3, #255	; 0xff
 80066f6:	757b      	strb	r3, [r7, #21]
 80066f8:	e024      	b.n	8006744 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066fa:	7d7b      	ldrb	r3, [r7, #21]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <dir_find+0x126>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff ff51 	bl	80065ac <sum_sfn>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	7d3b      	ldrb	r3, [r7, #20]
 8006710:	4293      	cmp	r3, r2
 8006712:	d024      	beq.n	800675e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <dir_find+0x14a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a18      	ldr	r0, [r3, #32]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	220b      	movs	r2, #11
 800672c:	4619      	mov	r1, r3
 800672e:	f7fe fe1d 	bl	800536c <mem_cmp>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d014      	beq.n	8006762 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006738:	23ff      	movs	r3, #255	; 0xff
 800673a:	757b      	strb	r3, [r7, #21]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f04f 32ff 	mov.w	r2, #4294967295
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fc6d 	bl	8006026 <dir_next>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f43f af65 	beq.w	8006622 <dir_find+0x34>
 8006758:	e004      	b.n	8006764 <dir_find+0x176>
		if (res != FR_OK) break;
 800675a:	bf00      	nop
 800675c:	e002      	b.n	8006764 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800675e:	bf00      	nop
 8006760:	e000      	b.n	8006764 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006762:	bf00      	nop

	return res;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08c      	sub	sp, #48	; 0x30
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006784:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <dir_register+0x20>
 800678c:	2306      	movs	r3, #6
 800678e:	e0e0      	b.n	8006952 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	e002      	b.n	800679c <dir_register+0x2c>
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f4      	bne.n	8006796 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	220c      	movs	r2, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fd9b 	bl	80052f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d032      	beq.n	800682e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80067d0:	2301      	movs	r3, #1
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d4:	e016      	b.n	8006804 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	f107 010c 	add.w	r1, r7, #12
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	f7ff fe53 	bl	8006490 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff feff 	bl	80065ee <dir_find>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80067f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	3301      	adds	r3, #1
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	2b63      	cmp	r3, #99	; 0x63
 8006808:	d9e5      	bls.n	80067d6 <dir_register+0x66>
 800680a:	e000      	b.n	800680e <dir_register+0x9e>
			if (res != FR_OK) break;
 800680c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	2b64      	cmp	r3, #100	; 0x64
 8006812:	d101      	bne.n	8006818 <dir_register+0xa8>
 8006814:	2307      	movs	r3, #7
 8006816:	e09c      	b.n	8006952 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800681c:	2b04      	cmp	r3, #4
 800681e:	d002      	beq.n	8006826 <dir_register+0xb6>
 8006820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006824:	e095      	b.n	8006952 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006826:	7dfa      	ldrb	r2, [r7, #23]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <dir_register+0xd8>
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	330c      	adds	r3, #12
 800683c:	4a47      	ldr	r2, [pc, #284]	; (800695c <dir_register+0x1ec>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	3301      	adds	r3, #1
 8006846:	e000      	b.n	800684a <dir_register+0xda>
 8006848:	2301      	movs	r3, #1
 800684a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800684c:	6a39      	ldr	r1, [r7, #32]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fcbf 	bl	80061d2 <dir_alloc>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800685a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685e:	2b00      	cmp	r3, #0
 8006860:	d148      	bne.n	80068f4 <dir_register+0x184>
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	3b01      	subs	r3, #1
 8006866:	623b      	str	r3, [r7, #32]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d042      	beq.n	80068f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	015b      	lsls	r3, r3, #5
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fb4a 	bl	8005f14 <dir_sdi>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d132      	bne.n	80068f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fe8a 	bl	80065ac <sum_sfn>
 8006898:	4603      	mov	r3, r0
 800689a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	4619      	mov	r1, r3
 80068a2:	69f8      	ldr	r0, [r7, #28]
 80068a4:	f7fe ff54 	bl	8005750 <move_window>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80068ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11d      	bne.n	80068f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	6918      	ldr	r0, [r3, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a19      	ldr	r1, [r3, #32]
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	7efb      	ldrb	r3, [r7, #27]
 80068c4:	f7ff fd7c 	bl	80063c0 <put_lfn>
				fs->wflag = 1;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2201      	movs	r2, #1
 80068cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80068ce:	2100      	movs	r1, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fba8 	bl	8006026 <dir_next>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80068dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d107      	bne.n	80068f4 <dir_register+0x184>
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1d5      	bne.n	800689c <dir_register+0x12c>
 80068f0:	e000      	b.n	80068f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80068f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80068f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d128      	bne.n	800694e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	4619      	mov	r1, r3
 8006902:	69f8      	ldr	r0, [r7, #28]
 8006904:	f7fe ff24 	bl	8005750 <move_window>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800690e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11b      	bne.n	800694e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	2220      	movs	r2, #32
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fd09 	bl	8005336 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a18      	ldr	r0, [r3, #32]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	220b      	movs	r2, #11
 800692e:	4619      	mov	r1, r3
 8006930:	f7fe fce0 	bl	80052f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	330c      	adds	r3, #12
 8006940:	f002 0218 	and.w	r2, r2, #24
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2201      	movs	r2, #1
 800694c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800694e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006952:	4618      	mov	r0, r3
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	4ec4ec4f 	.word	0x4ec4ec4f

08006960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	61ba      	str	r2, [r7, #24]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800698e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006990:	2b1f      	cmp	r3, #31
 8006992:	d940      	bls.n	8006a16 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006996:	2b2f      	cmp	r3, #47	; 0x2f
 8006998:	d006      	beq.n	80069a8 <create_name+0x48>
 800699a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800699c:	2b5c      	cmp	r3, #92	; 0x5c
 800699e:	d110      	bne.n	80069c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069a0:	e002      	b.n	80069a8 <create_name+0x48>
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	3301      	adds	r3, #1
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4413      	add	r3, r2
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b2f      	cmp	r3, #47	; 0x2f
 80069b2:	d0f6      	beq.n	80069a2 <create_name+0x42>
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	4413      	add	r3, r2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b5c      	cmp	r3, #92	; 0x5c
 80069be:	d0f0      	beq.n	80069a2 <create_name+0x42>
			break;
 80069c0:	e02a      	b.n	8006a18 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2bfe      	cmp	r3, #254	; 0xfe
 80069c6:	d901      	bls.n	80069cc <create_name+0x6c>
 80069c8:	2306      	movs	r3, #6
 80069ca:	e17d      	b.n	8006cc8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80069cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80069d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 fcb0 	bl	800833c <ff_convert>
 80069dc:	4603      	mov	r3, r0
 80069de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80069e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <create_name+0x8a>
 80069e6:	2306      	movs	r3, #6
 80069e8:	e16e      	b.n	8006cc8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80069ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ec:	2b7f      	cmp	r3, #127	; 0x7f
 80069ee:	d809      	bhi.n	8006a04 <create_name+0xa4>
 80069f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f2:	4619      	mov	r1, r3
 80069f4:	488d      	ldr	r0, [pc, #564]	; (8006c2c <create_name+0x2cc>)
 80069f6:	f7fe fce0 	bl	80053ba <chk_chr>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <create_name+0xa4>
 8006a00:	2306      	movs	r3, #6
 8006a02:	e161      	b.n	8006cc8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	617a      	str	r2, [r7, #20]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a12:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006a14:	e7b4      	b.n	8006980 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006a16:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a24:	2b1f      	cmp	r3, #31
 8006a26:	d801      	bhi.n	8006a2c <create_name+0xcc>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	e000      	b.n	8006a2e <create_name+0xce>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a32:	e011      	b.n	8006a58 <create_name+0xf8>
		w = lfn[di - 1];
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d002      	beq.n	8006a52 <create_name+0xf2>
 8006a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a50:	d106      	bne.n	8006a60 <create_name+0x100>
		di--;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ea      	bne.n	8006a34 <create_name+0xd4>
 8006a5e:	e000      	b.n	8006a62 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006a60:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <create_name+0x118>
 8006a74:	2306      	movs	r3, #6
 8006a76:	e127      	b.n	8006cc8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	220b      	movs	r2, #11
 8006a7e:	2120      	movs	r1, #32
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fc58 	bl	8005336 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e002      	b.n	8006a92 <create_name+0x132>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d0f5      	beq.n	8006a8c <create_name+0x12c>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8006aac:	d0ee      	beq.n	8006a8c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <create_name+0x168>
 8006ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab8:	f043 0303 	orr.w	r3, r3, #3
 8006abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006ac0:	e002      	b.n	8006ac8 <create_name+0x168>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <create_name+0x182>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae0:	d1ef      	bne.n	8006ac2 <create_name+0x162>

	i = b = 0; ni = 8;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ae8:	2300      	movs	r3, #0
 8006aea:	623b      	str	r3, [r7, #32]
 8006aec:	2308      	movs	r3, #8
 8006aee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	61ba      	str	r2, [r7, #24]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8090 	beq.w	8006c28 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d006      	beq.n	8006b1c <create_name+0x1bc>
 8006b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b10:	2b2e      	cmp	r3, #46	; 0x2e
 8006b12:	d10a      	bne.n	8006b2a <create_name+0x1ca>
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d006      	beq.n	8006b2a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b20:	f043 0303 	orr.w	r3, r3, #3
 8006b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b28:	e07d      	b.n	8006c26 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006b2a:	6a3a      	ldr	r2, [r7, #32]
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d203      	bcs.n	8006b3a <create_name+0x1da>
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d123      	bne.n	8006b82 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b0b      	cmp	r3, #11
 8006b3e:	d106      	bne.n	8006b4e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b44:	f043 0303 	orr.w	r3, r3, #3
 8006b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b4c:	e075      	b.n	8006c3a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d005      	beq.n	8006b62 <create_name+0x202>
 8006b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b5a:	f043 0303 	orr.w	r3, r3, #3
 8006b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d866      	bhi.n	8006c38 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	2308      	movs	r3, #8
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	230b      	movs	r3, #11
 8006b74:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006b76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b80:	e051      	b.n	8006c26 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b84:	2b7f      	cmp	r3, #127	; 0x7f
 8006b86:	d914      	bls.n	8006bb2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fbd5 	bl	800833c <ff_convert>
 8006b92:	4603      	mov	r3, r0
 8006b94:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <create_name+0x246>
 8006b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b9e:	3b80      	subs	r3, #128	; 0x80
 8006ba0:	4a23      	ldr	r2, [pc, #140]	; (8006c30 <create_name+0x2d0>)
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006baa:	f043 0302 	orr.w	r3, r3, #2
 8006bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <create_name+0x268>
 8006bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bba:	4619      	mov	r1, r3
 8006bbc:	481d      	ldr	r0, [pc, #116]	; (8006c34 <create_name+0x2d4>)
 8006bbe:	f7fe fbfc 	bl	80053ba <chk_chr>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006bc8:	235f      	movs	r3, #95	; 0x5f
 8006bca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd0:	f043 0303 	orr.w	r3, r3, #3
 8006bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bd8:	e01b      	b.n	8006c12 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d909      	bls.n	8006bf4 <create_name+0x294>
 8006be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be2:	2b5a      	cmp	r3, #90	; 0x5a
 8006be4:	d806      	bhi.n	8006bf4 <create_name+0x294>
					b |= 2;
 8006be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bea:	f043 0302 	orr.w	r3, r3, #2
 8006bee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bf2:	e00e      	b.n	8006c12 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf6:	2b60      	cmp	r3, #96	; 0x60
 8006bf8:	d90b      	bls.n	8006c12 <create_name+0x2b2>
 8006bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfc:	2b7a      	cmp	r3, #122	; 0x7a
 8006bfe:	d808      	bhi.n	8006c12 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006c00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c0e:	3b20      	subs	r3, #32
 8006c10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	623a      	str	r2, [r7, #32]
 8006c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c1a:	b2d1      	uxtb	r1, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	460a      	mov	r2, r1
 8006c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006c26:	e763      	b.n	8006af0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006c28:	bf00      	nop
 8006c2a:	e006      	b.n	8006c3a <create_name+0x2da>
 8006c2c:	0800cf04 	.word	0x0800cf04
 8006c30:	0800cf64 	.word	0x0800cf64
 8006c34:	0800cf10 	.word	0x0800cf10
			if (si > di) break;			/* No extension */
 8006c38:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c40:	2be5      	cmp	r3, #229	; 0xe5
 8006c42:	d103      	bne.n	8006c4c <create_name+0x2ec>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2205      	movs	r2, #5
 8006c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d104      	bne.n	8006c5c <create_name+0x2fc>
 8006c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c60:	f003 030c 	and.w	r3, r3, #12
 8006c64:	2b0c      	cmp	r3, #12
 8006c66:	d005      	beq.n	8006c74 <create_name+0x314>
 8006c68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d105      	bne.n	8006c80 <create_name+0x320>
 8006c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d117      	bne.n	8006cbc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <create_name+0x344>
 8006c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9c:	f043 0310 	orr.w	r3, r3, #16
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d105      	bne.n	8006cbc <create_name+0x35c>
 8006cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb4:	f043 0308 	orr.w	r3, r3, #8
 8006cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006cc6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ce4:	e002      	b.n	8006cec <follow_path+0x1c>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b2f      	cmp	r3, #47	; 0x2f
 8006cf2:	d0f8      	beq.n	8006ce6 <follow_path+0x16>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cfa:	d0f4      	beq.n	8006ce6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b1f      	cmp	r3, #31
 8006d08:	d80a      	bhi.n	8006d20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2280      	movs	r2, #128	; 0x80
 8006d0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d12:	2100      	movs	r1, #0
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff f8fd 	bl	8005f14 <dir_sdi>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
 8006d1e:	e048      	b.n	8006db2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d20:	463b      	mov	r3, r7
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe1b 	bl	8006960 <create_name>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d139      	bne.n	8006da8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fc5a 	bl	80065ee <dir_find>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d12c      	bne.n	8006dac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d127      	bne.n	8006dac <follow_path+0xdc>
 8006d5c:	2305      	movs	r3, #5
 8006d5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d60:	e024      	b.n	8006dac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d121      	bne.n	8006db0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	799b      	ldrb	r3, [r3, #6]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006d78:	2305      	movs	r3, #5
 8006d7a:	75fb      	strb	r3, [r7, #23]
 8006d7c:	e019      	b.n	8006db2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	8992      	ldrh	r2, [r2, #12]
 8006d8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d90:	fb00 f202 	mul.w	r2, r0, r2
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	440b      	add	r3, r1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff fa60 	bl	8006260 <ld_clust>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006da6:	e7bb      	b.n	8006d20 <follow_path+0x50>
			if (res != FR_OK) break;
 8006da8:	bf00      	nop
 8006daa:	e002      	b.n	8006db2 <follow_path+0xe2>
				break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006db0:	bf00      	nop
			}
		}
	}

	return res;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d031      	beq.n	8006e36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e002      	b.n	8006de0 <get_ldnumber+0x24>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b1f      	cmp	r3, #31
 8006de6:	d903      	bls.n	8006df0 <get_ldnumber+0x34>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b3a      	cmp	r3, #58	; 0x3a
 8006dee:	d1f4      	bne.n	8006dda <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b3a      	cmp	r3, #58	; 0x3a
 8006df6:	d11c      	bne.n	8006e32 <get_ldnumber+0x76>
			tp = *path;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	60fa      	str	r2, [r7, #12]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	3b30      	subs	r3, #48	; 0x30
 8006e08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d80e      	bhi.n	8006e2e <get_ldnumber+0x72>
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d10a      	bne.n	8006e2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d107      	bne.n	8006e2e <get_ldnumber+0x72>
					vol = (int)i;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3301      	adds	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	e002      	b.n	8006e38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e36:	693b      	ldr	r3, [r7, #16]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	70da      	strb	r2, [r3, #3]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fe fc76 	bl	8005750 <move_window>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <check_fs+0x2a>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	e038      	b.n	8006ee0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3338      	adds	r3, #56	; 0x38
 8006e72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe f9ba 	bl	80051f0 <ld_word>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <check_fs+0x48>
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e029      	b.n	8006ee0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e92:	2be9      	cmp	r3, #233	; 0xe9
 8006e94:	d009      	beq.n	8006eaa <check_fs+0x66>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e9c:	2beb      	cmp	r3, #235	; 0xeb
 8006e9e:	d11e      	bne.n	8006ede <check_fs+0x9a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ea6:	2b90      	cmp	r3, #144	; 0x90
 8006ea8:	d119      	bne.n	8006ede <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3338      	adds	r3, #56	; 0x38
 8006eae:	3336      	adds	r3, #54	; 0x36
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe f9b5 	bl	8005220 <ld_dword>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <check_fs+0xa4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <check_fs+0x82>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e00c      	b.n	8006ee0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3338      	adds	r3, #56	; 0x38
 8006eca:	3352      	adds	r3, #82	; 0x52
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe f9a7 	bl	8005220 <ld_dword>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4a05      	ldr	r2, [pc, #20]	; (8006eec <check_fs+0xa8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d101      	bne.n	8006ede <check_fs+0x9a>
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006ede:	2302      	movs	r3, #2
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	00544146 	.word	0x00544146
 8006eec:	33544146 	.word	0x33544146

08006ef0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b096      	sub	sp, #88	; 0x58
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff ff59 	bl	8006dbc <get_ldnumber>
 8006f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da01      	bge.n	8006f16 <find_volume+0x26>
 8006f12:	230b      	movs	r3, #11
 8006f14:	e265      	b.n	80073e2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f16:	4a9f      	ldr	r2, [pc, #636]	; (8007194 <find_volume+0x2a4>)
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <find_volume+0x3a>
 8006f26:	230c      	movs	r3, #12
 8006f28:	e25b      	b.n	80073e2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01a      	beq.n	8006f76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe f8b5 	bl	80050b4 <disk_status>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10c      	bne.n	8006f76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <find_volume+0x82>
 8006f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f6e:	230a      	movs	r3, #10
 8006f70:	e237      	b.n	80073e2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006f72:	2300      	movs	r3, #0
 8006f74:	e235      	b.n	80073e2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe f8ad 	bl	80050e8 <disk_initialize>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e21e      	b.n	80073e2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <find_volume+0xca>
 8006faa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e213      	b.n	80073e2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	7858      	ldrb	r0, [r3, #1]
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	f7fe f8f5 	bl	80051b4 <disk_ioctl>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <find_volume+0xe4>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e206      	b.n	80073e2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	899b      	ldrh	r3, [r3, #12]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fdc:	d80d      	bhi.n	8006ffa <find_volume+0x10a>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	899b      	ldrh	r3, [r3, #12]
 8006fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe6:	d308      	bcc.n	8006ffa <find_volume+0x10a>
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	899b      	ldrh	r3, [r3, #12]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	899b      	ldrh	r3, [r3, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <find_volume+0x10e>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e1f1      	b.n	80073e2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007006:	f7ff ff1d 	bl	8006e44 <check_fs>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007014:	2b02      	cmp	r3, #2
 8007016:	d149      	bne.n	80070ac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007018:	2300      	movs	r3, #0
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
 800701c:	e01e      	b.n	800705c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800702c:	4413      	add	r3, r2
 800702e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	3304      	adds	r3, #4
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <find_volume+0x158>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	3308      	adds	r3, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe f8ee 	bl	8005220 <ld_dword>
 8007044:	4602      	mov	r2, r0
 8007046:	e000      	b.n	800704a <find_volume+0x15a>
 8007048:	2200      	movs	r2, #0
 800704a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	3358      	adds	r3, #88	; 0x58
 8007050:	443b      	add	r3, r7
 8007052:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007058:	3301      	adds	r3, #1
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
 800705c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705e:	2b03      	cmp	r3, #3
 8007060:	d9dd      	bls.n	800701e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007062:	2300      	movs	r3, #0
 8007064:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <find_volume+0x182>
 800706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706e:	3b01      	subs	r3, #1
 8007070:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3358      	adds	r3, #88	; 0x58
 8007078:	443b      	add	r3, r7
 800707a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <find_volume+0x1a2>
 8007086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800708a:	f7ff fedb 	bl	8006e44 <check_fs>
 800708e:	4603      	mov	r3, r0
 8007090:	e000      	b.n	8007094 <find_volume+0x1a4>
 8007092:	2303      	movs	r3, #3
 8007094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800709c:	2b01      	cmp	r3, #1
 800709e:	d905      	bls.n	80070ac <find_volume+0x1bc>
 80070a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a2:	3301      	adds	r3, #1
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
 80070a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d9e2      	bls.n	8007072 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d101      	bne.n	80070b8 <find_volume+0x1c8>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e194      	b.n	80073e2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d901      	bls.n	80070c4 <find_volume+0x1d4>
 80070c0:	230d      	movs	r3, #13
 80070c2:	e18e      	b.n	80073e2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	3338      	adds	r3, #56	; 0x38
 80070c8:	330b      	adds	r3, #11
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe f890 	bl	80051f0 <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	899b      	ldrh	r3, [r3, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <find_volume+0x1f0>
 80070dc:	230d      	movs	r3, #13
 80070de:	e180      	b.n	80073e2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	3338      	adds	r3, #56	; 0x38
 80070e4:	3316      	adds	r3, #22
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe f882 	bl	80051f0 <ld_word>
 80070ec:	4603      	mov	r3, r0
 80070ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <find_volume+0x214>
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	3338      	adds	r3, #56	; 0x38
 80070fa:	3324      	adds	r3, #36	; 0x24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f88f 	bl	8005220 <ld_dword>
 8007102:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007108:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	789b      	ldrb	r3, [r3, #2]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d005      	beq.n	8007128 <find_volume+0x238>
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	789b      	ldrb	r3, [r3, #2]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d001      	beq.n	8007128 <find_volume+0x238>
 8007124:	230d      	movs	r3, #13
 8007126:	e15c      	b.n	80073e2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	789b      	ldrb	r3, [r3, #2]
 800712c:	461a      	mov	r2, r3
 800712e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007130:	fb02 f303 	mul.w	r3, r2, r3
 8007134:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713c:	b29a      	uxth	r2, r3
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	895b      	ldrh	r3, [r3, #10]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d008      	beq.n	800715c <find_volume+0x26c>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	895b      	ldrh	r3, [r3, #10]
 800714e:	461a      	mov	r2, r3
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	895b      	ldrh	r3, [r3, #10]
 8007154:	3b01      	subs	r3, #1
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <find_volume+0x270>
 800715c:	230d      	movs	r3, #13
 800715e:	e140      	b.n	80073e2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	3338      	adds	r3, #56	; 0x38
 8007164:	3311      	adds	r3, #17
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe f842 	bl	80051f0 <ld_word>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	891b      	ldrh	r3, [r3, #8]
 8007178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717a:	8992      	ldrh	r2, [r2, #12]
 800717c:	0952      	lsrs	r2, r2, #5
 800717e:	b292      	uxth	r2, r2
 8007180:	fbb3 f1f2 	udiv	r1, r3, r2
 8007184:	fb01 f202 	mul.w	r2, r1, r2
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <find_volume+0x2a8>
 8007190:	230d      	movs	r3, #13
 8007192:	e126      	b.n	80073e2 <find_volume+0x4f2>
 8007194:	2000240c 	.word	0x2000240c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	3338      	adds	r3, #56	; 0x38
 800719c:	3313      	adds	r3, #19
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe f826 	bl	80051f0 <ld_word>
 80071a4:	4603      	mov	r3, r0
 80071a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <find_volume+0x2cc>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	3338      	adds	r3, #56	; 0x38
 80071b2:	3320      	adds	r3, #32
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe f833 	bl	8005220 <ld_dword>
 80071ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	3338      	adds	r3, #56	; 0x38
 80071c0:	330e      	adds	r3, #14
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe f814 	bl	80051f0 <ld_word>
 80071c8:	4603      	mov	r3, r0
 80071ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <find_volume+0x2e6>
 80071d2:	230d      	movs	r3, #13
 80071d4:	e105      	b.n	80073e2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071da:	4413      	add	r3, r2
 80071dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071de:	8911      	ldrh	r1, [r2, #8]
 80071e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e2:	8992      	ldrh	r2, [r2, #12]
 80071e4:	0952      	lsrs	r2, r2, #5
 80071e6:	b292      	uxth	r2, r2
 80071e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80071ec:	b292      	uxth	r2, r2
 80071ee:	4413      	add	r3, r2
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d201      	bcs.n	80071fe <find_volume+0x30e>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0f1      	b.n	80073e2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80071fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007206:	8952      	ldrh	r2, [r2, #10]
 8007208:	fbb3 f3f2 	udiv	r3, r3, r2
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <find_volume+0x328>
 8007214:	230d      	movs	r3, #13
 8007216:	e0e4      	b.n	80073e2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007218:	2303      	movs	r3, #3
 800721a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007224:	4293      	cmp	r3, r2
 8007226:	d802      	bhi.n	800722e <find_volume+0x33e>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007234:	4293      	cmp	r3, r2
 8007236:	d802      	bhi.n	800723e <find_volume+0x34e>
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800724a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800724c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800724e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007250:	441a      	add	r2, r3
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	441a      	add	r2, r3
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007264:	2b03      	cmp	r3, #3
 8007266:	d11e      	bne.n	80072a6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	3338      	adds	r3, #56	; 0x38
 800726c:	332a      	adds	r3, #42	; 0x2a
 800726e:	4618      	mov	r0, r3
 8007270:	f7fd ffbe 	bl	80051f0 <ld_word>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <find_volume+0x38e>
 800727a:	230d      	movs	r3, #13
 800727c:	e0b1      	b.n	80073e2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	891b      	ldrh	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <find_volume+0x39a>
 8007286:	230d      	movs	r3, #13
 8007288:	e0ab      	b.n	80073e2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	3338      	adds	r3, #56	; 0x38
 800728e:	332c      	adds	r3, #44	; 0x2c
 8007290:	4618      	mov	r0, r3
 8007292:	f7fd ffc5 	bl	8005220 <ld_dword>
 8007296:	4602      	mov	r2, r0
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	647b      	str	r3, [r7, #68]	; 0x44
 80072a4:	e01f      	b.n	80072e6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	891b      	ldrh	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <find_volume+0x3c2>
 80072ae:	230d      	movs	r3, #13
 80072b0:	e097      	b.n	80073e2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b8:	441a      	add	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d103      	bne.n	80072ce <find_volume+0x3de>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	e00a      	b.n	80072e4 <find_volume+0x3f4>
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	085a      	lsrs	r2, r3, #1
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	6a1a      	ldr	r2, [r3, #32]
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	899b      	ldrh	r3, [r3, #12]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f2:	440b      	add	r3, r1
 80072f4:	3b01      	subs	r3, #1
 80072f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f8:	8989      	ldrh	r1, [r1, #12]
 80072fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80072fe:	429a      	cmp	r2, r3
 8007300:	d201      	bcs.n	8007306 <find_volume+0x416>
 8007302:	230d      	movs	r3, #13
 8007304:	e06d      	b.n	80073e2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f04f 32ff 	mov.w	r2, #4294967295
 800730c:	619a      	str	r2, [r3, #24]
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2280      	movs	r2, #128	; 0x80
 800731a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800731c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007320:	2b03      	cmp	r3, #3
 8007322:	d149      	bne.n	80073b8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	3338      	adds	r3, #56	; 0x38
 8007328:	3330      	adds	r3, #48	; 0x30
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd ff60 	bl	80051f0 <ld_word>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d140      	bne.n	80073b8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	3301      	adds	r3, #1
 800733a:	4619      	mov	r1, r3
 800733c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800733e:	f7fe fa07 	bl	8005750 <move_window>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d137      	bne.n	80073b8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2200      	movs	r2, #0
 800734c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	3338      	adds	r3, #56	; 0x38
 8007352:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd ff4a 	bl	80051f0 <ld_word>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007364:	429a      	cmp	r2, r3
 8007366:	d127      	bne.n	80073b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	3338      	adds	r3, #56	; 0x38
 800736c:	4618      	mov	r0, r3
 800736e:	f7fd ff57 	bl	8005220 <ld_dword>
 8007372:	4603      	mov	r3, r0
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <find_volume+0x4fc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d11e      	bne.n	80073b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	3338      	adds	r3, #56	; 0x38
 800737e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd ff4c 	bl	8005220 <ld_dword>
 8007388:	4603      	mov	r3, r0
 800738a:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <find_volume+0x500>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d113      	bne.n	80073b8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	3338      	adds	r3, #56	; 0x38
 8007394:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007398:	4618      	mov	r0, r3
 800739a:	f7fd ff41 	bl	8005220 <ld_dword>
 800739e:	4602      	mov	r2, r0
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	3338      	adds	r3, #56	; 0x38
 80073a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fd ff37 	bl	8005220 <ld_dword>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <find_volume+0x504>)
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <find_volume+0x504>)
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <find_volume+0x504>)
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <find_volume+0x508>)
 80073d8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073dc:	f7fe f950 	bl	8005680 <clear_lock>
#endif
	return FR_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3758      	adds	r7, #88	; 0x58
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	41615252 	.word	0x41615252
 80073f0:	61417272 	.word	0x61417272
 80073f4:	20002410 	.word	0x20002410
 80073f8:	20002434 	.word	0x20002434

080073fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007406:	2309      	movs	r3, #9
 8007408:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01c      	beq.n	800744a <validate+0x4e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d018      	beq.n	800744a <validate+0x4e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d013      	beq.n	800744a <validate+0x4e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	889a      	ldrh	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	88db      	ldrh	r3, [r3, #6]
 800742c:	429a      	cmp	r2, r3
 800742e:	d10c      	bne.n	800744a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd fe3c 	bl	80050b4 <disk_status>
 800743c:	4603      	mov	r3, r0
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <validate+0x4e>
			res = FR_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <validate+0x5a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	e000      	b.n	8007458 <validate+0x5c>
 8007456:	2300      	movs	r3, #0
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	6013      	str	r3, [r2, #0]
	return res;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800747a:	f107 0310 	add.w	r3, r7, #16
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fc9c 	bl	8006dbc <get_ldnumber>
 8007484:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	2b00      	cmp	r3, #0
 800748a:	da01      	bge.n	8007490 <f_mount+0x28>
 800748c:	230b      	movs	r3, #11
 800748e:	e02b      	b.n	80074e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007490:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <f_mount+0x88>)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007498:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074a0:	69b8      	ldr	r0, [r7, #24]
 80074a2:	f7fe f8ed 	bl	8005680 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	490d      	ldr	r1, [pc, #52]	; (80074f0 <f_mount+0x88>)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <f_mount+0x66>
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d001      	beq.n	80074d2 <f_mount+0x6a>
 80074ce:	2300      	movs	r3, #0
 80074d0:	e00a      	b.n	80074e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074d2:	f107 010c 	add.w	r1, r7, #12
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	2200      	movs	r2, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fd07 	bl	8006ef0 <find_volume>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	2000240c 	.word	0x2000240c

080074f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b09a      	sub	sp, #104	; 0x68
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <f_open+0x18>
 8007508:	2309      	movs	r3, #9
 800750a:	e1bb      	b.n	8007884 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007512:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007514:	79fa      	ldrb	r2, [r7, #7]
 8007516:	f107 0114 	add.w	r1, r7, #20
 800751a:	f107 0308 	add.w	r3, r7, #8
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fce6 	bl	8006ef0 <find_volume>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800752a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 819f 	bne.w	8007872 <f_open+0x37e>
		dj.obj.fs = fs;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	f107 0318 	add.w	r3, r7, #24
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fbc5 	bl	8006cd0 <follow_path>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800754c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007550:	2b00      	cmp	r3, #0
 8007552:	d11a      	bne.n	800758a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007558:	b25b      	sxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	da03      	bge.n	8007566 <f_open+0x72>
				res = FR_INVALID_NAME;
 800755e:	2306      	movs	r3, #6
 8007560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007564:	e011      	b.n	800758a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	f107 0318 	add.w	r3, r7, #24
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd ff36 	bl	80053f0 <chk_lock>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	f003 031c 	and.w	r3, r3, #28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d07f      	beq.n	8007694 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007594:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800759c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d10e      	bne.n	80075c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075a4:	f7fd ff80 	bl	80054a8 <enq_lock>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d006      	beq.n	80075bc <f_open+0xc8>
 80075ae:	f107 0318 	add.w	r3, r7, #24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff f8dc 	bl	8006770 <dir_register>
 80075b8:	4603      	mov	r3, r0
 80075ba:	e000      	b.n	80075be <f_open+0xca>
 80075bc:	2312      	movs	r3, #18
 80075be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	f043 0308 	orr.w	r3, r3, #8
 80075c8:	71fb      	strb	r3, [r7, #7]
 80075ca:	e010      	b.n	80075ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075cc:	7fbb      	ldrb	r3, [r7, #30]
 80075ce:	f003 0311 	and.w	r3, r3, #17
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <f_open+0xea>
					res = FR_DENIED;
 80075d6:	2307      	movs	r3, #7
 80075d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075dc:	e007      	b.n	80075ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <f_open+0xfa>
 80075e8:	2308      	movs	r3, #8
 80075ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d168      	bne.n	80076c8 <f_open+0x1d4>
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d063      	beq.n	80076c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007600:	f7fd fcf6 	bl	8004ff0 <get_fattime>
 8007604:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	330e      	adds	r3, #14
 800760a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800760c:	4618      	mov	r0, r3
 800760e:	f7fd fe45 	bl	800529c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	3316      	adds	r3, #22
 8007616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007618:	4618      	mov	r0, r3
 800761a:	f7fd fe3f 	bl	800529c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	330b      	adds	r3, #11
 8007622:	2220      	movs	r2, #32
 8007624:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fe17 	bl	8006260 <ld_clust>
 8007632:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007638:	2200      	movs	r2, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fe2f 	bl	800629e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	331c      	adds	r3, #28
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd fe28 	bl	800529c <st_dword>
					fs->wflag = 1;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2201      	movs	r2, #1
 8007650:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007654:	2b00      	cmp	r3, #0
 8007656:	d037      	beq.n	80076c8 <f_open+0x1d4>
						dw = fs->winsect;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800765e:	f107 0318 	add.w	r3, r7, #24
 8007662:	2200      	movs	r2, #0
 8007664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fb1f 	bl	8005caa <remove_chain>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007676:	2b00      	cmp	r3, #0
 8007678:	d126      	bne.n	80076c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe f866 	bl	8005750 <move_window>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800768e:	3a01      	subs	r2, #1
 8007690:	615a      	str	r2, [r3, #20]
 8007692:	e019      	b.n	80076c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007698:	2b00      	cmp	r3, #0
 800769a:	d115      	bne.n	80076c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800769c:	7fbb      	ldrb	r3, [r7, #30]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80076a6:	2304      	movs	r3, #4
 80076a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076ac:	e00c      	b.n	80076c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <f_open+0x1d4>
 80076b8:	7fbb      	ldrb	r3, [r7, #30]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <f_open+0x1d4>
						res = FR_DENIED;
 80076c2:	2307      	movs	r3, #7
 80076c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80076c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d128      	bne.n	8007722 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80076ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bf14      	ite	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	2300      	moveq	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	f107 0318 	add.w	r3, r7, #24
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd feef 	bl	80054ec <inc_lock>
 800770e:	4602      	mov	r2, r0
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d102      	bne.n	8007722 <f_open+0x22e>
 800771c:	2302      	movs	r3, #2
 800771e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 80a3 	bne.w	8007872 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fd94 	bl	8006260 <ld_clust>
 8007738:	4602      	mov	r2, r0
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	331c      	adds	r3, #28
 8007742:	4618      	mov	r0, r3
 8007744:	f7fd fd6c 	bl	8005220 <ld_dword>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	88da      	ldrh	r2, [r3, #6]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	79fa      	ldrb	r2, [r7, #7]
 8007766:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3330      	adds	r3, #48	; 0x30
 800777e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f7fd fdd6 	bl	8005336 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d06e      	beq.n	8007872 <f_open+0x37e>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d06a      	beq.n	8007872 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	895b      	ldrh	r3, [r3, #10]
 80077a8:	461a      	mov	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	899b      	ldrh	r3, [r3, #12]
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c0:	e016      	b.n	80077f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe f87f 	bl	80058ca <get_fat>
 80077cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80077ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d802      	bhi.n	80077da <f_open+0x2e6>
 80077d4:	2302      	movs	r3, #2
 80077d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d102      	bne.n	80077e8 <f_open+0x2f4>
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <f_open+0x30c>
 80077f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d8e0      	bhi.n	80077c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007804:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800780a:	2b00      	cmp	r3, #0
 800780c:	d131      	bne.n	8007872 <f_open+0x37e>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	899b      	ldrh	r3, [r3, #12]
 8007812:	461a      	mov	r2, r3
 8007814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007816:	fbb3 f1f2 	udiv	r1, r3, r2
 800781a:	fb01 f202 	mul.w	r2, r1, r2
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d026      	beq.n	8007872 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f82f 	bl	800588c <clust2sect>
 800782e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <f_open+0x34a>
						res = FR_INT_ERR;
 8007836:	2302      	movs	r3, #2
 8007838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800783c:	e019      	b.n	8007872 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	899b      	ldrh	r3, [r3, #12]
 8007842:	461a      	mov	r2, r3
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	fbb3 f2f2 	udiv	r2, r3, r2
 800784a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	7858      	ldrb	r0, [r3, #1]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	2301      	movs	r3, #1
 8007862:	f7fd fc67 	bl	8005134 <disk_read>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <f_open+0x37e>
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007872:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <f_open+0x38c>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007884:	4618      	mov	r0, r3
 8007886:	3768      	adds	r7, #104	; 0x68
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	; 0x30
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f107 0210 	add.w	r2, r7, #16
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fda5 	bl	80073fc <validate>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <f_write+0x44>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7d5b      	ldrb	r3, [r3, #21]
 80078c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <f_write+0x4a>
 80078d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078d4:	e16a      	b.n	8007bac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7d1b      	ldrb	r3, [r3, #20]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <f_write+0x5a>
 80078e2:	2307      	movs	r3, #7
 80078e4:	e162      	b.n	8007bac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f080 814c 	bcs.w	8007b90 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007900:	e146      	b.n	8007b90 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	8992      	ldrh	r2, [r2, #12]
 800790a:	fbb3 f1f2 	udiv	r1, r3, r2
 800790e:	fb01 f202 	mul.w	r2, r1, r2
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 80f1 	bne.w	8007afc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	8992      	ldrh	r2, [r2, #12]
 8007922:	fbb3 f3f2 	udiv	r3, r3, r2
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	8952      	ldrh	r2, [r2, #10]
 800792a:	3a01      	subs	r2, #1
 800792c:	4013      	ands	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d143      	bne.n	80079be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10c      	bne.n	8007958 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d11a      	bne.n	8007980 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fa10 	bl	8005d74 <create_chain>
 8007954:	62b8      	str	r0, [r7, #40]	; 0x28
 8007956:	e013      	b.n	8007980 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	4619      	mov	r1, r3
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7fe fa9c 	bl	8005ea4 <clmt_clust>
 800796c:	62b8      	str	r0, [r7, #40]	; 0x28
 800796e:	e007      	b.n	8007980 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fe f9fb 	bl	8005d74 <create_chain>
 800797e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8109 	beq.w	8007b9a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	2b01      	cmp	r3, #1
 800798c:	d104      	bne.n	8007998 <f_write+0x10c>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2202      	movs	r2, #2
 8007992:	755a      	strb	r2, [r3, #21]
 8007994:	2302      	movs	r3, #2
 8007996:	e109      	b.n	8007bac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d104      	bne.n	80079aa <f_write+0x11e>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	755a      	strb	r2, [r3, #21]
 80079a6:	2301      	movs	r3, #1
 80079a8:	e100      	b.n	8007bac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <f_write+0x132>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	7d1b      	ldrb	r3, [r3, #20]
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da18      	bge.n	80079fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	7858      	ldrb	r0, [r3, #1]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	2301      	movs	r3, #1
 80079d8:	f7fd fbcc 	bl	8005174 <disk_write>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <f_write+0x160>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	755a      	strb	r2, [r3, #21]
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0df      	b.n	8007bac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	7d1b      	ldrb	r3, [r3, #20]
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fd ff42 	bl	800588c <clust2sect>
 8007a08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <f_write+0x18e>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2202      	movs	r2, #2
 8007a14:	755a      	strb	r2, [r3, #21]
 8007a16:	2302      	movs	r3, #2
 8007a18:	e0c8      	b.n	8007bac <f_write+0x320>
			sect += csect;
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	4413      	add	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	899b      	ldrh	r3, [r3, #12]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a2e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d043      	beq.n	8007abe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	8952      	ldrh	r2, [r2, #10]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d905      	bls.n	8007a50 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	895b      	ldrh	r3, [r3, #10]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	7858      	ldrb	r0, [r3, #1]
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	f7fd fb8b 	bl	8005174 <disk_write>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <f_write+0x1e2>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	755a      	strb	r2, [r3, #21]
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e09e      	b.n	8007bac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d918      	bls.n	8007aae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	8992      	ldrh	r2, [r2, #12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	18d1      	adds	r1, r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	899b      	ldrh	r3, [r3, #12]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f7fd fc2a 	bl	80052f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	7d1b      	ldrb	r3, [r3, #20]
 8007aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	899b      	ldrh	r3, [r3, #12]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007abc:	e04b      	b.n	8007b56 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d016      	beq.n	8007af6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d210      	bcs.n	8007af6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	7858      	ldrb	r0, [r3, #1]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ade:	2301      	movs	r3, #1
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	f7fd fb27 	bl	8005134 <disk_read>
 8007ae6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	755a      	strb	r2, [r3, #21]
 8007af2:	2301      	movs	r3, #1
 8007af4:	e05a      	b.n	8007bac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	899b      	ldrh	r3, [r3, #12]
 8007b00:	4618      	mov	r0, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	8992      	ldrh	r2, [r2, #12]
 8007b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b0e:	fb01 f202 	mul.w	r2, r1, r2
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	1ac3      	subs	r3, r0, r3
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d901      	bls.n	8007b24 <f_write+0x298>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	8992      	ldrh	r2, [r2, #12]
 8007b32:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b36:	fb00 f202 	mul.w	r2, r0, r2
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fd fbd6 	bl	80052f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	7d1b      	ldrb	r3, [r3, #20]
 8007b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	4413      	add	r3, r2
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	619a      	str	r2, [r3, #24]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	bf38      	it	cc
 8007b76:	461a      	movcc	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	60da      	str	r2, [r3, #12]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	441a      	add	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f47f aeb5 	bne.w	8007902 <f_write+0x76>
 8007b98:	e000      	b.n	8007b9c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3730      	adds	r7, #48	; 0x30
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f107 0208 	add.w	r2, r7, #8
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fc19 	bl	80073fc <validate>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d168      	bne.n	8007ca6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d062      	beq.n	8007ca6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7d1b      	ldrb	r3, [r3, #20]
 8007be4:	b25b      	sxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da15      	bge.n	8007c16 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	7858      	ldrb	r0, [r3, #1]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1a      	ldr	r2, [r3, #32]
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f7fd fabb 	bl	8005174 <disk_write>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <f_sync+0x54>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e04f      	b.n	8007ca8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7d1b      	ldrb	r3, [r3, #20]
 8007c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c16:	f7fd f9eb 	bl	8004ff0 <get_fattime>
 8007c1a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7fd fd93 	bl	8005750 <move_window>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d138      	bne.n	8007ca6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	330b      	adds	r3, #11
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	330b      	adds	r3, #11
 8007c44:	f042 0220 	orr.w	r2, r2, #32
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	461a      	mov	r2, r3
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	f7fe fb21 	bl	800629e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f103 021c 	add.w	r2, r3, #28
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f7fd fb17 	bl	800529c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3316      	adds	r3, #22
 8007c72:	6939      	ldr	r1, [r7, #16]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd fb11 	bl	800529c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3312      	adds	r3, #18
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd faf0 	bl	8005266 <st_word>
					fs->wflag = 1;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd fd8c 	bl	80057ac <sync_fs>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7d1b      	ldrb	r3, [r3, #20]
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ff7b 	bl	8007bb4 <f_sync>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d118      	bne.n	8007cfa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f107 0208 	add.w	r2, r7, #8
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fb93 	bl	80073fc <validate>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10c      	bne.n	8007cfa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fc8f 	bl	8005608 <dec_lock>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b090      	sub	sp, #64	; 0x40
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f107 0208 	add.w	r2, r7, #8
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fb70 	bl	80073fc <validate>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007d22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <f_lseek+0x2e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7d5b      	ldrb	r3, [r3, #21]
 8007d2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007d32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <f_lseek+0x3c>
 8007d3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d3e:	e201      	b.n	8008144 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80d9 	beq.w	8007efc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d15a      	bne.n	8007e08 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	627a      	str	r2, [r7, #36]	; 0x24
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	2302      	movs	r3, #2
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d03a      	beq.n	8007de8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	2300      	movs	r3, #0
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	3301      	adds	r3, #1
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fd fd9b 	bl	80058ca <get_fat>
 8007d94:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d804      	bhi.n	8007da6 <f_lseek+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	755a      	strb	r2, [r3, #21]
 8007da2:	2302      	movs	r3, #2
 8007da4:	e1ce      	b.n	8008144 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d104      	bne.n	8007db8 <f_lseek+0xb4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	755a      	strb	r2, [r3, #21]
 8007db4:	2301      	movs	r3, #1
 8007db6:	e1c5      	b.n	8008144 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d0de      	beq.n	8007d80 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d809      	bhi.n	8007dde <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1d1a      	adds	r2, r3, #4
 8007dce:	627a      	str	r2, [r7, #36]	; 0x24
 8007dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	627a      	str	r2, [r7, #36]	; 0x24
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3c4      	bcc.n	8007d72 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d803      	bhi.n	8007e00 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e19f      	b.n	8008140 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007e00:	2311      	movs	r3, #17
 8007e02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007e06:	e19b      	b.n	8008140 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d902      	bls.n	8007e18 <f_lseek+0x114>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 818d 	beq.w	8008140 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fe f839 	bl	8005ea4 <clmt_clust>
 8007e32:	4602      	mov	r2, r0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fd fd23 	bl	800588c <clust2sect>
 8007e46:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <f_lseek+0x154>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	755a      	strb	r2, [r3, #21]
 8007e54:	2302      	movs	r3, #2
 8007e56:	e175      	b.n	8008144 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	8992      	ldrh	r2, [r2, #12]
 8007e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	8952      	ldrh	r2, [r2, #10]
 8007e68:	3a01      	subs	r2, #1
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4413      	add	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	8992      	ldrh	r2, [r2, #12]
 8007e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e7e:	fb01 f202 	mul.w	r2, r1, r2
 8007e82:	1a9b      	subs	r3, r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 815b 	beq.w	8008140 <f_lseek+0x43c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	f000 8155 	beq.w	8008140 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7d1b      	ldrb	r3, [r3, #20]
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da18      	bge.n	8007ed2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	7858      	ldrb	r0, [r3, #1]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f7fd f960 	bl	8005174 <disk_write>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <f_lseek+0x1c0>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	755a      	strb	r2, [r3, #21]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e13f      	b.n	8008144 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7d1b      	ldrb	r3, [r3, #20]
 8007ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	7858      	ldrb	r0, [r3, #1]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007edc:	2301      	movs	r3, #1
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	f7fd f928 	bl	8005134 <disk_read>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <f_lseek+0x1f0>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	755a      	strb	r2, [r3, #21]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e127      	b.n	8008144 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	621a      	str	r2, [r3, #32]
 8007efa:	e121      	b.n	8008140 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d908      	bls.n	8007f18 <f_lseek+0x214>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7d1b      	ldrb	r3, [r3, #20]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d102      	bne.n	8007f18 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f26:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80b5 	beq.w	800809a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	895b      	ldrh	r3, [r3, #10]
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	899b      	ldrh	r3, [r3, #12]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01b      	beq.n	8007f7e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	1e5a      	subs	r2, r3, #1
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	1e59      	subs	r1, r3, #1
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d30f      	bcc.n	8007f7e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	425b      	negs	r3, r3
 8007f66:	401a      	ands	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f7c:	e022      	b.n	8007fc4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d119      	bne.n	8007fbe <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd fef0 	bl	8005d74 <create_chain>
 8007f94:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d104      	bne.n	8007fa6 <f_lseek+0x2a2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	755a      	strb	r2, [r3, #21]
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e0ce      	b.n	8008144 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d104      	bne.n	8007fb8 <f_lseek+0x2b4>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	755a      	strb	r2, [r3, #21]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0c5      	b.n	8008144 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fbc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d067      	beq.n	800809a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007fca:	e03a      	b.n	8008042 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	441a      	add	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7d1b      	ldrb	r3, [r3, #20]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd febf 	bl	8005d74 <create_chain>
 8007ff6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d108      	bne.n	8008010 <f_lseek+0x30c>
							ofs = 0; break;
 8007ffe:	2300      	movs	r3, #0
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	e022      	b.n	800804a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fc5e 	bl	80058ca <get_fat>
 800800e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008016:	d104      	bne.n	8008022 <f_lseek+0x31e>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	755a      	strb	r2, [r3, #21]
 800801e:	2301      	movs	r3, #1
 8008020:	e090      	b.n	8008144 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	2b01      	cmp	r3, #1
 8008026:	d904      	bls.n	8008032 <f_lseek+0x32e>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802e:	429a      	cmp	r2, r3
 8008030:	d304      	bcc.n	800803c <f_lseek+0x338>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	755a      	strb	r2, [r3, #21]
 8008038:	2302      	movs	r3, #2
 800803a:	e083      	b.n	8008144 <f_lseek+0x440>
					fp->clust = clst;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008040:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	429a      	cmp	r2, r3
 8008048:	d8c0      	bhi.n	8007fcc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	441a      	add	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	899b      	ldrh	r3, [r3, #12]
 800805a:	461a      	mov	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008062:	fb01 f202 	mul.w	r2, r1, r2
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d016      	beq.n	800809a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fc0b 	bl	800588c <clust2sect>
 8008076:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <f_lseek+0x384>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	755a      	strb	r2, [r3, #21]
 8008084:	2302      	movs	r3, #2
 8008086:	e05d      	b.n	8008144 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	899b      	ldrh	r3, [r3, #12]
 800808c:	461a      	mov	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	fbb3 f3f2 	udiv	r3, r3, r2
 8008094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008096:	4413      	add	r3, r2
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d90a      	bls.n	80080bc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	7d1b      	ldrb	r3, [r3, #20]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	8992      	ldrh	r2, [r2, #12]
 80080c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080c8:	fb01 f202 	mul.w	r2, r1, r2
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d036      	beq.n	8008140 <f_lseek+0x43c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080d8:	429a      	cmp	r2, r3
 80080da:	d031      	beq.n	8008140 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7d1b      	ldrb	r3, [r3, #20]
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da18      	bge.n	8008118 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7858      	ldrb	r0, [r3, #1]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	2301      	movs	r3, #1
 80080f6:	f7fd f83d 	bl	8005174 <disk_write>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <f_lseek+0x406>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	755a      	strb	r2, [r3, #21]
 8008106:	2301      	movs	r3, #1
 8008108:	e01c      	b.n	8008144 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7d1b      	ldrb	r3, [r3, #20]
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	7858      	ldrb	r0, [r3, #1]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008122:	2301      	movs	r3, #1
 8008124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008126:	f7fd f805 	bl	8005134 <disk_read>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <f_lseek+0x436>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	755a      	strb	r2, [r3, #21]
 8008136:	2301      	movs	r3, #1
 8008138:	e004      	b.n	8008144 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008140:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008144:	4618      	mov	r0, r3
 8008146:	3740      	adds	r7, #64	; 0x40
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	2b0a      	cmp	r3, #10
 800815c:	d103      	bne.n	8008166 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800815e:	210d      	movs	r1, #13
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fff3 	bl	800814c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	db25      	blt.n	80081be <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	60fa      	str	r2, [r7, #12]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b3c      	cmp	r3, #60	; 0x3c
 8008184:	dd12      	ble.n	80081ac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f103 010c 	add.w	r1, r3, #12
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	f7ff fb79 	bl	800788c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d101      	bne.n	80081a6 <putc_bfd+0x5a>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e001      	b.n	80081aa <putc_bfd+0x5e>
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	e000      	b.n	80081c0 <putc_bfd+0x74>
	if (i < 0) return;
 80081be:	bf00      	nop
}
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	db16      	blt.n	8008204 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f103 010c 	add.w	r1, r3, #12
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	461a      	mov	r2, r3
 80081e6:	f107 030c 	add.w	r3, r7, #12
 80081ea:	f7ff fb4f 	bl	800788c <f_write>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d102      	bne.n	8008204 <putc_flush+0x3e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	e001      	b.n	8008208 <putc_flush+0x42>
	return EOF;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	609a      	str	r2, [r3, #8]
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b096      	sub	sp, #88	; 0x58
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008244:	f107 030c 	add.w	r3, r7, #12
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff ffe0 	bl	8008210 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008250:	e009      	b.n	8008266 <f_puts+0x2c>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff ff73 	bl	800814c <putc_bfd>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f1      	bne.n	8008252 <f_puts+0x18>
	return putc_flush(&pb);
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff ffa7 	bl	80081c6 <putc_flush>
 8008278:	4603      	mov	r3, r0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3758      	adds	r7, #88	; 0x58
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008292:	2301      	movs	r3, #1
 8008294:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800829a:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 800829c:	7a5b      	ldrb	r3, [r3, #9]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d131      	bne.n	8008308 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082a4:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082a6:	7a5b      	ldrb	r3, [r3, #9]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082ae:	2100      	movs	r1, #0
 80082b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082b2:	4b19      	ldr	r3, [pc, #100]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082b4:	7a5b      	ldrb	r3, [r3, #9]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082c4:	7a5b      	ldrb	r3, [r3, #9]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	4b13      	ldr	r3, [pc, #76]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082cc:	4413      	add	r3, r2
 80082ce:	79fa      	ldrb	r2, [r7, #7]
 80082d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082d2:	4b11      	ldr	r3, [pc, #68]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082d4:	7a5b      	ldrb	r3, [r3, #9]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	b2d1      	uxtb	r1, r2
 80082dc:	4a0e      	ldr	r2, [pc, #56]	; (8008318 <FATFS_LinkDriverEx+0x94>)
 80082de:	7251      	strb	r1, [r2, #9]
 80082e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082e2:	7dbb      	ldrb	r3, [r7, #22]
 80082e4:	3330      	adds	r3, #48	; 0x30
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3301      	adds	r3, #1
 80082f0:	223a      	movs	r2, #58	; 0x3a
 80082f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	3302      	adds	r3, #2
 80082f8:	222f      	movs	r2, #47	; 0x2f
 80082fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3303      	adds	r3, #3
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
}
 800830a:	4618      	mov	r0, r3
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20002634 	.word	0x20002634

0800831c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff ffaa 	bl	8008284 <FATFS_LinkDriverEx>
 8008330:	4603      	mov	r3, r0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	2b7f      	cmp	r3, #127	; 0x7f
 800834c:	d802      	bhi.n	8008354 <ff_convert+0x18>
		c = chr;
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	81fb      	strh	r3, [r7, #14]
 8008352:	e025      	b.n	80083a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00b      	beq.n	8008372 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	2bff      	cmp	r3, #255	; 0xff
 800835e:	d805      	bhi.n	800836c <ff_convert+0x30>
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	3b80      	subs	r3, #128	; 0x80
 8008364:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <ff_convert+0x74>)
 8008366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800836a:	e000      	b.n	800836e <ff_convert+0x32>
 800836c:	2300      	movs	r3, #0
 800836e:	81fb      	strh	r3, [r7, #14]
 8008370:	e016      	b.n	80083a0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008372:	2300      	movs	r3, #0
 8008374:	81fb      	strh	r3, [r7, #14]
 8008376:	e009      	b.n	800838c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	4a0d      	ldr	r2, [pc, #52]	; (80083b0 <ff_convert+0x74>)
 800837c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	429a      	cmp	r2, r3
 8008384:	d006      	beq.n	8008394 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008386:	89fb      	ldrh	r3, [r7, #14]
 8008388:	3301      	adds	r3, #1
 800838a:	81fb      	strh	r3, [r7, #14]
 800838c:	89fb      	ldrh	r3, [r7, #14]
 800838e:	2b7f      	cmp	r3, #127	; 0x7f
 8008390:	d9f2      	bls.n	8008378 <ff_convert+0x3c>
 8008392:	e000      	b.n	8008396 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008394:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008396:	89fb      	ldrh	r3, [r7, #14]
 8008398:	3380      	adds	r3, #128	; 0x80
 800839a:	b29b      	uxth	r3, r3
 800839c:	b2db      	uxtb	r3, r3
 800839e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80083a0:	89fb      	ldrh	r3, [r7, #14]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	0800cff4 	.word	0x0800cff4

080083b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c4:	d201      	bcs.n	80083ca <ff_wtoupper+0x16>
 80083c6:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <ff_wtoupper+0x10c>)
 80083c8:	e000      	b.n	80083cc <ff_wtoupper+0x18>
 80083ca:	4b3e      	ldr	r3, [pc, #248]	; (80084c4 <ff_wtoupper+0x110>)
 80083cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	1c9a      	adds	r2, r3, #2
 80083d2:	617a      	str	r2, [r7, #20]
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80083d8:	8a7b      	ldrh	r3, [r7, #18]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d068      	beq.n	80084b0 <ff_wtoupper+0xfc>
 80083de:	88fa      	ldrh	r2, [r7, #6]
 80083e0:	8a7b      	ldrh	r3, [r7, #18]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d364      	bcc.n	80084b0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	1c9a      	adds	r2, r3, #2
 80083ea:	617a      	str	r2, [r7, #20]
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	823b      	strh	r3, [r7, #16]
 80083f0:	8a3b      	ldrh	r3, [r7, #16]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	81fb      	strh	r3, [r7, #14]
 80083f6:	8a3b      	ldrh	r3, [r7, #16]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	8a79      	ldrh	r1, [r7, #18]
 8008400:	8a3b      	ldrh	r3, [r7, #16]
 8008402:	440b      	add	r3, r1
 8008404:	429a      	cmp	r2, r3
 8008406:	da49      	bge.n	800849c <ff_wtoupper+0xe8>
			switch (cmd) {
 8008408:	89fb      	ldrh	r3, [r7, #14]
 800840a:	2b08      	cmp	r3, #8
 800840c:	d84f      	bhi.n	80084ae <ff_wtoupper+0xfa>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <ff_wtoupper+0x60>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008439 	.word	0x08008439
 8008418:	0800844b 	.word	0x0800844b
 800841c:	08008461 	.word	0x08008461
 8008420:	08008469 	.word	0x08008469
 8008424:	08008471 	.word	0x08008471
 8008428:	08008479 	.word	0x08008479
 800842c:	08008481 	.word	0x08008481
 8008430:	08008489 	.word	0x08008489
 8008434:	08008491 	.word	0x08008491
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	8a7b      	ldrh	r3, [r7, #18]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	80fb      	strh	r3, [r7, #6]
 8008448:	e027      	b.n	800849a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	8a7b      	ldrh	r3, [r7, #18]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	b29b      	uxth	r3, r3
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	80fb      	strh	r3, [r7, #6]
 800845e:	e01c      	b.n	800849a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	3b10      	subs	r3, #16
 8008464:	80fb      	strh	r3, [r7, #6]
 8008466:	e018      	b.n	800849a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	3b20      	subs	r3, #32
 800846c:	80fb      	strh	r3, [r7, #6]
 800846e:	e014      	b.n	800849a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	3b30      	subs	r3, #48	; 0x30
 8008474:	80fb      	strh	r3, [r7, #6]
 8008476:	e010      	b.n	800849a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	3b1a      	subs	r3, #26
 800847c:	80fb      	strh	r3, [r7, #6]
 800847e:	e00c      	b.n	800849a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	3308      	adds	r3, #8
 8008484:	80fb      	strh	r3, [r7, #6]
 8008486:	e008      	b.n	800849a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	3b50      	subs	r3, #80	; 0x50
 800848c:	80fb      	strh	r3, [r7, #6]
 800848e:	e004      	b.n	800849a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008496:	80fb      	strh	r3, [r7, #6]
 8008498:	bf00      	nop
			}
			break;
 800849a:	e008      	b.n	80084ae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800849c:	89fb      	ldrh	r3, [r7, #14]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d195      	bne.n	80083ce <ff_wtoupper+0x1a>
 80084a2:	8a3b      	ldrh	r3, [r7, #16]
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80084ac:	e78f      	b.n	80083ce <ff_wtoupper+0x1a>
			break;
 80084ae:	bf00      	nop
	}

	return chr;
 80084b0:	88fb      	ldrh	r3, [r7, #6]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	0800d0f4 	.word	0x0800d0f4
 80084c4:	0800d2e8 	.word	0x0800d2e8

080084c8 <__errno>:
 80084c8:	4b01      	ldr	r3, [pc, #4]	; (80084d0 <__errno+0x8>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20000024 	.word	0x20000024

080084d4 <__libc_init_array>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4d0d      	ldr	r5, [pc, #52]	; (800850c <__libc_init_array+0x38>)
 80084d8:	4c0d      	ldr	r4, [pc, #52]	; (8008510 <__libc_init_array+0x3c>)
 80084da:	1b64      	subs	r4, r4, r5
 80084dc:	10a4      	asrs	r4, r4, #2
 80084de:	2600      	movs	r6, #0
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	d109      	bne.n	80084f8 <__libc_init_array+0x24>
 80084e4:	4d0b      	ldr	r5, [pc, #44]	; (8008514 <__libc_init_array+0x40>)
 80084e6:	4c0c      	ldr	r4, [pc, #48]	; (8008518 <__libc_init_array+0x44>)
 80084e8:	f004 fcc6 	bl	800ce78 <_init>
 80084ec:	1b64      	subs	r4, r4, r5
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	2600      	movs	r6, #0
 80084f2:	42a6      	cmp	r6, r4
 80084f4:	d105      	bne.n	8008502 <__libc_init_array+0x2e>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fc:	4798      	blx	r3
 80084fe:	3601      	adds	r6, #1
 8008500:	e7ee      	b.n	80084e0 <__libc_init_array+0xc>
 8008502:	f855 3b04 	ldr.w	r3, [r5], #4
 8008506:	4798      	blx	r3
 8008508:	3601      	adds	r6, #1
 800850a:	e7f2      	b.n	80084f2 <__libc_init_array+0x1e>
 800850c:	0800d854 	.word	0x0800d854
 8008510:	0800d854 	.word	0x0800d854
 8008514:	0800d854 	.word	0x0800d854
 8008518:	0800d858 	.word	0x0800d858

0800851c <memset>:
 800851c:	4402      	add	r2, r0
 800851e:	4603      	mov	r3, r0
 8008520:	4293      	cmp	r3, r2
 8008522:	d100      	bne.n	8008526 <memset+0xa>
 8008524:	4770      	bx	lr
 8008526:	f803 1b01 	strb.w	r1, [r3], #1
 800852a:	e7f9      	b.n	8008520 <memset+0x4>

0800852c <__cvt>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	ec55 4b10 	vmov	r4, r5, d0
 8008534:	2d00      	cmp	r5, #0
 8008536:	460e      	mov	r6, r1
 8008538:	4619      	mov	r1, r3
 800853a:	462b      	mov	r3, r5
 800853c:	bfbb      	ittet	lt
 800853e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008542:	461d      	movlt	r5, r3
 8008544:	2300      	movge	r3, #0
 8008546:	232d      	movlt	r3, #45	; 0x2d
 8008548:	700b      	strb	r3, [r1, #0]
 800854a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008550:	4691      	mov	r9, r2
 8008552:	f023 0820 	bic.w	r8, r3, #32
 8008556:	bfbc      	itt	lt
 8008558:	4622      	movlt	r2, r4
 800855a:	4614      	movlt	r4, r2
 800855c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008560:	d005      	beq.n	800856e <__cvt+0x42>
 8008562:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008566:	d100      	bne.n	800856a <__cvt+0x3e>
 8008568:	3601      	adds	r6, #1
 800856a:	2102      	movs	r1, #2
 800856c:	e000      	b.n	8008570 <__cvt+0x44>
 800856e:	2103      	movs	r1, #3
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	ab02      	add	r3, sp, #8
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	ec45 4b10 	vmov	d0, r4, r5
 800857c:	4653      	mov	r3, sl
 800857e:	4632      	mov	r2, r6
 8008580:	f001 fde2 	bl	800a148 <_dtoa_r>
 8008584:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008588:	4607      	mov	r7, r0
 800858a:	d102      	bne.n	8008592 <__cvt+0x66>
 800858c:	f019 0f01 	tst.w	r9, #1
 8008590:	d022      	beq.n	80085d8 <__cvt+0xac>
 8008592:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008596:	eb07 0906 	add.w	r9, r7, r6
 800859a:	d110      	bne.n	80085be <__cvt+0x92>
 800859c:	783b      	ldrb	r3, [r7, #0]
 800859e:	2b30      	cmp	r3, #48	; 0x30
 80085a0:	d10a      	bne.n	80085b8 <__cvt+0x8c>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ae:	b918      	cbnz	r0, 80085b8 <__cvt+0x8c>
 80085b0:	f1c6 0601 	rsb	r6, r6, #1
 80085b4:	f8ca 6000 	str.w	r6, [sl]
 80085b8:	f8da 3000 	ldr.w	r3, [sl]
 80085bc:	4499      	add	r9, r3
 80085be:	2200      	movs	r2, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4620      	mov	r0, r4
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7f8 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ca:	b108      	cbz	r0, 80085d0 <__cvt+0xa4>
 80085cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80085d0:	2230      	movs	r2, #48	; 0x30
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	454b      	cmp	r3, r9
 80085d6:	d307      	bcc.n	80085e8 <__cvt+0xbc>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085dc:	1bdb      	subs	r3, r3, r7
 80085de:	4638      	mov	r0, r7
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	b004      	add	sp, #16
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	1c59      	adds	r1, r3, #1
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e7f0      	b.n	80085d2 <__cvt+0xa6>

080085f0 <__exponent>:
 80085f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f2:	4603      	mov	r3, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	bfb8      	it	lt
 80085f8:	4249      	neglt	r1, r1
 80085fa:	f803 2b02 	strb.w	r2, [r3], #2
 80085fe:	bfb4      	ite	lt
 8008600:	222d      	movlt	r2, #45	; 0x2d
 8008602:	222b      	movge	r2, #43	; 0x2b
 8008604:	2909      	cmp	r1, #9
 8008606:	7042      	strb	r2, [r0, #1]
 8008608:	dd2a      	ble.n	8008660 <__exponent+0x70>
 800860a:	f10d 0407 	add.w	r4, sp, #7
 800860e:	46a4      	mov	ip, r4
 8008610:	270a      	movs	r7, #10
 8008612:	46a6      	mov	lr, r4
 8008614:	460a      	mov	r2, r1
 8008616:	fb91 f6f7 	sdiv	r6, r1, r7
 800861a:	fb07 1516 	mls	r5, r7, r6, r1
 800861e:	3530      	adds	r5, #48	; 0x30
 8008620:	2a63      	cmp	r2, #99	; 0x63
 8008622:	f104 34ff 	add.w	r4, r4, #4294967295
 8008626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800862a:	4631      	mov	r1, r6
 800862c:	dcf1      	bgt.n	8008612 <__exponent+0x22>
 800862e:	3130      	adds	r1, #48	; 0x30
 8008630:	f1ae 0502 	sub.w	r5, lr, #2
 8008634:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008638:	1c44      	adds	r4, r0, #1
 800863a:	4629      	mov	r1, r5
 800863c:	4561      	cmp	r1, ip
 800863e:	d30a      	bcc.n	8008656 <__exponent+0x66>
 8008640:	f10d 0209 	add.w	r2, sp, #9
 8008644:	eba2 020e 	sub.w	r2, r2, lr
 8008648:	4565      	cmp	r5, ip
 800864a:	bf88      	it	hi
 800864c:	2200      	movhi	r2, #0
 800864e:	4413      	add	r3, r2
 8008650:	1a18      	subs	r0, r3, r0
 8008652:	b003      	add	sp, #12
 8008654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800865a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800865e:	e7ed      	b.n	800863c <__exponent+0x4c>
 8008660:	2330      	movs	r3, #48	; 0x30
 8008662:	3130      	adds	r1, #48	; 0x30
 8008664:	7083      	strb	r3, [r0, #2]
 8008666:	70c1      	strb	r1, [r0, #3]
 8008668:	1d03      	adds	r3, r0, #4
 800866a:	e7f1      	b.n	8008650 <__exponent+0x60>

0800866c <_printf_float>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	ed2d 8b02 	vpush	{d8}
 8008674:	b08d      	sub	sp, #52	; 0x34
 8008676:	460c      	mov	r4, r1
 8008678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800867c:	4616      	mov	r6, r2
 800867e:	461f      	mov	r7, r3
 8008680:	4605      	mov	r5, r0
 8008682:	f002 febf 	bl	800b404 <_localeconv_r>
 8008686:	f8d0 a000 	ldr.w	sl, [r0]
 800868a:	4650      	mov	r0, sl
 800868c:	f7f7 fda8 	bl	80001e0 <strlen>
 8008690:	2300      	movs	r3, #0
 8008692:	930a      	str	r3, [sp, #40]	; 0x28
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	f8d8 3000 	ldr.w	r3, [r8]
 800869c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086a0:	3307      	adds	r3, #7
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	f103 0208 	add.w	r2, r3, #8
 80086aa:	f8c8 2000 	str.w	r2, [r8]
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80086c4:	ee08 0a10 	vmov	s16, r0
 80086c8:	4b9f      	ldr	r3, [pc, #636]	; (8008948 <_printf_float+0x2dc>)
 80086ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	f7f8 fa33 	bl	8000b3c <__aeabi_dcmpun>
 80086d6:	bb88      	cbnz	r0, 800873c <_printf_float+0xd0>
 80086d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086dc:	4b9a      	ldr	r3, [pc, #616]	; (8008948 <_printf_float+0x2dc>)
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	f7f8 fa0d 	bl	8000b00 <__aeabi_dcmple>
 80086e6:	bb48      	cbnz	r0, 800873c <_printf_float+0xd0>
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80086f4:	b110      	cbz	r0, 80086fc <_printf_float+0x90>
 80086f6:	232d      	movs	r3, #45	; 0x2d
 80086f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fc:	4b93      	ldr	r3, [pc, #588]	; (800894c <_printf_float+0x2e0>)
 80086fe:	4894      	ldr	r0, [pc, #592]	; (8008950 <_printf_float+0x2e4>)
 8008700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008704:	bf94      	ite	ls
 8008706:	4698      	movls	r8, r3
 8008708:	4680      	movhi	r8, r0
 800870a:	2303      	movs	r3, #3
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	9b05      	ldr	r3, [sp, #20]
 8008710:	f023 0204 	bic.w	r2, r3, #4
 8008714:	6022      	str	r2, [r4, #0]
 8008716:	f04f 0900 	mov.w	r9, #0
 800871a:	9700      	str	r7, [sp, #0]
 800871c:	4633      	mov	r3, r6
 800871e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008720:	4621      	mov	r1, r4
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f9d8 	bl	8008ad8 <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	f040 8090 	bne.w	800884e <_printf_float+0x1e2>
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	b00d      	add	sp, #52	; 0x34
 8008734:	ecbd 8b02 	vpop	{d8}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f9fa 	bl	8000b3c <__aeabi_dcmpun>
 8008748:	b140      	cbz	r0, 800875c <_printf_float+0xf0>
 800874a:	464b      	mov	r3, r9
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfbc      	itt	lt
 8008750:	232d      	movlt	r3, #45	; 0x2d
 8008752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008756:	487f      	ldr	r0, [pc, #508]	; (8008954 <_printf_float+0x2e8>)
 8008758:	4b7f      	ldr	r3, [pc, #508]	; (8008958 <_printf_float+0x2ec>)
 800875a:	e7d1      	b.n	8008700 <_printf_float+0x94>
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008762:	9206      	str	r2, [sp, #24]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	d13f      	bne.n	80087e8 <_printf_float+0x17c>
 8008768:	2306      	movs	r3, #6
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	9b05      	ldr	r3, [sp, #20]
 800876e:	6861      	ldr	r1, [r4, #4]
 8008770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008774:	2300      	movs	r3, #0
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	ab0a      	add	r3, sp, #40	; 0x28
 800877a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800877e:	ab09      	add	r3, sp, #36	; 0x24
 8008780:	ec49 8b10 	vmov	d0, r8, r9
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff fecd 	bl	800852c <__cvt>
 8008792:	9b06      	ldr	r3, [sp, #24]
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	2b47      	cmp	r3, #71	; 0x47
 8008798:	4680      	mov	r8, r0
 800879a:	d108      	bne.n	80087ae <_printf_float+0x142>
 800879c:	1cc8      	adds	r0, r1, #3
 800879e:	db02      	blt.n	80087a6 <_printf_float+0x13a>
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	4299      	cmp	r1, r3
 80087a4:	dd41      	ble.n	800882a <_printf_float+0x1be>
 80087a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80087aa:	fa5f fb8b 	uxtb.w	fp, fp
 80087ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087b2:	d820      	bhi.n	80087f6 <_printf_float+0x18a>
 80087b4:	3901      	subs	r1, #1
 80087b6:	465a      	mov	r2, fp
 80087b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087bc:	9109      	str	r1, [sp, #36]	; 0x24
 80087be:	f7ff ff17 	bl	80085f0 <__exponent>
 80087c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c4:	1813      	adds	r3, r2, r0
 80087c6:	2a01      	cmp	r2, #1
 80087c8:	4681      	mov	r9, r0
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	dc02      	bgt.n	80087d4 <_printf_float+0x168>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	07d2      	lsls	r2, r2, #31
 80087d2:	d501      	bpl.n	80087d8 <_printf_float+0x16c>
 80087d4:	3301      	adds	r3, #1
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d09c      	beq.n	800871a <_printf_float+0xae>
 80087e0:	232d      	movs	r3, #45	; 0x2d
 80087e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e6:	e798      	b.n	800871a <_printf_float+0xae>
 80087e8:	9a06      	ldr	r2, [sp, #24]
 80087ea:	2a47      	cmp	r2, #71	; 0x47
 80087ec:	d1be      	bne.n	800876c <_printf_float+0x100>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1bc      	bne.n	800876c <_printf_float+0x100>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e7b9      	b.n	800876a <_printf_float+0xfe>
 80087f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087fa:	d118      	bne.n	800882e <_printf_float+0x1c2>
 80087fc:	2900      	cmp	r1, #0
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	dd0b      	ble.n	800881a <_printf_float+0x1ae>
 8008802:	6121      	str	r1, [r4, #16]
 8008804:	b913      	cbnz	r3, 800880c <_printf_float+0x1a0>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	07d0      	lsls	r0, r2, #31
 800880a:	d502      	bpl.n	8008812 <_printf_float+0x1a6>
 800880c:	3301      	adds	r3, #1
 800880e:	440b      	add	r3, r1
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	65a1      	str	r1, [r4, #88]	; 0x58
 8008814:	f04f 0900 	mov.w	r9, #0
 8008818:	e7de      	b.n	80087d8 <_printf_float+0x16c>
 800881a:	b913      	cbnz	r3, 8008822 <_printf_float+0x1b6>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	07d2      	lsls	r2, r2, #31
 8008820:	d501      	bpl.n	8008826 <_printf_float+0x1ba>
 8008822:	3302      	adds	r3, #2
 8008824:	e7f4      	b.n	8008810 <_printf_float+0x1a4>
 8008826:	2301      	movs	r3, #1
 8008828:	e7f2      	b.n	8008810 <_printf_float+0x1a4>
 800882a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	4299      	cmp	r1, r3
 8008832:	db05      	blt.n	8008840 <_printf_float+0x1d4>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	6121      	str	r1, [r4, #16]
 8008838:	07d8      	lsls	r0, r3, #31
 800883a:	d5ea      	bpl.n	8008812 <_printf_float+0x1a6>
 800883c:	1c4b      	adds	r3, r1, #1
 800883e:	e7e7      	b.n	8008810 <_printf_float+0x1a4>
 8008840:	2900      	cmp	r1, #0
 8008842:	bfd4      	ite	le
 8008844:	f1c1 0202 	rsble	r2, r1, #2
 8008848:	2201      	movgt	r2, #1
 800884a:	4413      	add	r3, r2
 800884c:	e7e0      	b.n	8008810 <_printf_float+0x1a4>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	055a      	lsls	r2, r3, #21
 8008852:	d407      	bmi.n	8008864 <_printf_float+0x1f8>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	4642      	mov	r2, r8
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	d12c      	bne.n	80088bc <_printf_float+0x250>
 8008862:	e764      	b.n	800872e <_printf_float+0xc2>
 8008864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008868:	f240 80e0 	bls.w	8008a2c <_printf_float+0x3c0>
 800886c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	f7f8 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8008878:	2800      	cmp	r0, #0
 800887a:	d034      	beq.n	80088e6 <_printf_float+0x27a>
 800887c:	4a37      	ldr	r2, [pc, #220]	; (800895c <_printf_float+0x2f0>)
 800887e:	2301      	movs	r3, #1
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af51 	beq.w	800872e <_printf_float+0xc2>
 800888c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008890:	429a      	cmp	r2, r3
 8008892:	db02      	blt.n	800889a <_printf_float+0x22e>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	07d8      	lsls	r0, r3, #31
 8008898:	d510      	bpl.n	80088bc <_printf_float+0x250>
 800889a:	ee18 3a10 	vmov	r3, s16
 800889e:	4652      	mov	r2, sl
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f af41 	beq.w	800872e <_printf_float+0xc2>
 80088ac:	f04f 0800 	mov.w	r8, #0
 80088b0:	f104 091a 	add.w	r9, r4, #26
 80088b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4543      	cmp	r3, r8
 80088ba:	dc09      	bgt.n	80088d0 <_printf_float+0x264>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	079b      	lsls	r3, r3, #30
 80088c0:	f100 8105 	bmi.w	8008ace <_printf_float+0x462>
 80088c4:	68e0      	ldr	r0, [r4, #12]
 80088c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c8:	4298      	cmp	r0, r3
 80088ca:	bfb8      	it	lt
 80088cc:	4618      	movlt	r0, r3
 80088ce:	e730      	b.n	8008732 <_printf_float+0xc6>
 80088d0:	2301      	movs	r3, #1
 80088d2:	464a      	mov	r2, r9
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af27 	beq.w	800872e <_printf_float+0xc2>
 80088e0:	f108 0801 	add.w	r8, r8, #1
 80088e4:	e7e6      	b.n	80088b4 <_printf_float+0x248>
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dc39      	bgt.n	8008960 <_printf_float+0x2f4>
 80088ec:	4a1b      	ldr	r2, [pc, #108]	; (800895c <_printf_float+0x2f0>)
 80088ee:	2301      	movs	r3, #1
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f af19 	beq.w	800872e <_printf_float+0xc2>
 80088fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008900:	4313      	orrs	r3, r2
 8008902:	d102      	bne.n	800890a <_printf_float+0x29e>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	07d9      	lsls	r1, r3, #31
 8008908:	d5d8      	bpl.n	80088bc <_printf_float+0x250>
 800890a:	ee18 3a10 	vmov	r3, s16
 800890e:	4652      	mov	r2, sl
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f af09 	beq.w	800872e <_printf_float+0xc2>
 800891c:	f04f 0900 	mov.w	r9, #0
 8008920:	f104 0a1a 	add.w	sl, r4, #26
 8008924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008926:	425b      	negs	r3, r3
 8008928:	454b      	cmp	r3, r9
 800892a:	dc01      	bgt.n	8008930 <_printf_float+0x2c4>
 800892c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892e:	e792      	b.n	8008856 <_printf_float+0x1ea>
 8008930:	2301      	movs	r3, #1
 8008932:	4652      	mov	r2, sl
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f43f aef7 	beq.w	800872e <_printf_float+0xc2>
 8008940:	f109 0901 	add.w	r9, r9, #1
 8008944:	e7ee      	b.n	8008924 <_printf_float+0x2b8>
 8008946:	bf00      	nop
 8008948:	7fefffff 	.word	0x7fefffff
 800894c:	0800d3a8 	.word	0x0800d3a8
 8008950:	0800d3ac 	.word	0x0800d3ac
 8008954:	0800d3b4 	.word	0x0800d3b4
 8008958:	0800d3b0 	.word	0x0800d3b0
 800895c:	0800d3b8 	.word	0x0800d3b8
 8008960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008964:	429a      	cmp	r2, r3
 8008966:	bfa8      	it	ge
 8008968:	461a      	movge	r2, r3
 800896a:	2a00      	cmp	r2, #0
 800896c:	4691      	mov	r9, r2
 800896e:	dc37      	bgt.n	80089e0 <_printf_float+0x374>
 8008970:	f04f 0b00 	mov.w	fp, #0
 8008974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008978:	f104 021a 	add.w	r2, r4, #26
 800897c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	eba3 0309 	sub.w	r3, r3, r9
 8008984:	455b      	cmp	r3, fp
 8008986:	dc33      	bgt.n	80089f0 <_printf_float+0x384>
 8008988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800898c:	429a      	cmp	r2, r3
 800898e:	db3b      	blt.n	8008a08 <_printf_float+0x39c>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d438      	bmi.n	8008a08 <_printf_float+0x39c>
 8008996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008998:	9a05      	ldr	r2, [sp, #20]
 800899a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800899c:	1a9a      	subs	r2, r3, r2
 800899e:	eba3 0901 	sub.w	r9, r3, r1
 80089a2:	4591      	cmp	r9, r2
 80089a4:	bfa8      	it	ge
 80089a6:	4691      	movge	r9, r2
 80089a8:	f1b9 0f00 	cmp.w	r9, #0
 80089ac:	dc35      	bgt.n	8008a1a <_printf_float+0x3ae>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b6:	f104 0a1a 	add.w	sl, r4, #26
 80089ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	eba3 0309 	sub.w	r3, r3, r9
 80089c4:	4543      	cmp	r3, r8
 80089c6:	f77f af79 	ble.w	80088bc <_printf_float+0x250>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4652      	mov	r2, sl
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	f43f aeaa 	beq.w	800872e <_printf_float+0xc2>
 80089da:	f108 0801 	add.w	r8, r8, #1
 80089de:	e7ec      	b.n	80089ba <_printf_float+0x34e>
 80089e0:	4613      	mov	r3, r2
 80089e2:	4631      	mov	r1, r6
 80089e4:	4642      	mov	r2, r8
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	d1c0      	bne.n	8008970 <_printf_float+0x304>
 80089ee:	e69e      	b.n	800872e <_printf_float+0xc2>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	9205      	str	r2, [sp, #20]
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f ae97 	beq.w	800872e <_printf_float+0xc2>
 8008a00:	9a05      	ldr	r2, [sp, #20]
 8008a02:	f10b 0b01 	add.w	fp, fp, #1
 8008a06:	e7b9      	b.n	800897c <_printf_float+0x310>
 8008a08:	ee18 3a10 	vmov	r3, s16
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	d1be      	bne.n	8008996 <_printf_float+0x32a>
 8008a18:	e689      	b.n	800872e <_printf_float+0xc2>
 8008a1a:	9a05      	ldr	r2, [sp, #20]
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	4442      	add	r2, r8
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	d1c1      	bne.n	80089ae <_printf_float+0x342>
 8008a2a:	e680      	b.n	800872e <_printf_float+0xc2>
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	dc01      	bgt.n	8008a36 <_printf_float+0x3ca>
 8008a32:	07db      	lsls	r3, r3, #31
 8008a34:	d538      	bpl.n	8008aa8 <_printf_float+0x43c>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	f43f ae74 	beq.w	800872e <_printf_float+0xc2>
 8008a46:	ee18 3a10 	vmov	r3, s16
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f ae6b 	beq.w	800872e <_printf_float+0xc2>
 8008a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f7f8 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a64:	b9d8      	cbnz	r0, 8008a9e <_printf_float+0x432>
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	f108 0201 	add.w	r2, r8, #1
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	d10e      	bne.n	8008a96 <_printf_float+0x42a>
 8008a78:	e659      	b.n	800872e <_printf_float+0xc2>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae52 	beq.w	800872e <_printf_float+0xc2>
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a90:	3b01      	subs	r3, #1
 8008a92:	4543      	cmp	r3, r8
 8008a94:	dcf1      	bgt.n	8008a7a <_printf_float+0x40e>
 8008a96:	464b      	mov	r3, r9
 8008a98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a9c:	e6dc      	b.n	8008858 <_printf_float+0x1ec>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	f104 0a1a 	add.w	sl, r4, #26
 8008aa6:	e7f2      	b.n	8008a8e <_printf_float+0x422>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4642      	mov	r2, r8
 8008aac:	e7df      	b.n	8008a6e <_printf_float+0x402>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	464a      	mov	r2, r9
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f43f ae38 	beq.w	800872e <_printf_float+0xc2>
 8008abe:	f108 0801 	add.w	r8, r8, #1
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac6:	1a5b      	subs	r3, r3, r1
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	dcf0      	bgt.n	8008aae <_printf_float+0x442>
 8008acc:	e6fa      	b.n	80088c4 <_printf_float+0x258>
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	f104 0919 	add.w	r9, r4, #25
 8008ad6:	e7f4      	b.n	8008ac2 <_printf_float+0x456>

08008ad8 <_printf_common>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	4616      	mov	r6, r2
 8008ade:	4699      	mov	r9, r3
 8008ae0:	688a      	ldr	r2, [r1, #8]
 8008ae2:	690b      	ldr	r3, [r1, #16]
 8008ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bfb8      	it	lt
 8008aec:	4613      	movlt	r3, r2
 8008aee:	6033      	str	r3, [r6, #0]
 8008af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af4:	4607      	mov	r7, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	b10a      	cbz	r2, 8008afe <_printf_common+0x26>
 8008afa:	3301      	adds	r3, #1
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	0699      	lsls	r1, r3, #26
 8008b02:	bf42      	ittt	mi
 8008b04:	6833      	ldrmi	r3, [r6, #0]
 8008b06:	3302      	addmi	r3, #2
 8008b08:	6033      	strmi	r3, [r6, #0]
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	f015 0506 	ands.w	r5, r5, #6
 8008b10:	d106      	bne.n	8008b20 <_printf_common+0x48>
 8008b12:	f104 0a19 	add.w	sl, r4, #25
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	6832      	ldr	r2, [r6, #0]
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	42ab      	cmp	r3, r5
 8008b1e:	dc26      	bgt.n	8008b6e <_printf_common+0x96>
 8008b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b24:	1e13      	subs	r3, r2, #0
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	2301      	movne	r3, #1
 8008b2c:	0692      	lsls	r2, r2, #26
 8008b2e:	d42b      	bmi.n	8008b88 <_printf_common+0xb0>
 8008b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b34:	4649      	mov	r1, r9
 8008b36:	4638      	mov	r0, r7
 8008b38:	47c0      	blx	r8
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d01e      	beq.n	8008b7c <_printf_common+0xa4>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	68e5      	ldr	r5, [r4, #12]
 8008b42:	6832      	ldr	r2, [r6, #0]
 8008b44:	f003 0306 	and.w	r3, r3, #6
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	bf08      	it	eq
 8008b4c:	1aad      	subeq	r5, r5, r2
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	6922      	ldr	r2, [r4, #16]
 8008b52:	bf0c      	ite	eq
 8008b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b58:	2500      	movne	r5, #0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	bfc4      	itt	gt
 8008b5e:	1a9b      	subgt	r3, r3, r2
 8008b60:	18ed      	addgt	r5, r5, r3
 8008b62:	2600      	movs	r6, #0
 8008b64:	341a      	adds	r4, #26
 8008b66:	42b5      	cmp	r5, r6
 8008b68:	d11a      	bne.n	8008ba0 <_printf_common+0xc8>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e008      	b.n	8008b80 <_printf_common+0xa8>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4652      	mov	r2, sl
 8008b72:	4649      	mov	r1, r9
 8008b74:	4638      	mov	r0, r7
 8008b76:	47c0      	blx	r8
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d103      	bne.n	8008b84 <_printf_common+0xac>
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7c6      	b.n	8008b16 <_printf_common+0x3e>
 8008b88:	18e1      	adds	r1, r4, r3
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	2030      	movs	r0, #48	; 0x30
 8008b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b92:	4422      	add	r2, r4
 8008b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	e7c7      	b.n	8008b30 <_printf_common+0x58>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c0      	blx	r8
 8008baa:	3001      	adds	r0, #1
 8008bac:	d0e6      	beq.n	8008b7c <_printf_common+0xa4>
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7d9      	b.n	8008b66 <_printf_common+0x8e>
	...

08008bb4 <_printf_i>:
 8008bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	7e0f      	ldrb	r7, [r1, #24]
 8008bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bbc:	2f78      	cmp	r7, #120	; 0x78
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bca:	d807      	bhi.n	8008bdc <_printf_i+0x28>
 8008bcc:	2f62      	cmp	r7, #98	; 0x62
 8008bce:	d80a      	bhi.n	8008be6 <_printf_i+0x32>
 8008bd0:	2f00      	cmp	r7, #0
 8008bd2:	f000 80d8 	beq.w	8008d86 <_printf_i+0x1d2>
 8008bd6:	2f58      	cmp	r7, #88	; 0x58
 8008bd8:	f000 80a3 	beq.w	8008d22 <_printf_i+0x16e>
 8008bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be4:	e03a      	b.n	8008c5c <_printf_i+0xa8>
 8008be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bea:	2b15      	cmp	r3, #21
 8008bec:	d8f6      	bhi.n	8008bdc <_printf_i+0x28>
 8008bee:	a101      	add	r1, pc, #4	; (adr r1, 8008bf4 <_printf_i+0x40>)
 8008bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf4:	08008c4d 	.word	0x08008c4d
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008bdd 	.word	0x08008bdd
 8008c00:	08008bdd 	.word	0x08008bdd
 8008c04:	08008bdd 	.word	0x08008bdd
 8008c08:	08008bdd 	.word	0x08008bdd
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bdd 	.word	0x08008bdd
 8008c14:	08008bdd 	.word	0x08008bdd
 8008c18:	08008bdd 	.word	0x08008bdd
 8008c1c:	08008bdd 	.word	0x08008bdd
 8008c20:	08008d6d 	.word	0x08008d6d
 8008c24:	08008c91 	.word	0x08008c91
 8008c28:	08008d4f 	.word	0x08008d4f
 8008c2c:	08008bdd 	.word	0x08008bdd
 8008c30:	08008bdd 	.word	0x08008bdd
 8008c34:	08008d8f 	.word	0x08008d8f
 8008c38:	08008bdd 	.word	0x08008bdd
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008bdd 	.word	0x08008bdd
 8008c44:	08008bdd 	.word	0x08008bdd
 8008c48:	08008d57 	.word	0x08008d57
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	602a      	str	r2, [r5, #0]
 8008c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0a3      	b.n	8008da8 <_printf_i+0x1f4>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	6829      	ldr	r1, [r5, #0]
 8008c64:	0606      	lsls	r6, r0, #24
 8008c66:	f101 0304 	add.w	r3, r1, #4
 8008c6a:	d50a      	bpl.n	8008c82 <_printf_i+0xce>
 8008c6c:	680e      	ldr	r6, [r1, #0]
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	da03      	bge.n	8008c7c <_printf_i+0xc8>
 8008c74:	232d      	movs	r3, #45	; 0x2d
 8008c76:	4276      	negs	r6, r6
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c7c:	485e      	ldr	r0, [pc, #376]	; (8008df8 <_printf_i+0x244>)
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e019      	b.n	8008cb6 <_printf_i+0x102>
 8008c82:	680e      	ldr	r6, [r1, #0]
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c8a:	bf18      	it	ne
 8008c8c:	b236      	sxthne	r6, r6
 8008c8e:	e7ef      	b.n	8008c70 <_printf_i+0xbc>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	6029      	str	r1, [r5, #0]
 8008c98:	0601      	lsls	r1, r0, #24
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0xec>
 8008c9c:	681e      	ldr	r6, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <_printf_i+0xf2>
 8008ca0:	0646      	lsls	r6, r0, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0xe8>
 8008ca4:	881e      	ldrh	r6, [r3, #0]
 8008ca6:	4854      	ldr	r0, [pc, #336]	; (8008df8 <_printf_i+0x244>)
 8008ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8008caa:	bf0c      	ite	eq
 8008cac:	2308      	moveq	r3, #8
 8008cae:	230a      	movne	r3, #10
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb6:	6865      	ldr	r5, [r4, #4]
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	bfa2      	ittt	ge
 8008cbe:	6821      	ldrge	r1, [r4, #0]
 8008cc0:	f021 0104 	bicge.w	r1, r1, #4
 8008cc4:	6021      	strge	r1, [r4, #0]
 8008cc6:	b90e      	cbnz	r6, 8008ccc <_printf_i+0x118>
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d04d      	beq.n	8008d68 <_printf_i+0x1b4>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008cd6:	5dc7      	ldrb	r7, [r0, r7]
 8008cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cdc:	4637      	mov	r7, r6
 8008cde:	42bb      	cmp	r3, r7
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	d9f4      	bls.n	8008cce <_printf_i+0x11a>
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d10b      	bne.n	8008d00 <_printf_i+0x14c>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07de      	lsls	r6, r3, #31
 8008cec:	d508      	bpl.n	8008d00 <_printf_i+0x14c>
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6861      	ldr	r1, [r4, #4]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	bfde      	ittt	le
 8008cf6:	2330      	movle	r3, #48	; 0x30
 8008cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d00:	1b52      	subs	r2, r2, r5
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	f8cd a000 	str.w	sl, [sp]
 8008d08:	464b      	mov	r3, r9
 8008d0a:	aa03      	add	r2, sp, #12
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f7ff fee2 	bl	8008ad8 <_printf_common>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d14c      	bne.n	8008db2 <_printf_i+0x1fe>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b004      	add	sp, #16
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	4835      	ldr	r0, [pc, #212]	; (8008df8 <_printf_i+0x244>)
 8008d24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d28:	6829      	ldr	r1, [r5, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d30:	6029      	str	r1, [r5, #0]
 8008d32:	061d      	lsls	r5, r3, #24
 8008d34:	d514      	bpl.n	8008d60 <_printf_i+0x1ac>
 8008d36:	07df      	lsls	r7, r3, #31
 8008d38:	bf44      	itt	mi
 8008d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d3e:	6023      	strmi	r3, [r4, #0]
 8008d40:	b91e      	cbnz	r6, 8008d4a <_printf_i+0x196>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	f023 0320 	bic.w	r3, r3, #32
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	e7b0      	b.n	8008cb0 <_printf_i+0xfc>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f043 0320 	orr.w	r3, r3, #32
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	2378      	movs	r3, #120	; 0x78
 8008d58:	4828      	ldr	r0, [pc, #160]	; (8008dfc <_printf_i+0x248>)
 8008d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d5e:	e7e3      	b.n	8008d28 <_printf_i+0x174>
 8008d60:	0659      	lsls	r1, r3, #25
 8008d62:	bf48      	it	mi
 8008d64:	b2b6      	uxthmi	r6, r6
 8008d66:	e7e6      	b.n	8008d36 <_printf_i+0x182>
 8008d68:	4615      	mov	r5, r2
 8008d6a:	e7bb      	b.n	8008ce4 <_printf_i+0x130>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	6826      	ldr	r6, [r4, #0]
 8008d70:	6961      	ldr	r1, [r4, #20]
 8008d72:	1d18      	adds	r0, r3, #4
 8008d74:	6028      	str	r0, [r5, #0]
 8008d76:	0635      	lsls	r5, r6, #24
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	d501      	bpl.n	8008d80 <_printf_i+0x1cc>
 8008d7c:	6019      	str	r1, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <_printf_i+0x1d2>
 8008d80:	0670      	lsls	r0, r6, #25
 8008d82:	d5fb      	bpl.n	8008d7c <_printf_i+0x1c8>
 8008d84:	8019      	strh	r1, [r3, #0]
 8008d86:	2300      	movs	r3, #0
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	4615      	mov	r5, r2
 8008d8c:	e7ba      	b.n	8008d04 <_printf_i+0x150>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	602a      	str	r2, [r5, #0]
 8008d94:	681d      	ldr	r5, [r3, #0]
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7f7 fa28 	bl	80001f0 <memchr>
 8008da0:	b108      	cbz	r0, 8008da6 <_printf_i+0x1f2>
 8008da2:	1b40      	subs	r0, r0, r5
 8008da4:	6060      	str	r0, [r4, #4]
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	2300      	movs	r3, #0
 8008dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db0:	e7a8      	b.n	8008d04 <_printf_i+0x150>
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	47d0      	blx	sl
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d0ab      	beq.n	8008d18 <_printf_i+0x164>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	079b      	lsls	r3, r3, #30
 8008dc4:	d413      	bmi.n	8008dee <_printf_i+0x23a>
 8008dc6:	68e0      	ldr	r0, [r4, #12]
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	bfb8      	it	lt
 8008dce:	4618      	movlt	r0, r3
 8008dd0:	e7a4      	b.n	8008d1c <_printf_i+0x168>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	47d0      	blx	sl
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d09b      	beq.n	8008d18 <_printf_i+0x164>
 8008de0:	3501      	adds	r5, #1
 8008de2:	68e3      	ldr	r3, [r4, #12]
 8008de4:	9903      	ldr	r1, [sp, #12]
 8008de6:	1a5b      	subs	r3, r3, r1
 8008de8:	42ab      	cmp	r3, r5
 8008dea:	dcf2      	bgt.n	8008dd2 <_printf_i+0x21e>
 8008dec:	e7eb      	b.n	8008dc6 <_printf_i+0x212>
 8008dee:	2500      	movs	r5, #0
 8008df0:	f104 0619 	add.w	r6, r4, #25
 8008df4:	e7f5      	b.n	8008de2 <_printf_i+0x22e>
 8008df6:	bf00      	nop
 8008df8:	0800d3ba 	.word	0x0800d3ba
 8008dfc:	0800d3cb 	.word	0x0800d3cb

08008e00 <_scanf_float>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b087      	sub	sp, #28
 8008e06:	4617      	mov	r7, r2
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	688b      	ldr	r3, [r1, #8]
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e12:	bf83      	ittte	hi
 8008e14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e18:	195b      	addhi	r3, r3, r5
 8008e1a:	9302      	strhi	r3, [sp, #8]
 8008e1c:	2300      	movls	r3, #0
 8008e1e:	bf86      	itte	hi
 8008e20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e24:	608b      	strhi	r3, [r1, #8]
 8008e26:	9302      	strls	r3, [sp, #8]
 8008e28:	680b      	ldr	r3, [r1, #0]
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e32:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	465e      	mov	r6, fp
 8008e40:	46aa      	mov	sl, r5
 8008e42:	46a9      	mov	r9, r5
 8008e44:	9501      	str	r5, [sp, #4]
 8008e46:	68a2      	ldr	r2, [r4, #8]
 8008e48:	b152      	cbz	r2, 8008e60 <_scanf_float+0x60>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e50:	d864      	bhi.n	8008f1c <_scanf_float+0x11c>
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d83c      	bhi.n	8008ed0 <_scanf_float+0xd0>
 8008e56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e5a:	b2c8      	uxtb	r0, r1
 8008e5c:	280e      	cmp	r0, #14
 8008e5e:	d93a      	bls.n	8008ed6 <_scanf_float+0xd6>
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	d003      	beq.n	8008e6e <_scanf_float+0x6e>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e72:	f1ba 0f01 	cmp.w	sl, #1
 8008e76:	f200 8113 	bhi.w	80090a0 <_scanf_float+0x2a0>
 8008e7a:	455e      	cmp	r6, fp
 8008e7c:	f200 8105 	bhi.w	800908a <_scanf_float+0x28a>
 8008e80:	2501      	movs	r5, #1
 8008e82:	4628      	mov	r0, r5
 8008e84:	b007      	add	sp, #28
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e8e:	2a0d      	cmp	r2, #13
 8008e90:	d8e6      	bhi.n	8008e60 <_scanf_float+0x60>
 8008e92:	a101      	add	r1, pc, #4	; (adr r1, 8008e98 <_scanf_float+0x98>)
 8008e94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e98:	08008fd7 	.word	0x08008fd7
 8008e9c:	08008e61 	.word	0x08008e61
 8008ea0:	08008e61 	.word	0x08008e61
 8008ea4:	08008e61 	.word	0x08008e61
 8008ea8:	08009037 	.word	0x08009037
 8008eac:	0800900f 	.word	0x0800900f
 8008eb0:	08008e61 	.word	0x08008e61
 8008eb4:	08008e61 	.word	0x08008e61
 8008eb8:	08008fe5 	.word	0x08008fe5
 8008ebc:	08008e61 	.word	0x08008e61
 8008ec0:	08008e61 	.word	0x08008e61
 8008ec4:	08008e61 	.word	0x08008e61
 8008ec8:	08008e61 	.word	0x08008e61
 8008ecc:	08008f9d 	.word	0x08008f9d
 8008ed0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ed4:	e7db      	b.n	8008e8e <_scanf_float+0x8e>
 8008ed6:	290e      	cmp	r1, #14
 8008ed8:	d8c2      	bhi.n	8008e60 <_scanf_float+0x60>
 8008eda:	a001      	add	r0, pc, #4	; (adr r0, 8008ee0 <_scanf_float+0xe0>)
 8008edc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ee0:	08008f8f 	.word	0x08008f8f
 8008ee4:	08008e61 	.word	0x08008e61
 8008ee8:	08008f8f 	.word	0x08008f8f
 8008eec:	08009023 	.word	0x08009023
 8008ef0:	08008e61 	.word	0x08008e61
 8008ef4:	08008f3d 	.word	0x08008f3d
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f79 	.word	0x08008f79
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	2b6e      	cmp	r3, #110	; 0x6e
 8008f1e:	d809      	bhi.n	8008f34 <_scanf_float+0x134>
 8008f20:	2b60      	cmp	r3, #96	; 0x60
 8008f22:	d8b2      	bhi.n	8008e8a <_scanf_float+0x8a>
 8008f24:	2b54      	cmp	r3, #84	; 0x54
 8008f26:	d077      	beq.n	8009018 <_scanf_float+0x218>
 8008f28:	2b59      	cmp	r3, #89	; 0x59
 8008f2a:	d199      	bne.n	8008e60 <_scanf_float+0x60>
 8008f2c:	2d07      	cmp	r5, #7
 8008f2e:	d197      	bne.n	8008e60 <_scanf_float+0x60>
 8008f30:	2508      	movs	r5, #8
 8008f32:	e029      	b.n	8008f88 <_scanf_float+0x188>
 8008f34:	2b74      	cmp	r3, #116	; 0x74
 8008f36:	d06f      	beq.n	8009018 <_scanf_float+0x218>
 8008f38:	2b79      	cmp	r3, #121	; 0x79
 8008f3a:	e7f6      	b.n	8008f2a <_scanf_float+0x12a>
 8008f3c:	6821      	ldr	r1, [r4, #0]
 8008f3e:	05c8      	lsls	r0, r1, #23
 8008f40:	d51a      	bpl.n	8008f78 <_scanf_float+0x178>
 8008f42:	9b02      	ldr	r3, [sp, #8]
 8008f44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f48:	6021      	str	r1, [r4, #0]
 8008f4a:	f109 0901 	add.w	r9, r9, #1
 8008f4e:	b11b      	cbz	r3, 8008f58 <_scanf_float+0x158>
 8008f50:	3b01      	subs	r3, #1
 8008f52:	3201      	adds	r2, #1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	60a2      	str	r2, [r4, #8]
 8008f58:	68a3      	ldr	r3, [r4, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	f340 8084 	ble.w	8009078 <_scanf_float+0x278>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	e766      	b.n	8008e46 <_scanf_float+0x46>
 8008f78:	eb1a 0f05 	cmn.w	sl, r5
 8008f7c:	f47f af70 	bne.w	8008e60 <_scanf_float+0x60>
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f86:	6022      	str	r2, [r4, #0]
 8008f88:	f806 3b01 	strb.w	r3, [r6], #1
 8008f8c:	e7e4      	b.n	8008f58 <_scanf_float+0x158>
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	0610      	lsls	r0, r2, #24
 8008f92:	f57f af65 	bpl.w	8008e60 <_scanf_float+0x60>
 8008f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f9a:	e7f4      	b.n	8008f86 <_scanf_float+0x186>
 8008f9c:	f1ba 0f00 	cmp.w	sl, #0
 8008fa0:	d10e      	bne.n	8008fc0 <_scanf_float+0x1c0>
 8008fa2:	f1b9 0f00 	cmp.w	r9, #0
 8008fa6:	d10e      	bne.n	8008fc6 <_scanf_float+0x1c6>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fb2:	d108      	bne.n	8008fc6 <_scanf_float+0x1c6>
 8008fb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	f04f 0a01 	mov.w	sl, #1
 8008fbe:	e7e3      	b.n	8008f88 <_scanf_float+0x188>
 8008fc0:	f1ba 0f02 	cmp.w	sl, #2
 8008fc4:	d055      	beq.n	8009072 <_scanf_float+0x272>
 8008fc6:	2d01      	cmp	r5, #1
 8008fc8:	d002      	beq.n	8008fd0 <_scanf_float+0x1d0>
 8008fca:	2d04      	cmp	r5, #4
 8008fcc:	f47f af48 	bne.w	8008e60 <_scanf_float+0x60>
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	b2ed      	uxtb	r5, r5
 8008fd4:	e7d8      	b.n	8008f88 <_scanf_float+0x188>
 8008fd6:	f1ba 0f01 	cmp.w	sl, #1
 8008fda:	f47f af41 	bne.w	8008e60 <_scanf_float+0x60>
 8008fde:	f04f 0a02 	mov.w	sl, #2
 8008fe2:	e7d1      	b.n	8008f88 <_scanf_float+0x188>
 8008fe4:	b97d      	cbnz	r5, 8009006 <_scanf_float+0x206>
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	f47f af3c 	bne.w	8008e66 <_scanf_float+0x66>
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ff4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ff8:	f47f af39 	bne.w	8008e6e <_scanf_float+0x6e>
 8008ffc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009000:	6022      	str	r2, [r4, #0]
 8009002:	2501      	movs	r5, #1
 8009004:	e7c0      	b.n	8008f88 <_scanf_float+0x188>
 8009006:	2d03      	cmp	r5, #3
 8009008:	d0e2      	beq.n	8008fd0 <_scanf_float+0x1d0>
 800900a:	2d05      	cmp	r5, #5
 800900c:	e7de      	b.n	8008fcc <_scanf_float+0x1cc>
 800900e:	2d02      	cmp	r5, #2
 8009010:	f47f af26 	bne.w	8008e60 <_scanf_float+0x60>
 8009014:	2503      	movs	r5, #3
 8009016:	e7b7      	b.n	8008f88 <_scanf_float+0x188>
 8009018:	2d06      	cmp	r5, #6
 800901a:	f47f af21 	bne.w	8008e60 <_scanf_float+0x60>
 800901e:	2507      	movs	r5, #7
 8009020:	e7b2      	b.n	8008f88 <_scanf_float+0x188>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	0591      	lsls	r1, r2, #22
 8009026:	f57f af1b 	bpl.w	8008e60 <_scanf_float+0x60>
 800902a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800902e:	6022      	str	r2, [r4, #0]
 8009030:	f8cd 9004 	str.w	r9, [sp, #4]
 8009034:	e7a8      	b.n	8008f88 <_scanf_float+0x188>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800903c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009040:	d006      	beq.n	8009050 <_scanf_float+0x250>
 8009042:	0550      	lsls	r0, r2, #21
 8009044:	f57f af0c 	bpl.w	8008e60 <_scanf_float+0x60>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	f43f af0f 	beq.w	8008e6e <_scanf_float+0x6e>
 8009050:	0591      	lsls	r1, r2, #22
 8009052:	bf58      	it	pl
 8009054:	9901      	ldrpl	r1, [sp, #4]
 8009056:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800905a:	bf58      	it	pl
 800905c:	eba9 0101 	subpl.w	r1, r9, r1
 8009060:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009064:	bf58      	it	pl
 8009066:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	e78a      	b.n	8008f88 <_scanf_float+0x188>
 8009072:	f04f 0a03 	mov.w	sl, #3
 8009076:	e787      	b.n	8008f88 <_scanf_float+0x188>
 8009078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800907c:	4639      	mov	r1, r7
 800907e:	4640      	mov	r0, r8
 8009080:	4798      	blx	r3
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f aedf 	beq.w	8008e46 <_scanf_float+0x46>
 8009088:	e6ea      	b.n	8008e60 <_scanf_float+0x60>
 800908a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800908e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009092:	463a      	mov	r2, r7
 8009094:	4640      	mov	r0, r8
 8009096:	4798      	blx	r3
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	3b01      	subs	r3, #1
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	e6ec      	b.n	8008e7a <_scanf_float+0x7a>
 80090a0:	1e6b      	subs	r3, r5, #1
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d825      	bhi.n	80090f2 <_scanf_float+0x2f2>
 80090a6:	2d02      	cmp	r5, #2
 80090a8:	d836      	bhi.n	8009118 <_scanf_float+0x318>
 80090aa:	455e      	cmp	r6, fp
 80090ac:	f67f aee8 	bls.w	8008e80 <_scanf_float+0x80>
 80090b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b8:	463a      	mov	r2, r7
 80090ba:	4640      	mov	r0, r8
 80090bc:	4798      	blx	r3
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	e7f1      	b.n	80090aa <_scanf_float+0x2aa>
 80090c6:	9802      	ldr	r0, [sp, #8]
 80090c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090d0:	9002      	str	r0, [sp, #8]
 80090d2:	463a      	mov	r2, r7
 80090d4:	4640      	mov	r0, r8
 80090d6:	4798      	blx	r3
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	3b01      	subs	r3, #1
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090e2:	fa5f fa8a 	uxtb.w	sl, sl
 80090e6:	f1ba 0f02 	cmp.w	sl, #2
 80090ea:	d1ec      	bne.n	80090c6 <_scanf_float+0x2c6>
 80090ec:	3d03      	subs	r5, #3
 80090ee:	b2ed      	uxtb	r5, r5
 80090f0:	1b76      	subs	r6, r6, r5
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	05da      	lsls	r2, r3, #23
 80090f6:	d52f      	bpl.n	8009158 <_scanf_float+0x358>
 80090f8:	055b      	lsls	r3, r3, #21
 80090fa:	d510      	bpl.n	800911e <_scanf_float+0x31e>
 80090fc:	455e      	cmp	r6, fp
 80090fe:	f67f aebf 	bls.w	8008e80 <_scanf_float+0x80>
 8009102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800910a:	463a      	mov	r2, r7
 800910c:	4640      	mov	r0, r8
 800910e:	4798      	blx	r3
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	3b01      	subs	r3, #1
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	e7f1      	b.n	80090fc <_scanf_float+0x2fc>
 8009118:	46aa      	mov	sl, r5
 800911a:	9602      	str	r6, [sp, #8]
 800911c:	e7df      	b.n	80090de <_scanf_float+0x2de>
 800911e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	2965      	cmp	r1, #101	; 0x65
 8009126:	f103 33ff 	add.w	r3, r3, #4294967295
 800912a:	f106 35ff 	add.w	r5, r6, #4294967295
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	d00c      	beq.n	800914c <_scanf_float+0x34c>
 8009132:	2945      	cmp	r1, #69	; 0x45
 8009134:	d00a      	beq.n	800914c <_scanf_float+0x34c>
 8009136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800913a:	463a      	mov	r2, r7
 800913c:	4640      	mov	r0, r8
 800913e:	4798      	blx	r3
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009146:	3b01      	subs	r3, #1
 8009148:	1eb5      	subs	r5, r6, #2
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009150:	463a      	mov	r2, r7
 8009152:	4640      	mov	r0, r8
 8009154:	4798      	blx	r3
 8009156:	462e      	mov	r6, r5
 8009158:	6825      	ldr	r5, [r4, #0]
 800915a:	f015 0510 	ands.w	r5, r5, #16
 800915e:	d159      	bne.n	8009214 <_scanf_float+0x414>
 8009160:	7035      	strb	r5, [r6, #0]
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916c:	d11b      	bne.n	80091a6 <_scanf_float+0x3a6>
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	454b      	cmp	r3, r9
 8009172:	eba3 0209 	sub.w	r2, r3, r9
 8009176:	d123      	bne.n	80091c0 <_scanf_float+0x3c0>
 8009178:	2200      	movs	r2, #0
 800917a:	4659      	mov	r1, fp
 800917c:	4640      	mov	r0, r8
 800917e:	f000 fecd 	bl	8009f1c <_strtod_r>
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	f012 0f02 	tst.w	r2, #2
 800918a:	ec57 6b10 	vmov	r6, r7, d0
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	d021      	beq.n	80091d6 <_scanf_float+0x3d6>
 8009192:	9903      	ldr	r1, [sp, #12]
 8009194:	1d1a      	adds	r2, r3, #4
 8009196:	600a      	str	r2, [r1, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	e9c3 6700 	strd	r6, r7, [r3]
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60e3      	str	r3, [r4, #12]
 80091a4:	e66d      	b.n	8008e82 <_scanf_float+0x82>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0e5      	beq.n	8009178 <_scanf_float+0x378>
 80091ac:	9905      	ldr	r1, [sp, #20]
 80091ae:	230a      	movs	r3, #10
 80091b0:	462a      	mov	r2, r5
 80091b2:	3101      	adds	r1, #1
 80091b4:	4640      	mov	r0, r8
 80091b6:	f000 ff39 	bl	800a02c <_strtol_r>
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	9e05      	ldr	r6, [sp, #20]
 80091be:	1ac2      	subs	r2, r0, r3
 80091c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091c4:	429e      	cmp	r6, r3
 80091c6:	bf28      	it	cs
 80091c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091cc:	4912      	ldr	r1, [pc, #72]	; (8009218 <_scanf_float+0x418>)
 80091ce:	4630      	mov	r0, r6
 80091d0:	f000 f860 	bl	8009294 <siprintf>
 80091d4:	e7d0      	b.n	8009178 <_scanf_float+0x378>
 80091d6:	9903      	ldr	r1, [sp, #12]
 80091d8:	f012 0f04 	tst.w	r2, #4
 80091dc:	f103 0204 	add.w	r2, r3, #4
 80091e0:	600a      	str	r2, [r1, #0]
 80091e2:	d1d9      	bne.n	8009198 <_scanf_float+0x398>
 80091e4:	f8d3 8000 	ldr.w	r8, [r3]
 80091e8:	ee10 2a10 	vmov	r2, s0
 80091ec:	ee10 0a10 	vmov	r0, s0
 80091f0:	463b      	mov	r3, r7
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fca2 	bl	8000b3c <__aeabi_dcmpun>
 80091f8:	b128      	cbz	r0, 8009206 <_scanf_float+0x406>
 80091fa:	4808      	ldr	r0, [pc, #32]	; (800921c <_scanf_float+0x41c>)
 80091fc:	f000 f810 	bl	8009220 <nanf>
 8009200:	ed88 0a00 	vstr	s0, [r8]
 8009204:	e7cb      	b.n	800919e <_scanf_float+0x39e>
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	f7f7 fcf5 	bl	8000bf8 <__aeabi_d2f>
 800920e:	f8c8 0000 	str.w	r0, [r8]
 8009212:	e7c4      	b.n	800919e <_scanf_float+0x39e>
 8009214:	2500      	movs	r5, #0
 8009216:	e634      	b.n	8008e82 <_scanf_float+0x82>
 8009218:	0800d3dc 	.word	0x0800d3dc
 800921c:	0800d7e8 	.word	0x0800d7e8

08009220 <nanf>:
 8009220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009228 <nanf+0x8>
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	7fc00000 	.word	0x7fc00000

0800922c <sniprintf>:
 800922c:	b40c      	push	{r2, r3}
 800922e:	b530      	push	{r4, r5, lr}
 8009230:	4b17      	ldr	r3, [pc, #92]	; (8009290 <sniprintf+0x64>)
 8009232:	1e0c      	subs	r4, r1, #0
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	b09d      	sub	sp, #116	; 0x74
 8009238:	da08      	bge.n	800924c <sniprintf+0x20>
 800923a:	238b      	movs	r3, #139	; 0x8b
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f04f 30ff 	mov.w	r0, #4294967295
 8009242:	b01d      	add	sp, #116	; 0x74
 8009244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009248:	b002      	add	sp, #8
 800924a:	4770      	bx	lr
 800924c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009250:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009254:	bf14      	ite	ne
 8009256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800925a:	4623      	moveq	r3, r4
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009264:	9002      	str	r0, [sp, #8]
 8009266:	9006      	str	r0, [sp, #24]
 8009268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800926c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800926e:	ab21      	add	r3, sp, #132	; 0x84
 8009270:	a902      	add	r1, sp, #8
 8009272:	4628      	mov	r0, r5
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	f002 ff05 	bl	800c084 <_svfiprintf_r>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	bfbc      	itt	lt
 800927e:	238b      	movlt	r3, #139	; 0x8b
 8009280:	602b      	strlt	r3, [r5, #0]
 8009282:	2c00      	cmp	r4, #0
 8009284:	d0dd      	beq.n	8009242 <sniprintf+0x16>
 8009286:	9b02      	ldr	r3, [sp, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	e7d9      	b.n	8009242 <sniprintf+0x16>
 800928e:	bf00      	nop
 8009290:	20000024 	.word	0x20000024

08009294 <siprintf>:
 8009294:	b40e      	push	{r1, r2, r3}
 8009296:	b500      	push	{lr}
 8009298:	b09c      	sub	sp, #112	; 0x70
 800929a:	ab1d      	add	r3, sp, #116	; 0x74
 800929c:	9002      	str	r0, [sp, #8]
 800929e:	9006      	str	r0, [sp, #24]
 80092a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092a4:	4809      	ldr	r0, [pc, #36]	; (80092cc <siprintf+0x38>)
 80092a6:	9107      	str	r1, [sp, #28]
 80092a8:	9104      	str	r1, [sp, #16]
 80092aa:	4909      	ldr	r1, [pc, #36]	; (80092d0 <siprintf+0x3c>)
 80092ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b0:	9105      	str	r1, [sp, #20]
 80092b2:	6800      	ldr	r0, [r0, #0]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	a902      	add	r1, sp, #8
 80092b8:	f002 fee4 	bl	800c084 <_svfiprintf_r>
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	b01c      	add	sp, #112	; 0x70
 80092c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c8:	b003      	add	sp, #12
 80092ca:	4770      	bx	lr
 80092cc:	20000024 	.word	0x20000024
 80092d0:	ffff0208 	.word	0xffff0208

080092d4 <sulp>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4604      	mov	r4, r0
 80092d8:	460d      	mov	r5, r1
 80092da:	ec45 4b10 	vmov	d0, r4, r5
 80092de:	4616      	mov	r6, r2
 80092e0:	f002 fc2e 	bl	800bb40 <__ulp>
 80092e4:	ec51 0b10 	vmov	r0, r1, d0
 80092e8:	b17e      	cbz	r6, 800930a <sulp+0x36>
 80092ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd09      	ble.n	800930a <sulp+0x36>
 80092f6:	051b      	lsls	r3, r3, #20
 80092f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092fc:	2400      	movs	r4, #0
 80092fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009302:	4622      	mov	r2, r4
 8009304:	462b      	mov	r3, r5
 8009306:	f7f7 f97f 	bl	8000608 <__aeabi_dmul>
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	0000      	movs	r0, r0
	...

08009310 <_strtod_l>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	ed2d 8b02 	vpush	{d8}
 8009318:	b09d      	sub	sp, #116	; 0x74
 800931a:	461f      	mov	r7, r3
 800931c:	2300      	movs	r3, #0
 800931e:	9318      	str	r3, [sp, #96]	; 0x60
 8009320:	4ba2      	ldr	r3, [pc, #648]	; (80095ac <_strtod_l+0x29c>)
 8009322:	9213      	str	r2, [sp, #76]	; 0x4c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	4604      	mov	r4, r0
 800932a:	4618      	mov	r0, r3
 800932c:	4688      	mov	r8, r1
 800932e:	f7f6 ff57 	bl	80001e0 <strlen>
 8009332:	f04f 0a00 	mov.w	sl, #0
 8009336:	4605      	mov	r5, r0
 8009338:	f04f 0b00 	mov.w	fp, #0
 800933c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	2a2b      	cmp	r2, #43	; 0x2b
 8009346:	d04e      	beq.n	80093e6 <_strtod_l+0xd6>
 8009348:	d83b      	bhi.n	80093c2 <_strtod_l+0xb2>
 800934a:	2a0d      	cmp	r2, #13
 800934c:	d834      	bhi.n	80093b8 <_strtod_l+0xa8>
 800934e:	2a08      	cmp	r2, #8
 8009350:	d834      	bhi.n	80093bc <_strtod_l+0xac>
 8009352:	2a00      	cmp	r2, #0
 8009354:	d03e      	beq.n	80093d4 <_strtod_l+0xc4>
 8009356:	2300      	movs	r3, #0
 8009358:	930a      	str	r3, [sp, #40]	; 0x28
 800935a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800935c:	7833      	ldrb	r3, [r6, #0]
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	f040 80b0 	bne.w	80094c4 <_strtod_l+0x1b4>
 8009364:	7873      	ldrb	r3, [r6, #1]
 8009366:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800936a:	2b58      	cmp	r3, #88	; 0x58
 800936c:	d168      	bne.n	8009440 <_strtod_l+0x130>
 800936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	ab18      	add	r3, sp, #96	; 0x60
 8009374:	9702      	str	r7, [sp, #8]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4a8d      	ldr	r2, [pc, #564]	; (80095b0 <_strtod_l+0x2a0>)
 800937a:	ab19      	add	r3, sp, #100	; 0x64
 800937c:	a917      	add	r1, sp, #92	; 0x5c
 800937e:	4620      	mov	r0, r4
 8009380:	f001 fd38 	bl	800adf4 <__gethex>
 8009384:	f010 0707 	ands.w	r7, r0, #7
 8009388:	4605      	mov	r5, r0
 800938a:	d005      	beq.n	8009398 <_strtod_l+0x88>
 800938c:	2f06      	cmp	r7, #6
 800938e:	d12c      	bne.n	80093ea <_strtod_l+0xda>
 8009390:	3601      	adds	r6, #1
 8009392:	2300      	movs	r3, #0
 8009394:	9617      	str	r6, [sp, #92]	; 0x5c
 8009396:	930a      	str	r3, [sp, #40]	; 0x28
 8009398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 8590 	bne.w	8009ec0 <_strtod_l+0xbb0>
 80093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a2:	b1eb      	cbz	r3, 80093e0 <_strtod_l+0xd0>
 80093a4:	4652      	mov	r2, sl
 80093a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093aa:	ec43 2b10 	vmov	d0, r2, r3
 80093ae:	b01d      	add	sp, #116	; 0x74
 80093b0:	ecbd 8b02 	vpop	{d8}
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	2a20      	cmp	r2, #32
 80093ba:	d1cc      	bne.n	8009356 <_strtod_l+0x46>
 80093bc:	3301      	adds	r3, #1
 80093be:	9317      	str	r3, [sp, #92]	; 0x5c
 80093c0:	e7be      	b.n	8009340 <_strtod_l+0x30>
 80093c2:	2a2d      	cmp	r2, #45	; 0x2d
 80093c4:	d1c7      	bne.n	8009356 <_strtod_l+0x46>
 80093c6:	2201      	movs	r2, #1
 80093c8:	920a      	str	r2, [sp, #40]	; 0x28
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1c2      	bne.n	800935a <_strtod_l+0x4a>
 80093d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f040 856e 	bne.w	8009ebc <_strtod_l+0xbac>
 80093e0:	4652      	mov	r2, sl
 80093e2:	465b      	mov	r3, fp
 80093e4:	e7e1      	b.n	80093aa <_strtod_l+0x9a>
 80093e6:	2200      	movs	r2, #0
 80093e8:	e7ee      	b.n	80093c8 <_strtod_l+0xb8>
 80093ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80093ec:	b13a      	cbz	r2, 80093fe <_strtod_l+0xee>
 80093ee:	2135      	movs	r1, #53	; 0x35
 80093f0:	a81a      	add	r0, sp, #104	; 0x68
 80093f2:	f002 fcb0 	bl	800bd56 <__copybits>
 80093f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093f8:	4620      	mov	r0, r4
 80093fa:	f002 f86f 	bl	800b4dc <_Bfree>
 80093fe:	3f01      	subs	r7, #1
 8009400:	2f04      	cmp	r7, #4
 8009402:	d806      	bhi.n	8009412 <_strtod_l+0x102>
 8009404:	e8df f007 	tbb	[pc, r7]
 8009408:	1714030a 	.word	0x1714030a
 800940c:	0a          	.byte	0x0a
 800940d:	00          	.byte	0x00
 800940e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009412:	0728      	lsls	r0, r5, #28
 8009414:	d5c0      	bpl.n	8009398 <_strtod_l+0x88>
 8009416:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800941a:	e7bd      	b.n	8009398 <_strtod_l+0x88>
 800941c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009422:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009426:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800942a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800942e:	e7f0      	b.n	8009412 <_strtod_l+0x102>
 8009430:	f8df b180 	ldr.w	fp, [pc, #384]	; 80095b4 <_strtod_l+0x2a4>
 8009434:	e7ed      	b.n	8009412 <_strtod_l+0x102>
 8009436:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800943a:	f04f 3aff 	mov.w	sl, #4294967295
 800943e:	e7e8      	b.n	8009412 <_strtod_l+0x102>
 8009440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	9217      	str	r2, [sp, #92]	; 0x5c
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b30      	cmp	r3, #48	; 0x30
 800944a:	d0f9      	beq.n	8009440 <_strtod_l+0x130>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0a3      	beq.n	8009398 <_strtod_l+0x88>
 8009450:	2301      	movs	r3, #1
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800945a:	9308      	str	r3, [sp, #32]
 800945c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009460:	464f      	mov	r7, r9
 8009462:	220a      	movs	r2, #10
 8009464:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009466:	7806      	ldrb	r6, [r0, #0]
 8009468:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800946c:	b2d9      	uxtb	r1, r3
 800946e:	2909      	cmp	r1, #9
 8009470:	d92a      	bls.n	80094c8 <_strtod_l+0x1b8>
 8009472:	9905      	ldr	r1, [sp, #20]
 8009474:	462a      	mov	r2, r5
 8009476:	f002 ff1f 	bl	800c2b8 <strncmp>
 800947a:	b398      	cbz	r0, 80094e4 <_strtod_l+0x1d4>
 800947c:	2000      	movs	r0, #0
 800947e:	4632      	mov	r2, r6
 8009480:	463d      	mov	r5, r7
 8009482:	9005      	str	r0, [sp, #20]
 8009484:	4603      	mov	r3, r0
 8009486:	2a65      	cmp	r2, #101	; 0x65
 8009488:	d001      	beq.n	800948e <_strtod_l+0x17e>
 800948a:	2a45      	cmp	r2, #69	; 0x45
 800948c:	d118      	bne.n	80094c0 <_strtod_l+0x1b0>
 800948e:	b91d      	cbnz	r5, 8009498 <_strtod_l+0x188>
 8009490:	9a04      	ldr	r2, [sp, #16]
 8009492:	4302      	orrs	r2, r0
 8009494:	d09e      	beq.n	80093d4 <_strtod_l+0xc4>
 8009496:	2500      	movs	r5, #0
 8009498:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800949c:	f108 0201 	add.w	r2, r8, #1
 80094a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80094a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80094a6:	2a2b      	cmp	r2, #43	; 0x2b
 80094a8:	d075      	beq.n	8009596 <_strtod_l+0x286>
 80094aa:	2a2d      	cmp	r2, #45	; 0x2d
 80094ac:	d07b      	beq.n	80095a6 <_strtod_l+0x296>
 80094ae:	f04f 0c00 	mov.w	ip, #0
 80094b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094b6:	2909      	cmp	r1, #9
 80094b8:	f240 8082 	bls.w	80095c0 <_strtod_l+0x2b0>
 80094bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094c0:	2600      	movs	r6, #0
 80094c2:	e09d      	b.n	8009600 <_strtod_l+0x2f0>
 80094c4:	2300      	movs	r3, #0
 80094c6:	e7c4      	b.n	8009452 <_strtod_l+0x142>
 80094c8:	2f08      	cmp	r7, #8
 80094ca:	bfd8      	it	le
 80094cc:	9907      	ldrle	r1, [sp, #28]
 80094ce:	f100 0001 	add.w	r0, r0, #1
 80094d2:	bfda      	itte	le
 80094d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80094d8:	9307      	strle	r3, [sp, #28]
 80094da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80094de:	3701      	adds	r7, #1
 80094e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80094e2:	e7bf      	b.n	8009464 <_strtod_l+0x154>
 80094e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e6:	195a      	adds	r2, r3, r5
 80094e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80094ea:	5d5a      	ldrb	r2, [r3, r5]
 80094ec:	2f00      	cmp	r7, #0
 80094ee:	d037      	beq.n	8009560 <_strtod_l+0x250>
 80094f0:	9005      	str	r0, [sp, #20]
 80094f2:	463d      	mov	r5, r7
 80094f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d912      	bls.n	8009522 <_strtod_l+0x212>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e7c2      	b.n	8009486 <_strtod_l+0x176>
 8009500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	9217      	str	r2, [sp, #92]	; 0x5c
 8009506:	785a      	ldrb	r2, [r3, #1]
 8009508:	3001      	adds	r0, #1
 800950a:	2a30      	cmp	r2, #48	; 0x30
 800950c:	d0f8      	beq.n	8009500 <_strtod_l+0x1f0>
 800950e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009512:	2b08      	cmp	r3, #8
 8009514:	f200 84d9 	bhi.w	8009eca <_strtod_l+0xbba>
 8009518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800951a:	9005      	str	r0, [sp, #20]
 800951c:	2000      	movs	r0, #0
 800951e:	9308      	str	r3, [sp, #32]
 8009520:	4605      	mov	r5, r0
 8009522:	3a30      	subs	r2, #48	; 0x30
 8009524:	f100 0301 	add.w	r3, r0, #1
 8009528:	d014      	beq.n	8009554 <_strtod_l+0x244>
 800952a:	9905      	ldr	r1, [sp, #20]
 800952c:	4419      	add	r1, r3
 800952e:	9105      	str	r1, [sp, #20]
 8009530:	462b      	mov	r3, r5
 8009532:	eb00 0e05 	add.w	lr, r0, r5
 8009536:	210a      	movs	r1, #10
 8009538:	4573      	cmp	r3, lr
 800953a:	d113      	bne.n	8009564 <_strtod_l+0x254>
 800953c:	182b      	adds	r3, r5, r0
 800953e:	2b08      	cmp	r3, #8
 8009540:	f105 0501 	add.w	r5, r5, #1
 8009544:	4405      	add	r5, r0
 8009546:	dc1c      	bgt.n	8009582 <_strtod_l+0x272>
 8009548:	9907      	ldr	r1, [sp, #28]
 800954a:	230a      	movs	r3, #10
 800954c:	fb03 2301 	mla	r3, r3, r1, r2
 8009550:	9307      	str	r3, [sp, #28]
 8009552:	2300      	movs	r3, #0
 8009554:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009556:	1c51      	adds	r1, r2, #1
 8009558:	9117      	str	r1, [sp, #92]	; 0x5c
 800955a:	7852      	ldrb	r2, [r2, #1]
 800955c:	4618      	mov	r0, r3
 800955e:	e7c9      	b.n	80094f4 <_strtod_l+0x1e4>
 8009560:	4638      	mov	r0, r7
 8009562:	e7d2      	b.n	800950a <_strtod_l+0x1fa>
 8009564:	2b08      	cmp	r3, #8
 8009566:	dc04      	bgt.n	8009572 <_strtod_l+0x262>
 8009568:	9e07      	ldr	r6, [sp, #28]
 800956a:	434e      	muls	r6, r1
 800956c:	9607      	str	r6, [sp, #28]
 800956e:	3301      	adds	r3, #1
 8009570:	e7e2      	b.n	8009538 <_strtod_l+0x228>
 8009572:	f103 0c01 	add.w	ip, r3, #1
 8009576:	f1bc 0f10 	cmp.w	ip, #16
 800957a:	bfd8      	it	le
 800957c:	fb01 f909 	mulle.w	r9, r1, r9
 8009580:	e7f5      	b.n	800956e <_strtod_l+0x25e>
 8009582:	2d10      	cmp	r5, #16
 8009584:	bfdc      	itt	le
 8009586:	230a      	movle	r3, #10
 8009588:	fb03 2909 	mlale	r9, r3, r9, r2
 800958c:	e7e1      	b.n	8009552 <_strtod_l+0x242>
 800958e:	2300      	movs	r3, #0
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	2301      	movs	r3, #1
 8009594:	e77c      	b.n	8009490 <_strtod_l+0x180>
 8009596:	f04f 0c00 	mov.w	ip, #0
 800959a:	f108 0202 	add.w	r2, r8, #2
 800959e:	9217      	str	r2, [sp, #92]	; 0x5c
 80095a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80095a4:	e785      	b.n	80094b2 <_strtod_l+0x1a2>
 80095a6:	f04f 0c01 	mov.w	ip, #1
 80095aa:	e7f6      	b.n	800959a <_strtod_l+0x28a>
 80095ac:	0800d630 	.word	0x0800d630
 80095b0:	0800d3e4 	.word	0x0800d3e4
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095ba:	1c51      	adds	r1, r2, #1
 80095bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80095be:	7852      	ldrb	r2, [r2, #1]
 80095c0:	2a30      	cmp	r2, #48	; 0x30
 80095c2:	d0f9      	beq.n	80095b8 <_strtod_l+0x2a8>
 80095c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80095c8:	2908      	cmp	r1, #8
 80095ca:	f63f af79 	bhi.w	80094c0 <_strtod_l+0x1b0>
 80095ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80095d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095d4:	9206      	str	r2, [sp, #24]
 80095d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095d8:	1c51      	adds	r1, r2, #1
 80095da:	9117      	str	r1, [sp, #92]	; 0x5c
 80095dc:	7852      	ldrb	r2, [r2, #1]
 80095de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80095e2:	2e09      	cmp	r6, #9
 80095e4:	d937      	bls.n	8009656 <_strtod_l+0x346>
 80095e6:	9e06      	ldr	r6, [sp, #24]
 80095e8:	1b89      	subs	r1, r1, r6
 80095ea:	2908      	cmp	r1, #8
 80095ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80095f0:	dc02      	bgt.n	80095f8 <_strtod_l+0x2e8>
 80095f2:	4576      	cmp	r6, lr
 80095f4:	bfa8      	it	ge
 80095f6:	4676      	movge	r6, lr
 80095f8:	f1bc 0f00 	cmp.w	ip, #0
 80095fc:	d000      	beq.n	8009600 <_strtod_l+0x2f0>
 80095fe:	4276      	negs	r6, r6
 8009600:	2d00      	cmp	r5, #0
 8009602:	d14d      	bne.n	80096a0 <_strtod_l+0x390>
 8009604:	9904      	ldr	r1, [sp, #16]
 8009606:	4301      	orrs	r1, r0
 8009608:	f47f aec6 	bne.w	8009398 <_strtod_l+0x88>
 800960c:	2b00      	cmp	r3, #0
 800960e:	f47f aee1 	bne.w	80093d4 <_strtod_l+0xc4>
 8009612:	2a69      	cmp	r2, #105	; 0x69
 8009614:	d027      	beq.n	8009666 <_strtod_l+0x356>
 8009616:	dc24      	bgt.n	8009662 <_strtod_l+0x352>
 8009618:	2a49      	cmp	r2, #73	; 0x49
 800961a:	d024      	beq.n	8009666 <_strtod_l+0x356>
 800961c:	2a4e      	cmp	r2, #78	; 0x4e
 800961e:	f47f aed9 	bne.w	80093d4 <_strtod_l+0xc4>
 8009622:	499f      	ldr	r1, [pc, #636]	; (80098a0 <_strtod_l+0x590>)
 8009624:	a817      	add	r0, sp, #92	; 0x5c
 8009626:	f001 fe3d 	bl	800b2a4 <__match>
 800962a:	2800      	cmp	r0, #0
 800962c:	f43f aed2 	beq.w	80093d4 <_strtod_l+0xc4>
 8009630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b28      	cmp	r3, #40	; 0x28
 8009636:	d12d      	bne.n	8009694 <_strtod_l+0x384>
 8009638:	499a      	ldr	r1, [pc, #616]	; (80098a4 <_strtod_l+0x594>)
 800963a:	aa1a      	add	r2, sp, #104	; 0x68
 800963c:	a817      	add	r0, sp, #92	; 0x5c
 800963e:	f001 fe45 	bl	800b2cc <__hexnan>
 8009642:	2805      	cmp	r0, #5
 8009644:	d126      	bne.n	8009694 <_strtod_l+0x384>
 8009646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009648:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800964c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009650:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009654:	e6a0      	b.n	8009398 <_strtod_l+0x88>
 8009656:	210a      	movs	r1, #10
 8009658:	fb01 2e0e 	mla	lr, r1, lr, r2
 800965c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009660:	e7b9      	b.n	80095d6 <_strtod_l+0x2c6>
 8009662:	2a6e      	cmp	r2, #110	; 0x6e
 8009664:	e7db      	b.n	800961e <_strtod_l+0x30e>
 8009666:	4990      	ldr	r1, [pc, #576]	; (80098a8 <_strtod_l+0x598>)
 8009668:	a817      	add	r0, sp, #92	; 0x5c
 800966a:	f001 fe1b 	bl	800b2a4 <__match>
 800966e:	2800      	cmp	r0, #0
 8009670:	f43f aeb0 	beq.w	80093d4 <_strtod_l+0xc4>
 8009674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009676:	498d      	ldr	r1, [pc, #564]	; (80098ac <_strtod_l+0x59c>)
 8009678:	3b01      	subs	r3, #1
 800967a:	a817      	add	r0, sp, #92	; 0x5c
 800967c:	9317      	str	r3, [sp, #92]	; 0x5c
 800967e:	f001 fe11 	bl	800b2a4 <__match>
 8009682:	b910      	cbnz	r0, 800968a <_strtod_l+0x37a>
 8009684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009686:	3301      	adds	r3, #1
 8009688:	9317      	str	r3, [sp, #92]	; 0x5c
 800968a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80098bc <_strtod_l+0x5ac>
 800968e:	f04f 0a00 	mov.w	sl, #0
 8009692:	e681      	b.n	8009398 <_strtod_l+0x88>
 8009694:	4886      	ldr	r0, [pc, #536]	; (80098b0 <_strtod_l+0x5a0>)
 8009696:	f002 fdf7 	bl	800c288 <nan>
 800969a:	ec5b ab10 	vmov	sl, fp, d0
 800969e:	e67b      	b.n	8009398 <_strtod_l+0x88>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	9807      	ldr	r0, [sp, #28]
 80096a4:	1af3      	subs	r3, r6, r3
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	bf08      	it	eq
 80096aa:	462f      	moveq	r7, r5
 80096ac:	2d10      	cmp	r5, #16
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	46a8      	mov	r8, r5
 80096b2:	bfa8      	it	ge
 80096b4:	f04f 0810 	movge.w	r8, #16
 80096b8:	f7f6 ff2c 	bl	8000514 <__aeabi_ui2d>
 80096bc:	2d09      	cmp	r5, #9
 80096be:	4682      	mov	sl, r0
 80096c0:	468b      	mov	fp, r1
 80096c2:	dd13      	ble.n	80096ec <_strtod_l+0x3dc>
 80096c4:	4b7b      	ldr	r3, [pc, #492]	; (80098b4 <_strtod_l+0x5a4>)
 80096c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096ce:	f7f6 ff9b 	bl	8000608 <__aeabi_dmul>
 80096d2:	4682      	mov	sl, r0
 80096d4:	4648      	mov	r0, r9
 80096d6:	468b      	mov	fp, r1
 80096d8:	f7f6 ff1c 	bl	8000514 <__aeabi_ui2d>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fdda 	bl	800029c <__adddf3>
 80096e8:	4682      	mov	sl, r0
 80096ea:	468b      	mov	fp, r1
 80096ec:	2d0f      	cmp	r5, #15
 80096ee:	dc38      	bgt.n	8009762 <_strtod_l+0x452>
 80096f0:	9b06      	ldr	r3, [sp, #24]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f43f ae50 	beq.w	8009398 <_strtod_l+0x88>
 80096f8:	dd24      	ble.n	8009744 <_strtod_l+0x434>
 80096fa:	2b16      	cmp	r3, #22
 80096fc:	dc0b      	bgt.n	8009716 <_strtod_l+0x406>
 80096fe:	496d      	ldr	r1, [pc, #436]	; (80098b4 <_strtod_l+0x5a4>)
 8009700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009708:	4652      	mov	r2, sl
 800970a:	465b      	mov	r3, fp
 800970c:	f7f6 ff7c 	bl	8000608 <__aeabi_dmul>
 8009710:	4682      	mov	sl, r0
 8009712:	468b      	mov	fp, r1
 8009714:	e640      	b.n	8009398 <_strtod_l+0x88>
 8009716:	9a06      	ldr	r2, [sp, #24]
 8009718:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800971c:	4293      	cmp	r3, r2
 800971e:	db20      	blt.n	8009762 <_strtod_l+0x452>
 8009720:	4c64      	ldr	r4, [pc, #400]	; (80098b4 <_strtod_l+0x5a4>)
 8009722:	f1c5 050f 	rsb	r5, r5, #15
 8009726:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800972a:	4652      	mov	r2, sl
 800972c:	465b      	mov	r3, fp
 800972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009732:	f7f6 ff69 	bl	8000608 <__aeabi_dmul>
 8009736:	9b06      	ldr	r3, [sp, #24]
 8009738:	1b5d      	subs	r5, r3, r5
 800973a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800973e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009742:	e7e3      	b.n	800970c <_strtod_l+0x3fc>
 8009744:	9b06      	ldr	r3, [sp, #24]
 8009746:	3316      	adds	r3, #22
 8009748:	db0b      	blt.n	8009762 <_strtod_l+0x452>
 800974a:	9b05      	ldr	r3, [sp, #20]
 800974c:	1b9e      	subs	r6, r3, r6
 800974e:	4b59      	ldr	r3, [pc, #356]	; (80098b4 <_strtod_l+0x5a4>)
 8009750:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009754:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	f7f7 f87e 	bl	800085c <__aeabi_ddiv>
 8009760:	e7d6      	b.n	8009710 <_strtod_l+0x400>
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	eba5 0808 	sub.w	r8, r5, r8
 8009768:	4498      	add	r8, r3
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	dd74      	ble.n	800985a <_strtod_l+0x54a>
 8009770:	f018 030f 	ands.w	r3, r8, #15
 8009774:	d00a      	beq.n	800978c <_strtod_l+0x47c>
 8009776:	494f      	ldr	r1, [pc, #316]	; (80098b4 <_strtod_l+0x5a4>)
 8009778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800977c:	4652      	mov	r2, sl
 800977e:	465b      	mov	r3, fp
 8009780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009784:	f7f6 ff40 	bl	8000608 <__aeabi_dmul>
 8009788:	4682      	mov	sl, r0
 800978a:	468b      	mov	fp, r1
 800978c:	f038 080f 	bics.w	r8, r8, #15
 8009790:	d04f      	beq.n	8009832 <_strtod_l+0x522>
 8009792:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009796:	dd22      	ble.n	80097de <_strtod_l+0x4ce>
 8009798:	2500      	movs	r5, #0
 800979a:	462e      	mov	r6, r5
 800979c:	9507      	str	r5, [sp, #28]
 800979e:	9505      	str	r5, [sp, #20]
 80097a0:	2322      	movs	r3, #34	; 0x22
 80097a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80098bc <_strtod_l+0x5ac>
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	f04f 0a00 	mov.w	sl, #0
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f43f adf2 	beq.w	8009398 <_strtod_l+0x88>
 80097b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097b6:	4620      	mov	r0, r4
 80097b8:	f001 fe90 	bl	800b4dc <_Bfree>
 80097bc:	9905      	ldr	r1, [sp, #20]
 80097be:	4620      	mov	r0, r4
 80097c0:	f001 fe8c 	bl	800b4dc <_Bfree>
 80097c4:	4631      	mov	r1, r6
 80097c6:	4620      	mov	r0, r4
 80097c8:	f001 fe88 	bl	800b4dc <_Bfree>
 80097cc:	9907      	ldr	r1, [sp, #28]
 80097ce:	4620      	mov	r0, r4
 80097d0:	f001 fe84 	bl	800b4dc <_Bfree>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4620      	mov	r0, r4
 80097d8:	f001 fe80 	bl	800b4dc <_Bfree>
 80097dc:	e5dc      	b.n	8009398 <_strtod_l+0x88>
 80097de:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <_strtod_l+0x5a8>)
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	2300      	movs	r3, #0
 80097e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	4699      	mov	r9, r3
 80097ee:	f1b8 0f01 	cmp.w	r8, #1
 80097f2:	dc21      	bgt.n	8009838 <_strtod_l+0x528>
 80097f4:	b10b      	cbz	r3, 80097fa <_strtod_l+0x4ea>
 80097f6:	4682      	mov	sl, r0
 80097f8:	468b      	mov	fp, r1
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <_strtod_l+0x5a8>)
 80097fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009800:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009804:	4652      	mov	r2, sl
 8009806:	465b      	mov	r3, fp
 8009808:	e9d9 0100 	ldrd	r0, r1, [r9]
 800980c:	f7f6 fefc 	bl	8000608 <__aeabi_dmul>
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <_strtod_l+0x5ac>)
 8009812:	460a      	mov	r2, r1
 8009814:	400b      	ands	r3, r1
 8009816:	492a      	ldr	r1, [pc, #168]	; (80098c0 <_strtod_l+0x5b0>)
 8009818:	428b      	cmp	r3, r1
 800981a:	4682      	mov	sl, r0
 800981c:	d8bc      	bhi.n	8009798 <_strtod_l+0x488>
 800981e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009822:	428b      	cmp	r3, r1
 8009824:	bf86      	itte	hi
 8009826:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80098c4 <_strtod_l+0x5b4>
 800982a:	f04f 3aff 	movhi.w	sl, #4294967295
 800982e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009832:	2300      	movs	r3, #0
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	e084      	b.n	8009942 <_strtod_l+0x632>
 8009838:	f018 0f01 	tst.w	r8, #1
 800983c:	d005      	beq.n	800984a <_strtod_l+0x53a>
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fee0 	bl	8000608 <__aeabi_dmul>
 8009848:	2301      	movs	r3, #1
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	3208      	adds	r2, #8
 800984e:	f109 0901 	add.w	r9, r9, #1
 8009852:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009856:	9204      	str	r2, [sp, #16]
 8009858:	e7c9      	b.n	80097ee <_strtod_l+0x4de>
 800985a:	d0ea      	beq.n	8009832 <_strtod_l+0x522>
 800985c:	f1c8 0800 	rsb	r8, r8, #0
 8009860:	f018 020f 	ands.w	r2, r8, #15
 8009864:	d00a      	beq.n	800987c <_strtod_l+0x56c>
 8009866:	4b13      	ldr	r3, [pc, #76]	; (80098b4 <_strtod_l+0x5a4>)
 8009868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986c:	4650      	mov	r0, sl
 800986e:	4659      	mov	r1, fp
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7f6 fff2 	bl	800085c <__aeabi_ddiv>
 8009878:	4682      	mov	sl, r0
 800987a:	468b      	mov	fp, r1
 800987c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009880:	d0d7      	beq.n	8009832 <_strtod_l+0x522>
 8009882:	f1b8 0f1f 	cmp.w	r8, #31
 8009886:	dd1f      	ble.n	80098c8 <_strtod_l+0x5b8>
 8009888:	2500      	movs	r5, #0
 800988a:	462e      	mov	r6, r5
 800988c:	9507      	str	r5, [sp, #28]
 800988e:	9505      	str	r5, [sp, #20]
 8009890:	2322      	movs	r3, #34	; 0x22
 8009892:	f04f 0a00 	mov.w	sl, #0
 8009896:	f04f 0b00 	mov.w	fp, #0
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	e786      	b.n	80097ac <_strtod_l+0x49c>
 800989e:	bf00      	nop
 80098a0:	0800d3b5 	.word	0x0800d3b5
 80098a4:	0800d3f8 	.word	0x0800d3f8
 80098a8:	0800d3ad 	.word	0x0800d3ad
 80098ac:	0800d53c 	.word	0x0800d53c
 80098b0:	0800d7e8 	.word	0x0800d7e8
 80098b4:	0800d6c8 	.word	0x0800d6c8
 80098b8:	0800d6a0 	.word	0x0800d6a0
 80098bc:	7ff00000 	.word	0x7ff00000
 80098c0:	7ca00000 	.word	0x7ca00000
 80098c4:	7fefffff 	.word	0x7fefffff
 80098c8:	f018 0310 	ands.w	r3, r8, #16
 80098cc:	bf18      	it	ne
 80098ce:	236a      	movne	r3, #106	; 0x6a
 80098d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009c80 <_strtod_l+0x970>
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	4650      	mov	r0, sl
 80098d8:	4659      	mov	r1, fp
 80098da:	2300      	movs	r3, #0
 80098dc:	f018 0f01 	tst.w	r8, #1
 80098e0:	d004      	beq.n	80098ec <_strtod_l+0x5dc>
 80098e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098e6:	f7f6 fe8f 	bl	8000608 <__aeabi_dmul>
 80098ea:	2301      	movs	r3, #1
 80098ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80098f0:	f109 0908 	add.w	r9, r9, #8
 80098f4:	d1f2      	bne.n	80098dc <_strtod_l+0x5cc>
 80098f6:	b10b      	cbz	r3, 80098fc <_strtod_l+0x5ec>
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	9b04      	ldr	r3, [sp, #16]
 80098fe:	b1c3      	cbz	r3, 8009932 <_strtod_l+0x622>
 8009900:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009904:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009908:	2b00      	cmp	r3, #0
 800990a:	4659      	mov	r1, fp
 800990c:	dd11      	ble.n	8009932 <_strtod_l+0x622>
 800990e:	2b1f      	cmp	r3, #31
 8009910:	f340 8124 	ble.w	8009b5c <_strtod_l+0x84c>
 8009914:	2b34      	cmp	r3, #52	; 0x34
 8009916:	bfde      	ittt	le
 8009918:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800991c:	f04f 33ff 	movle.w	r3, #4294967295
 8009920:	fa03 f202 	lslle.w	r2, r3, r2
 8009924:	f04f 0a00 	mov.w	sl, #0
 8009928:	bfcc      	ite	gt
 800992a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800992e:	ea02 0b01 	andle.w	fp, r2, r1
 8009932:	2200      	movs	r2, #0
 8009934:	2300      	movs	r3, #0
 8009936:	4650      	mov	r0, sl
 8009938:	4659      	mov	r1, fp
 800993a:	f7f7 f8cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800993e:	2800      	cmp	r0, #0
 8009940:	d1a2      	bne.n	8009888 <_strtod_l+0x578>
 8009942:	9b07      	ldr	r3, [sp, #28]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	9908      	ldr	r1, [sp, #32]
 8009948:	462b      	mov	r3, r5
 800994a:	463a      	mov	r2, r7
 800994c:	4620      	mov	r0, r4
 800994e:	f001 fe2d 	bl	800b5ac <__s2b>
 8009952:	9007      	str	r0, [sp, #28]
 8009954:	2800      	cmp	r0, #0
 8009956:	f43f af1f 	beq.w	8009798 <_strtod_l+0x488>
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	1b9e      	subs	r6, r3, r6
 800995e:	9b06      	ldr	r3, [sp, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfb4      	ite	lt
 8009964:	4633      	movlt	r3, r6
 8009966:	2300      	movge	r3, #0
 8009968:	930c      	str	r3, [sp, #48]	; 0x30
 800996a:	9b06      	ldr	r3, [sp, #24]
 800996c:	2500      	movs	r5, #0
 800996e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009972:	9312      	str	r3, [sp, #72]	; 0x48
 8009974:	462e      	mov	r6, r5
 8009976:	9b07      	ldr	r3, [sp, #28]
 8009978:	4620      	mov	r0, r4
 800997a:	6859      	ldr	r1, [r3, #4]
 800997c:	f001 fd6e 	bl	800b45c <_Balloc>
 8009980:	9005      	str	r0, [sp, #20]
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f af0c 	beq.w	80097a0 <_strtod_l+0x490>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	3202      	adds	r2, #2
 800998e:	f103 010c 	add.w	r1, r3, #12
 8009992:	0092      	lsls	r2, r2, #2
 8009994:	300c      	adds	r0, #12
 8009996:	f001 fd53 	bl	800b440 <memcpy>
 800999a:	ec4b ab10 	vmov	d0, sl, fp
 800999e:	aa1a      	add	r2, sp, #104	; 0x68
 80099a0:	a919      	add	r1, sp, #100	; 0x64
 80099a2:	4620      	mov	r0, r4
 80099a4:	f002 f948 	bl	800bc38 <__d2b>
 80099a8:	ec4b ab18 	vmov	d8, sl, fp
 80099ac:	9018      	str	r0, [sp, #96]	; 0x60
 80099ae:	2800      	cmp	r0, #0
 80099b0:	f43f aef6 	beq.w	80097a0 <_strtod_l+0x490>
 80099b4:	2101      	movs	r1, #1
 80099b6:	4620      	mov	r0, r4
 80099b8:	f001 fe92 	bl	800b6e0 <__i2b>
 80099bc:	4606      	mov	r6, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	f43f aeee 	beq.w	80097a0 <_strtod_l+0x490>
 80099c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099c6:	9904      	ldr	r1, [sp, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfab      	itete	ge
 80099cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80099ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80099d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80099d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80099d6:	bfac      	ite	ge
 80099d8:	eb03 0902 	addge.w	r9, r3, r2
 80099dc:	1ad7      	sublt	r7, r2, r3
 80099de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099e0:	eba3 0801 	sub.w	r8, r3, r1
 80099e4:	4490      	add	r8, r2
 80099e6:	4ba1      	ldr	r3, [pc, #644]	; (8009c6c <_strtod_l+0x95c>)
 80099e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80099ec:	4598      	cmp	r8, r3
 80099ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099f2:	f280 80c7 	bge.w	8009b84 <_strtod_l+0x874>
 80099f6:	eba3 0308 	sub.w	r3, r3, r8
 80099fa:	2b1f      	cmp	r3, #31
 80099fc:	eba2 0203 	sub.w	r2, r2, r3
 8009a00:	f04f 0101 	mov.w	r1, #1
 8009a04:	f300 80b1 	bgt.w	8009b6a <_strtod_l+0x85a>
 8009a08:	fa01 f303 	lsl.w	r3, r1, r3
 8009a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	eb09 0802 	add.w	r8, r9, r2
 8009a16:	9b04      	ldr	r3, [sp, #16]
 8009a18:	45c1      	cmp	r9, r8
 8009a1a:	4417      	add	r7, r2
 8009a1c:	441f      	add	r7, r3
 8009a1e:	464b      	mov	r3, r9
 8009a20:	bfa8      	it	ge
 8009a22:	4643      	movge	r3, r8
 8009a24:	42bb      	cmp	r3, r7
 8009a26:	bfa8      	it	ge
 8009a28:	463b      	movge	r3, r7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfc2      	ittt	gt
 8009a2e:	eba8 0803 	subgt.w	r8, r8, r3
 8009a32:	1aff      	subgt	r7, r7, r3
 8009a34:	eba9 0903 	subgt.w	r9, r9, r3
 8009a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd17      	ble.n	8009a6e <_strtod_l+0x75e>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	461a      	mov	r2, r3
 8009a42:	4620      	mov	r0, r4
 8009a44:	f001 ff0c 	bl	800b860 <__pow5mult>
 8009a48:	4606      	mov	r6, r0
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f aea8 	beq.w	80097a0 <_strtod_l+0x490>
 8009a50:	4601      	mov	r1, r0
 8009a52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a54:	4620      	mov	r0, r4
 8009a56:	f001 fe59 	bl	800b70c <__multiply>
 8009a5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f43f ae9f 	beq.w	80097a0 <_strtod_l+0x490>
 8009a62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a64:	4620      	mov	r0, r4
 8009a66:	f001 fd39 	bl	800b4dc <_Bfree>
 8009a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a6c:	9318      	str	r3, [sp, #96]	; 0x60
 8009a6e:	f1b8 0f00 	cmp.w	r8, #0
 8009a72:	f300 808c 	bgt.w	8009b8e <_strtod_l+0x87e>
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dd08      	ble.n	8009a8e <_strtod_l+0x77e>
 8009a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a7e:	9905      	ldr	r1, [sp, #20]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f001 feed 	bl	800b860 <__pow5mult>
 8009a86:	9005      	str	r0, [sp, #20]
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f43f ae89 	beq.w	80097a0 <_strtod_l+0x490>
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	dd08      	ble.n	8009aa4 <_strtod_l+0x794>
 8009a92:	9905      	ldr	r1, [sp, #20]
 8009a94:	463a      	mov	r2, r7
 8009a96:	4620      	mov	r0, r4
 8009a98:	f001 ff3c 	bl	800b914 <__lshift>
 8009a9c:	9005      	str	r0, [sp, #20]
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f ae7e 	beq.w	80097a0 <_strtod_l+0x490>
 8009aa4:	f1b9 0f00 	cmp.w	r9, #0
 8009aa8:	dd08      	ble.n	8009abc <_strtod_l+0x7ac>
 8009aaa:	4631      	mov	r1, r6
 8009aac:	464a      	mov	r2, r9
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f001 ff30 	bl	800b914 <__lshift>
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f43f ae72 	beq.w	80097a0 <_strtod_l+0x490>
 8009abc:	9a05      	ldr	r2, [sp, #20]
 8009abe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f001 ffb3 	bl	800ba2c <__mdiff>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f43f ae69 	beq.w	80097a0 <_strtod_l+0x490>
 8009ace:	68c3      	ldr	r3, [r0, #12]
 8009ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60c3      	str	r3, [r0, #12]
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	f001 ff8c 	bl	800b9f4 <__mcmp>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	da60      	bge.n	8009ba2 <_strtod_l+0x892>
 8009ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ae6:	f040 8082 	bne.w	8009bee <_strtod_l+0x8de>
 8009aea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d17d      	bne.n	8009bee <_strtod_l+0x8de>
 8009af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009af6:	0d1b      	lsrs	r3, r3, #20
 8009af8:	051b      	lsls	r3, r3, #20
 8009afa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009afe:	d976      	bls.n	8009bee <_strtod_l+0x8de>
 8009b00:	696b      	ldr	r3, [r5, #20]
 8009b02:	b913      	cbnz	r3, 8009b0a <_strtod_l+0x7fa>
 8009b04:	692b      	ldr	r3, [r5, #16]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	dd71      	ble.n	8009bee <_strtod_l+0x8de>
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f001 ff00 	bl	800b914 <__lshift>
 8009b14:	4631      	mov	r1, r6
 8009b16:	4605      	mov	r5, r0
 8009b18:	f001 ff6c 	bl	800b9f4 <__mcmp>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	dd66      	ble.n	8009bee <_strtod_l+0x8de>
 8009b20:	9904      	ldr	r1, [sp, #16]
 8009b22:	4a53      	ldr	r2, [pc, #332]	; (8009c70 <_strtod_l+0x960>)
 8009b24:	465b      	mov	r3, fp
 8009b26:	2900      	cmp	r1, #0
 8009b28:	f000 8081 	beq.w	8009c2e <_strtod_l+0x91e>
 8009b2c:	ea02 010b 	and.w	r1, r2, fp
 8009b30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b34:	dc7b      	bgt.n	8009c2e <_strtod_l+0x91e>
 8009b36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b3a:	f77f aea9 	ble.w	8009890 <_strtod_l+0x580>
 8009b3e:	4b4d      	ldr	r3, [pc, #308]	; (8009c74 <_strtod_l+0x964>)
 8009b40:	4650      	mov	r0, sl
 8009b42:	4659      	mov	r1, fp
 8009b44:	2200      	movs	r2, #0
 8009b46:	f7f6 fd5f 	bl	8000608 <__aeabi_dmul>
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	bf08      	it	eq
 8009b50:	2322      	moveq	r3, #34	; 0x22
 8009b52:	4682      	mov	sl, r0
 8009b54:	468b      	mov	fp, r1
 8009b56:	bf08      	it	eq
 8009b58:	6023      	streq	r3, [r4, #0]
 8009b5a:	e62b      	b.n	80097b4 <_strtod_l+0x4a4>
 8009b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	ea03 0a0a 	and.w	sl, r3, sl
 8009b68:	e6e3      	b.n	8009932 <_strtod_l+0x622>
 8009b6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b7a:	fa01 f308 	lsl.w	r3, r1, r8
 8009b7e:	9308      	str	r3, [sp, #32]
 8009b80:	910d      	str	r1, [sp, #52]	; 0x34
 8009b82:	e746      	b.n	8009a12 <_strtod_l+0x702>
 8009b84:	2300      	movs	r3, #0
 8009b86:	9308      	str	r3, [sp, #32]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b8c:	e741      	b.n	8009a12 <_strtod_l+0x702>
 8009b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b90:	4642      	mov	r2, r8
 8009b92:	4620      	mov	r0, r4
 8009b94:	f001 febe 	bl	800b914 <__lshift>
 8009b98:	9018      	str	r0, [sp, #96]	; 0x60
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f47f af6b 	bne.w	8009a76 <_strtod_l+0x766>
 8009ba0:	e5fe      	b.n	80097a0 <_strtod_l+0x490>
 8009ba2:	465f      	mov	r7, fp
 8009ba4:	d16e      	bne.n	8009c84 <_strtod_l+0x974>
 8009ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bac:	b342      	cbz	r2, 8009c00 <_strtod_l+0x8f0>
 8009bae:	4a32      	ldr	r2, [pc, #200]	; (8009c78 <_strtod_l+0x968>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d128      	bne.n	8009c06 <_strtod_l+0x8f6>
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	4651      	mov	r1, sl
 8009bb8:	b1eb      	cbz	r3, 8009bf6 <_strtod_l+0x8e6>
 8009bba:	4b2d      	ldr	r3, [pc, #180]	; (8009c70 <_strtod_l+0x960>)
 8009bbc:	403b      	ands	r3, r7
 8009bbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	d819      	bhi.n	8009bfc <_strtod_l+0x8ec>
 8009bc8:	0d1b      	lsrs	r3, r3, #20
 8009bca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bce:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	d117      	bne.n	8009c06 <_strtod_l+0x8f6>
 8009bd6:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <_strtod_l+0x96c>)
 8009bd8:	429f      	cmp	r7, r3
 8009bda:	d102      	bne.n	8009be2 <_strtod_l+0x8d2>
 8009bdc:	3101      	adds	r1, #1
 8009bde:	f43f addf 	beq.w	80097a0 <_strtod_l+0x490>
 8009be2:	4b23      	ldr	r3, [pc, #140]	; (8009c70 <_strtod_l+0x960>)
 8009be4:	403b      	ands	r3, r7
 8009be6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009bea:	f04f 0a00 	mov.w	sl, #0
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1a4      	bne.n	8009b3e <_strtod_l+0x82e>
 8009bf4:	e5de      	b.n	80097b4 <_strtod_l+0x4a4>
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfa:	e7ea      	b.n	8009bd2 <_strtod_l+0x8c2>
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	e7e8      	b.n	8009bd2 <_strtod_l+0x8c2>
 8009c00:	ea53 030a 	orrs.w	r3, r3, sl
 8009c04:	d08c      	beq.n	8009b20 <_strtod_l+0x810>
 8009c06:	9b08      	ldr	r3, [sp, #32]
 8009c08:	b1db      	cbz	r3, 8009c42 <_strtod_l+0x932>
 8009c0a:	423b      	tst	r3, r7
 8009c0c:	d0ef      	beq.n	8009bee <_strtod_l+0x8de>
 8009c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	4650      	mov	r0, sl
 8009c14:	4659      	mov	r1, fp
 8009c16:	b1c3      	cbz	r3, 8009c4a <_strtod_l+0x93a>
 8009c18:	f7ff fb5c 	bl	80092d4 <sulp>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	ec51 0b18 	vmov	r0, r1, d8
 8009c24:	f7f6 fb3a 	bl	800029c <__adddf3>
 8009c28:	4682      	mov	sl, r0
 8009c2a:	468b      	mov	fp, r1
 8009c2c:	e7df      	b.n	8009bee <_strtod_l+0x8de>
 8009c2e:	4013      	ands	r3, r2
 8009c30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c40:	e7d5      	b.n	8009bee <_strtod_l+0x8de>
 8009c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c44:	ea13 0f0a 	tst.w	r3, sl
 8009c48:	e7e0      	b.n	8009c0c <_strtod_l+0x8fc>
 8009c4a:	f7ff fb43 	bl	80092d4 <sulp>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	ec51 0b18 	vmov	r0, r1, d8
 8009c56:	f7f6 fb1f 	bl	8000298 <__aeabi_dsub>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4682      	mov	sl, r0
 8009c60:	468b      	mov	fp, r1
 8009c62:	f7f6 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d0c1      	beq.n	8009bee <_strtod_l+0x8de>
 8009c6a:	e611      	b.n	8009890 <_strtod_l+0x580>
 8009c6c:	fffffc02 	.word	0xfffffc02
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	39500000 	.word	0x39500000
 8009c78:	000fffff 	.word	0x000fffff
 8009c7c:	7fefffff 	.word	0x7fefffff
 8009c80:	0800d410 	.word	0x0800d410
 8009c84:	4631      	mov	r1, r6
 8009c86:	4628      	mov	r0, r5
 8009c88:	f002 f832 	bl	800bcf0 <__ratio>
 8009c8c:	ec59 8b10 	vmov	r8, r9, d0
 8009c90:	ee10 0a10 	vmov	r0, s0
 8009c94:	2200      	movs	r2, #0
 8009c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 ff30 	bl	8000b00 <__aeabi_dcmple>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d07a      	beq.n	8009d9a <_strtod_l+0xa8a>
 8009ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d04a      	beq.n	8009d40 <_strtod_l+0xa30>
 8009caa:	4b95      	ldr	r3, [pc, #596]	; (8009f00 <_strtod_l+0xbf0>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f00 <_strtod_l+0xbf0>
 8009cb6:	f04f 0800 	mov.w	r8, #0
 8009cba:	4b92      	ldr	r3, [pc, #584]	; (8009f04 <_strtod_l+0xbf4>)
 8009cbc:	403b      	ands	r3, r7
 8009cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cc2:	4b91      	ldr	r3, [pc, #580]	; (8009f08 <_strtod_l+0xbf8>)
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	f040 80b0 	bne.w	8009e2a <_strtod_l+0xb1a>
 8009cca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009cd2:	ec4b ab10 	vmov	d0, sl, fp
 8009cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cda:	f001 ff31 	bl	800bb40 <__ulp>
 8009cde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ce2:	ec53 2b10 	vmov	r2, r3, d0
 8009ce6:	f7f6 fc8f 	bl	8000608 <__aeabi_dmul>
 8009cea:	4652      	mov	r2, sl
 8009cec:	465b      	mov	r3, fp
 8009cee:	f7f6 fad5 	bl	800029c <__adddf3>
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4983      	ldr	r1, [pc, #524]	; (8009f04 <_strtod_l+0xbf4>)
 8009cf6:	4a85      	ldr	r2, [pc, #532]	; (8009f0c <_strtod_l+0xbfc>)
 8009cf8:	4019      	ands	r1, r3
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	d960      	bls.n	8009dc2 <_strtod_l+0xab2>
 8009d00:	ee18 3a90 	vmov	r3, s17
 8009d04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d104      	bne.n	8009d16 <_strtod_l+0xa06>
 8009d0c:	ee18 3a10 	vmov	r3, s16
 8009d10:	3301      	adds	r3, #1
 8009d12:	f43f ad45 	beq.w	80097a0 <_strtod_l+0x490>
 8009d16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009f18 <_strtod_l+0xc08>
 8009d1a:	f04f 3aff 	mov.w	sl, #4294967295
 8009d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 fbdb 	bl	800b4dc <_Bfree>
 8009d26:	9905      	ldr	r1, [sp, #20]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f001 fbd7 	bl	800b4dc <_Bfree>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 fbd3 	bl	800b4dc <_Bfree>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f001 fbcf 	bl	800b4dc <_Bfree>
 8009d3e:	e61a      	b.n	8009976 <_strtod_l+0x666>
 8009d40:	f1ba 0f00 	cmp.w	sl, #0
 8009d44:	d11b      	bne.n	8009d7e <_strtod_l+0xa6e>
 8009d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d4a:	b9f3      	cbnz	r3, 8009d8a <_strtod_l+0xa7a>
 8009d4c:	4b6c      	ldr	r3, [pc, #432]	; (8009f00 <_strtod_l+0xbf0>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	4640      	mov	r0, r8
 8009d52:	4649      	mov	r1, r9
 8009d54:	f7f6 feca 	bl	8000aec <__aeabi_dcmplt>
 8009d58:	b9d0      	cbnz	r0, 8009d90 <_strtod_l+0xa80>
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	4b6c      	ldr	r3, [pc, #432]	; (8009f10 <_strtod_l+0xc00>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	f7f6 fc51 	bl	8000608 <__aeabi_dmul>
 8009d66:	4680      	mov	r8, r0
 8009d68:	4689      	mov	r9, r1
 8009d6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009d72:	9315      	str	r3, [sp, #84]	; 0x54
 8009d74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d7c:	e79d      	b.n	8009cba <_strtod_l+0x9aa>
 8009d7e:	f1ba 0f01 	cmp.w	sl, #1
 8009d82:	d102      	bne.n	8009d8a <_strtod_l+0xa7a>
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	f43f ad83 	beq.w	8009890 <_strtod_l+0x580>
 8009d8a:	4b62      	ldr	r3, [pc, #392]	; (8009f14 <_strtod_l+0xc04>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	e78e      	b.n	8009cae <_strtod_l+0x99e>
 8009d90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009f10 <_strtod_l+0xc00>
 8009d94:	f04f 0800 	mov.w	r8, #0
 8009d98:	e7e7      	b.n	8009d6a <_strtod_l+0xa5a>
 8009d9a:	4b5d      	ldr	r3, [pc, #372]	; (8009f10 <_strtod_l+0xc00>)
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	2200      	movs	r2, #0
 8009da2:	f7f6 fc31 	bl	8000608 <__aeabi_dmul>
 8009da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da8:	4680      	mov	r8, r0
 8009daa:	4689      	mov	r9, r1
 8009dac:	b933      	cbnz	r3, 8009dbc <_strtod_l+0xaac>
 8009dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009db2:	900e      	str	r0, [sp, #56]	; 0x38
 8009db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009db6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009dba:	e7dd      	b.n	8009d78 <_strtod_l+0xa68>
 8009dbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009dc0:	e7f9      	b.n	8009db6 <_strtod_l+0xaa6>
 8009dc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1a8      	bne.n	8009d1e <_strtod_l+0xa0e>
 8009dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dd2:	0d1b      	lsrs	r3, r3, #20
 8009dd4:	051b      	lsls	r3, r3, #20
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d1a1      	bne.n	8009d1e <_strtod_l+0xa0e>
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 ff73 	bl	8000cc8 <__aeabi_d2lz>
 8009de2:	f7f6 fbe3 	bl	80005ac <__aeabi_l2d>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4640      	mov	r0, r8
 8009dec:	4649      	mov	r1, r9
 8009dee:	f7f6 fa53 	bl	8000298 <__aeabi_dsub>
 8009df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df8:	ea43 030a 	orr.w	r3, r3, sl
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	4680      	mov	r8, r0
 8009e00:	4689      	mov	r9, r1
 8009e02:	d055      	beq.n	8009eb0 <_strtod_l+0xba0>
 8009e04:	a336      	add	r3, pc, #216	; (adr r3, 8009ee0 <_strtod_l+0xbd0>)
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f7f6 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f47f acd0 	bne.w	80097b4 <_strtod_l+0x4a4>
 8009e14:	a334      	add	r3, pc, #208	; (adr r3, 8009ee8 <_strtod_l+0xbd8>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fe83 	bl	8000b28 <__aeabi_dcmpgt>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f43f af7b 	beq.w	8009d1e <_strtod_l+0xa0e>
 8009e28:	e4c4      	b.n	80097b4 <_strtod_l+0x4a4>
 8009e2a:	9b04      	ldr	r3, [sp, #16]
 8009e2c:	b333      	cbz	r3, 8009e7c <_strtod_l+0xb6c>
 8009e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e34:	d822      	bhi.n	8009e7c <_strtod_l+0xb6c>
 8009e36:	a32e      	add	r3, pc, #184	; (adr r3, 8009ef0 <_strtod_l+0xbe0>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	4649      	mov	r1, r9
 8009e40:	f7f6 fe5e 	bl	8000b00 <__aeabi_dcmple>
 8009e44:	b1a0      	cbz	r0, 8009e70 <_strtod_l+0xb60>
 8009e46:	4649      	mov	r1, r9
 8009e48:	4640      	mov	r0, r8
 8009e4a:	f7f6 feb5 	bl	8000bb8 <__aeabi_d2uiz>
 8009e4e:	2801      	cmp	r0, #1
 8009e50:	bf38      	it	cc
 8009e52:	2001      	movcc	r0, #1
 8009e54:	f7f6 fb5e 	bl	8000514 <__aeabi_ui2d>
 8009e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	4689      	mov	r9, r1
 8009e5e:	bb23      	cbnz	r3, 8009eaa <_strtod_l+0xb9a>
 8009e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e64:	9010      	str	r0, [sp, #64]	; 0x40
 8009e66:	9311      	str	r3, [sp, #68]	; 0x44
 8009e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e80:	eeb0 0a48 	vmov.f32	s0, s16
 8009e84:	eef0 0a68 	vmov.f32	s1, s17
 8009e88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e8c:	f001 fe58 	bl	800bb40 <__ulp>
 8009e90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e94:	ec53 2b10 	vmov	r2, r3, d0
 8009e98:	f7f6 fbb6 	bl	8000608 <__aeabi_dmul>
 8009e9c:	ec53 2b18 	vmov	r2, r3, d8
 8009ea0:	f7f6 f9fc 	bl	800029c <__adddf3>
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	468b      	mov	fp, r1
 8009ea8:	e78d      	b.n	8009dc6 <_strtod_l+0xab6>
 8009eaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009eae:	e7db      	b.n	8009e68 <_strtod_l+0xb58>
 8009eb0:	a311      	add	r3, pc, #68	; (adr r3, 8009ef8 <_strtod_l+0xbe8>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fe19 	bl	8000aec <__aeabi_dcmplt>
 8009eba:	e7b2      	b.n	8009e22 <_strtod_l+0xb12>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	f7ff ba6b 	b.w	80093a0 <_strtod_l+0x90>
 8009eca:	2a65      	cmp	r2, #101	; 0x65
 8009ecc:	f43f ab5f 	beq.w	800958e <_strtod_l+0x27e>
 8009ed0:	2a45      	cmp	r2, #69	; 0x45
 8009ed2:	f43f ab5c 	beq.w	800958e <_strtod_l+0x27e>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f7ff bb94 	b.w	8009604 <_strtod_l+0x2f4>
 8009edc:	f3af 8000 	nop.w
 8009ee0:	94a03595 	.word	0x94a03595
 8009ee4:	3fdfffff 	.word	0x3fdfffff
 8009ee8:	35afe535 	.word	0x35afe535
 8009eec:	3fe00000 	.word	0x3fe00000
 8009ef0:	ffc00000 	.word	0xffc00000
 8009ef4:	41dfffff 	.word	0x41dfffff
 8009ef8:	94a03595 	.word	0x94a03595
 8009efc:	3fcfffff 	.word	0x3fcfffff
 8009f00:	3ff00000 	.word	0x3ff00000
 8009f04:	7ff00000 	.word	0x7ff00000
 8009f08:	7fe00000 	.word	0x7fe00000
 8009f0c:	7c9fffff 	.word	0x7c9fffff
 8009f10:	3fe00000 	.word	0x3fe00000
 8009f14:	bff00000 	.word	0xbff00000
 8009f18:	7fefffff 	.word	0x7fefffff

08009f1c <_strtod_r>:
 8009f1c:	4b01      	ldr	r3, [pc, #4]	; (8009f24 <_strtod_r+0x8>)
 8009f1e:	f7ff b9f7 	b.w	8009310 <_strtod_l>
 8009f22:	bf00      	nop
 8009f24:	2000008c 	.word	0x2000008c

08009f28 <_strtol_l.constprop.0>:
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2e:	d001      	beq.n	8009f34 <_strtol_l.constprop.0+0xc>
 8009f30:	2b24      	cmp	r3, #36	; 0x24
 8009f32:	d906      	bls.n	8009f42 <_strtol_l.constprop.0+0x1a>
 8009f34:	f7fe fac8 	bl	80084c8 <__errno>
 8009f38:	2316      	movs	r3, #22
 8009f3a:	6003      	str	r3, [r0, #0]
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a028 <_strtol_l.constprop.0+0x100>
 8009f46:	460d      	mov	r5, r1
 8009f48:	462e      	mov	r6, r5
 8009f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f52:	f017 0708 	ands.w	r7, r7, #8
 8009f56:	d1f7      	bne.n	8009f48 <_strtol_l.constprop.0+0x20>
 8009f58:	2c2d      	cmp	r4, #45	; 0x2d
 8009f5a:	d132      	bne.n	8009fc2 <_strtol_l.constprop.0+0x9a>
 8009f5c:	782c      	ldrb	r4, [r5, #0]
 8009f5e:	2701      	movs	r7, #1
 8009f60:	1cb5      	adds	r5, r6, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d05b      	beq.n	800a01e <_strtol_l.constprop.0+0xf6>
 8009f66:	2b10      	cmp	r3, #16
 8009f68:	d109      	bne.n	8009f7e <_strtol_l.constprop.0+0x56>
 8009f6a:	2c30      	cmp	r4, #48	; 0x30
 8009f6c:	d107      	bne.n	8009f7e <_strtol_l.constprop.0+0x56>
 8009f6e:	782c      	ldrb	r4, [r5, #0]
 8009f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f74:	2c58      	cmp	r4, #88	; 0x58
 8009f76:	d14d      	bne.n	800a014 <_strtol_l.constprop.0+0xec>
 8009f78:	786c      	ldrb	r4, [r5, #1]
 8009f7a:	2310      	movs	r3, #16
 8009f7c:	3502      	adds	r5, #2
 8009f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f86:	f04f 0c00 	mov.w	ip, #0
 8009f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f8e:	4666      	mov	r6, ip
 8009f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f98:	f1be 0f09 	cmp.w	lr, #9
 8009f9c:	d816      	bhi.n	8009fcc <_strtol_l.constprop.0+0xa4>
 8009f9e:	4674      	mov	r4, lr
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	dd24      	ble.n	8009fee <_strtol_l.constprop.0+0xc6>
 8009fa4:	f1bc 0f00 	cmp.w	ip, #0
 8009fa8:	db1e      	blt.n	8009fe8 <_strtol_l.constprop.0+0xc0>
 8009faa:	45b1      	cmp	r9, r6
 8009fac:	d31c      	bcc.n	8009fe8 <_strtol_l.constprop.0+0xc0>
 8009fae:	d101      	bne.n	8009fb4 <_strtol_l.constprop.0+0x8c>
 8009fb0:	45a2      	cmp	sl, r4
 8009fb2:	db19      	blt.n	8009fe8 <_strtol_l.constprop.0+0xc0>
 8009fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8009fb8:	f04f 0c01 	mov.w	ip, #1
 8009fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fc0:	e7e8      	b.n	8009f94 <_strtol_l.constprop.0+0x6c>
 8009fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8009fc4:	bf04      	itt	eq
 8009fc6:	782c      	ldrbeq	r4, [r5, #0]
 8009fc8:	1cb5      	addeq	r5, r6, #2
 8009fca:	e7ca      	b.n	8009f62 <_strtol_l.constprop.0+0x3a>
 8009fcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009fd0:	f1be 0f19 	cmp.w	lr, #25
 8009fd4:	d801      	bhi.n	8009fda <_strtol_l.constprop.0+0xb2>
 8009fd6:	3c37      	subs	r4, #55	; 0x37
 8009fd8:	e7e2      	b.n	8009fa0 <_strtol_l.constprop.0+0x78>
 8009fda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009fde:	f1be 0f19 	cmp.w	lr, #25
 8009fe2:	d804      	bhi.n	8009fee <_strtol_l.constprop.0+0xc6>
 8009fe4:	3c57      	subs	r4, #87	; 0x57
 8009fe6:	e7db      	b.n	8009fa0 <_strtol_l.constprop.0+0x78>
 8009fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8009fec:	e7e6      	b.n	8009fbc <_strtol_l.constprop.0+0x94>
 8009fee:	f1bc 0f00 	cmp.w	ip, #0
 8009ff2:	da05      	bge.n	800a000 <_strtol_l.constprop.0+0xd8>
 8009ff4:	2322      	movs	r3, #34	; 0x22
 8009ff6:	6003      	str	r3, [r0, #0]
 8009ff8:	4646      	mov	r6, r8
 8009ffa:	b942      	cbnz	r2, 800a00e <_strtol_l.constprop.0+0xe6>
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	e79e      	b.n	8009f3e <_strtol_l.constprop.0+0x16>
 800a000:	b107      	cbz	r7, 800a004 <_strtol_l.constprop.0+0xdc>
 800a002:	4276      	negs	r6, r6
 800a004:	2a00      	cmp	r2, #0
 800a006:	d0f9      	beq.n	8009ffc <_strtol_l.constprop.0+0xd4>
 800a008:	f1bc 0f00 	cmp.w	ip, #0
 800a00c:	d000      	beq.n	800a010 <_strtol_l.constprop.0+0xe8>
 800a00e:	1e69      	subs	r1, r5, #1
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	e7f3      	b.n	8009ffc <_strtol_l.constprop.0+0xd4>
 800a014:	2430      	movs	r4, #48	; 0x30
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1b1      	bne.n	8009f7e <_strtol_l.constprop.0+0x56>
 800a01a:	2308      	movs	r3, #8
 800a01c:	e7af      	b.n	8009f7e <_strtol_l.constprop.0+0x56>
 800a01e:	2c30      	cmp	r4, #48	; 0x30
 800a020:	d0a5      	beq.n	8009f6e <_strtol_l.constprop.0+0x46>
 800a022:	230a      	movs	r3, #10
 800a024:	e7ab      	b.n	8009f7e <_strtol_l.constprop.0+0x56>
 800a026:	bf00      	nop
 800a028:	0800d439 	.word	0x0800d439

0800a02c <_strtol_r>:
 800a02c:	f7ff bf7c 	b.w	8009f28 <_strtol_l.constprop.0>

0800a030 <quorem>:
 800a030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	6903      	ldr	r3, [r0, #16]
 800a036:	690c      	ldr	r4, [r1, #16]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	4607      	mov	r7, r0
 800a03c:	f2c0 8081 	blt.w	800a142 <quorem+0x112>
 800a040:	3c01      	subs	r4, #1
 800a042:	f101 0814 	add.w	r8, r1, #20
 800a046:	f100 0514 	add.w	r5, r0, #20
 800a04a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a058:	3301      	adds	r3, #1
 800a05a:	429a      	cmp	r2, r3
 800a05c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a064:	fbb2 f6f3 	udiv	r6, r2, r3
 800a068:	d331      	bcc.n	800a0ce <quorem+0x9e>
 800a06a:	f04f 0e00 	mov.w	lr, #0
 800a06e:	4640      	mov	r0, r8
 800a070:	46ac      	mov	ip, r5
 800a072:	46f2      	mov	sl, lr
 800a074:	f850 2b04 	ldr.w	r2, [r0], #4
 800a078:	b293      	uxth	r3, r2
 800a07a:	fb06 e303 	mla	r3, r6, r3, lr
 800a07e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a082:	b29b      	uxth	r3, r3
 800a084:	ebaa 0303 	sub.w	r3, sl, r3
 800a088:	f8dc a000 	ldr.w	sl, [ip]
 800a08c:	0c12      	lsrs	r2, r2, #16
 800a08e:	fa13 f38a 	uxtah	r3, r3, sl
 800a092:	fb06 e202 	mla	r2, r6, r2, lr
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	9b00      	ldr	r3, [sp, #0]
 800a09a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a09e:	b292      	uxth	r2, r2
 800a0a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0a8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0ac:	4581      	cmp	r9, r0
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0ba:	d2db      	bcs.n	800a074 <quorem+0x44>
 800a0bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0c0:	b92b      	cbnz	r3, 800a0ce <quorem+0x9e>
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	429d      	cmp	r5, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	d32e      	bcc.n	800a12a <quorem+0xfa>
 800a0cc:	613c      	str	r4, [r7, #16]
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f001 fc90 	bl	800b9f4 <__mcmp>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	db24      	blt.n	800a122 <quorem+0xf2>
 800a0d8:	3601      	adds	r6, #1
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f04f 0c00 	mov.w	ip, #0
 800a0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0e4:	f8d0 e000 	ldr.w	lr, [r0]
 800a0e8:	b293      	uxth	r3, r2
 800a0ea:	ebac 0303 	sub.w	r3, ip, r3
 800a0ee:	0c12      	lsrs	r2, r2, #16
 800a0f0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a102:	45c1      	cmp	r9, r8
 800a104:	f840 3b04 	str.w	r3, [r0], #4
 800a108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a10c:	d2e8      	bcs.n	800a0e0 <quorem+0xb0>
 800a10e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a116:	b922      	cbnz	r2, 800a122 <quorem+0xf2>
 800a118:	3b04      	subs	r3, #4
 800a11a:	429d      	cmp	r5, r3
 800a11c:	461a      	mov	r2, r3
 800a11e:	d30a      	bcc.n	800a136 <quorem+0x106>
 800a120:	613c      	str	r4, [r7, #16]
 800a122:	4630      	mov	r0, r6
 800a124:	b003      	add	sp, #12
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	2a00      	cmp	r2, #0
 800a130:	d1cc      	bne.n	800a0cc <quorem+0x9c>
 800a132:	3c01      	subs	r4, #1
 800a134:	e7c7      	b.n	800a0c6 <quorem+0x96>
 800a136:	6812      	ldr	r2, [r2, #0]
 800a138:	3b04      	subs	r3, #4
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d1f0      	bne.n	800a120 <quorem+0xf0>
 800a13e:	3c01      	subs	r4, #1
 800a140:	e7eb      	b.n	800a11a <quorem+0xea>
 800a142:	2000      	movs	r0, #0
 800a144:	e7ee      	b.n	800a124 <quorem+0xf4>
	...

0800a148 <_dtoa_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	ed2d 8b04 	vpush	{d8-d9}
 800a150:	ec57 6b10 	vmov	r6, r7, d0
 800a154:	b093      	sub	sp, #76	; 0x4c
 800a156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a15c:	9106      	str	r1, [sp, #24]
 800a15e:	ee10 aa10 	vmov	sl, s0
 800a162:	4604      	mov	r4, r0
 800a164:	9209      	str	r2, [sp, #36]	; 0x24
 800a166:	930c      	str	r3, [sp, #48]	; 0x30
 800a168:	46bb      	mov	fp, r7
 800a16a:	b975      	cbnz	r5, 800a18a <_dtoa_r+0x42>
 800a16c:	2010      	movs	r0, #16
 800a16e:	f001 f94d 	bl	800b40c <malloc>
 800a172:	4602      	mov	r2, r0
 800a174:	6260      	str	r0, [r4, #36]	; 0x24
 800a176:	b920      	cbnz	r0, 800a182 <_dtoa_r+0x3a>
 800a178:	4ba7      	ldr	r3, [pc, #668]	; (800a418 <_dtoa_r+0x2d0>)
 800a17a:	21ea      	movs	r1, #234	; 0xea
 800a17c:	48a7      	ldr	r0, [pc, #668]	; (800a41c <_dtoa_r+0x2d4>)
 800a17e:	f002 f8bd 	bl	800c2fc <__assert_func>
 800a182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a186:	6005      	str	r5, [r0, #0]
 800a188:	60c5      	str	r5, [r0, #12]
 800a18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18c:	6819      	ldr	r1, [r3, #0]
 800a18e:	b151      	cbz	r1, 800a1a6 <_dtoa_r+0x5e>
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	604a      	str	r2, [r1, #4]
 800a194:	2301      	movs	r3, #1
 800a196:	4093      	lsls	r3, r2
 800a198:	608b      	str	r3, [r1, #8]
 800a19a:	4620      	mov	r0, r4
 800a19c:	f001 f99e 	bl	800b4dc <_Bfree>
 800a1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	1e3b      	subs	r3, r7, #0
 800a1a8:	bfaa      	itet	ge
 800a1aa:	2300      	movge	r3, #0
 800a1ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1b0:	f8c8 3000 	strge.w	r3, [r8]
 800a1b4:	4b9a      	ldr	r3, [pc, #616]	; (800a420 <_dtoa_r+0x2d8>)
 800a1b6:	bfbc      	itt	lt
 800a1b8:	2201      	movlt	r2, #1
 800a1ba:	f8c8 2000 	strlt.w	r2, [r8]
 800a1be:	ea33 030b 	bics.w	r3, r3, fp
 800a1c2:	d11b      	bne.n	800a1fc <_dtoa_r+0xb4>
 800a1c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1d0:	4333      	orrs	r3, r6
 800a1d2:	f000 8592 	beq.w	800acfa <_dtoa_r+0xbb2>
 800a1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1d8:	b963      	cbnz	r3, 800a1f4 <_dtoa_r+0xac>
 800a1da:	4b92      	ldr	r3, [pc, #584]	; (800a424 <_dtoa_r+0x2dc>)
 800a1dc:	e022      	b.n	800a224 <_dtoa_r+0xdc>
 800a1de:	4b92      	ldr	r3, [pc, #584]	; (800a428 <_dtoa_r+0x2e0>)
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	b013      	add	sp, #76	; 0x4c
 800a1ec:	ecbd 8b04 	vpop	{d8-d9}
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	4b8b      	ldr	r3, [pc, #556]	; (800a424 <_dtoa_r+0x2dc>)
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	3303      	adds	r3, #3
 800a1fa:	e7f3      	b.n	800a1e4 <_dtoa_r+0x9c>
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2300      	movs	r3, #0
 800a200:	4650      	mov	r0, sl
 800a202:	4659      	mov	r1, fp
 800a204:	f7f6 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 800a208:	ec4b ab19 	vmov	d9, sl, fp
 800a20c:	4680      	mov	r8, r0
 800a20e:	b158      	cbz	r0, 800a228 <_dtoa_r+0xe0>
 800a210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a212:	2301      	movs	r3, #1
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 856b 	beq.w	800acf4 <_dtoa_r+0xbac>
 800a21e:	4883      	ldr	r0, [pc, #524]	; (800a42c <_dtoa_r+0x2e4>)
 800a220:	6018      	str	r0, [r3, #0]
 800a222:	1e43      	subs	r3, r0, #1
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	e7df      	b.n	800a1e8 <_dtoa_r+0xa0>
 800a228:	ec4b ab10 	vmov	d0, sl, fp
 800a22c:	aa10      	add	r2, sp, #64	; 0x40
 800a22e:	a911      	add	r1, sp, #68	; 0x44
 800a230:	4620      	mov	r0, r4
 800a232:	f001 fd01 	bl	800bc38 <__d2b>
 800a236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a23a:	ee08 0a10 	vmov	s16, r0
 800a23e:	2d00      	cmp	r5, #0
 800a240:	f000 8084 	beq.w	800a34c <_dtoa_r+0x204>
 800a244:	ee19 3a90 	vmov	r3, s19
 800a248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a24c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a250:	4656      	mov	r6, sl
 800a252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a25a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a25e:	4b74      	ldr	r3, [pc, #464]	; (800a430 <_dtoa_r+0x2e8>)
 800a260:	2200      	movs	r2, #0
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 f817 	bl	8000298 <__aeabi_dsub>
 800a26a:	a365      	add	r3, pc, #404	; (adr r3, 800a400 <_dtoa_r+0x2b8>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f9ca 	bl	8000608 <__aeabi_dmul>
 800a274:	a364      	add	r3, pc, #400	; (adr r3, 800a408 <_dtoa_r+0x2c0>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f6 f80f 	bl	800029c <__adddf3>
 800a27e:	4606      	mov	r6, r0
 800a280:	4628      	mov	r0, r5
 800a282:	460f      	mov	r7, r1
 800a284:	f7f6 f956 	bl	8000534 <__aeabi_i2d>
 800a288:	a361      	add	r3, pc, #388	; (adr r3, 800a410 <_dtoa_r+0x2c8>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f9bb 	bl	8000608 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f5 ffff 	bl	800029c <__adddf3>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f7f6 fc61 	bl	8000b68 <__aeabi_d2iz>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	9000      	str	r0, [sp, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f6 fc1c 	bl	8000aec <__aeabi_dcmplt>
 800a2b4:	b150      	cbz	r0, 800a2cc <_dtoa_r+0x184>
 800a2b6:	9800      	ldr	r0, [sp, #0]
 800a2b8:	f7f6 f93c 	bl	8000534 <__aeabi_i2d>
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	f7f6 fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2c4:	b910      	cbnz	r0, 800a2cc <_dtoa_r+0x184>
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	2b16      	cmp	r3, #22
 800a2d0:	d85a      	bhi.n	800a388 <_dtoa_r+0x240>
 800a2d2:	9a00      	ldr	r2, [sp, #0]
 800a2d4:	4b57      	ldr	r3, [pc, #348]	; (800a434 <_dtoa_r+0x2ec>)
 800a2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	ec51 0b19 	vmov	r0, r1, d9
 800a2e2:	f7f6 fc03 	bl	8000aec <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d050      	beq.n	800a38c <_dtoa_r+0x244>
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2f6:	1b5d      	subs	r5, r3, r5
 800a2f8:	1e6b      	subs	r3, r5, #1
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	bf45      	ittet	mi
 800a2fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800a302:	9304      	strmi	r3, [sp, #16]
 800a304:	2300      	movpl	r3, #0
 800a306:	2300      	movmi	r3, #0
 800a308:	bf4c      	ite	mi
 800a30a:	9305      	strmi	r3, [sp, #20]
 800a30c:	9304      	strpl	r3, [sp, #16]
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	db3d      	blt.n	800a390 <_dtoa_r+0x248>
 800a314:	9b05      	ldr	r3, [sp, #20]
 800a316:	9a00      	ldr	r2, [sp, #0]
 800a318:	920a      	str	r2, [sp, #40]	; 0x28
 800a31a:	4413      	add	r3, r2
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	2300      	movs	r3, #0
 800a320:	9307      	str	r3, [sp, #28]
 800a322:	9b06      	ldr	r3, [sp, #24]
 800a324:	2b09      	cmp	r3, #9
 800a326:	f200 8089 	bhi.w	800a43c <_dtoa_r+0x2f4>
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	bfc4      	itt	gt
 800a32e:	3b04      	subgt	r3, #4
 800a330:	9306      	strgt	r3, [sp, #24]
 800a332:	9b06      	ldr	r3, [sp, #24]
 800a334:	f1a3 0302 	sub.w	r3, r3, #2
 800a338:	bfcc      	ite	gt
 800a33a:	2500      	movgt	r5, #0
 800a33c:	2501      	movle	r5, #1
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f200 8087 	bhi.w	800a452 <_dtoa_r+0x30a>
 800a344:	e8df f003 	tbb	[pc, r3]
 800a348:	59383a2d 	.word	0x59383a2d
 800a34c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a350:	441d      	add	r5, r3
 800a352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a356:	2b20      	cmp	r3, #32
 800a358:	bfc1      	itttt	gt
 800a35a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a35e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a362:	fa0b f303 	lslgt.w	r3, fp, r3
 800a366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a36a:	bfda      	itte	le
 800a36c:	f1c3 0320 	rsble	r3, r3, #32
 800a370:	fa06 f003 	lslle.w	r0, r6, r3
 800a374:	4318      	orrgt	r0, r3
 800a376:	f7f6 f8cd 	bl	8000514 <__aeabi_ui2d>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4606      	mov	r6, r0
 800a37e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a382:	3d01      	subs	r5, #1
 800a384:	930e      	str	r3, [sp, #56]	; 0x38
 800a386:	e76a      	b.n	800a25e <_dtoa_r+0x116>
 800a388:	2301      	movs	r3, #1
 800a38a:	e7b2      	b.n	800a2f2 <_dtoa_r+0x1aa>
 800a38c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a38e:	e7b1      	b.n	800a2f4 <_dtoa_r+0x1ac>
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	9a00      	ldr	r2, [sp, #0]
 800a394:	1a9b      	subs	r3, r3, r2
 800a396:	9304      	str	r3, [sp, #16]
 800a398:	4253      	negs	r3, r2
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	2300      	movs	r3, #0
 800a39e:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a0:	e7bf      	b.n	800a322 <_dtoa_r+0x1da>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9308      	str	r3, [sp, #32]
 800a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc55      	bgt.n	800a458 <_dtoa_r+0x310>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b6:	e00c      	b.n	800a3d2 <_dtoa_r+0x28a>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7f3      	b.n	800a3a4 <_dtoa_r+0x25c>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c0:	9308      	str	r3, [sp, #32]
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	9303      	str	r3, [sp, #12]
 800a3ce:	bfb8      	it	lt
 800a3d0:	2301      	movlt	r3, #1
 800a3d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	6042      	str	r2, [r0, #4]
 800a3d8:	2204      	movs	r2, #4
 800a3da:	f102 0614 	add.w	r6, r2, #20
 800a3de:	429e      	cmp	r6, r3
 800a3e0:	6841      	ldr	r1, [r0, #4]
 800a3e2:	d93d      	bls.n	800a460 <_dtoa_r+0x318>
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f001 f839 	bl	800b45c <_Balloc>
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d13b      	bne.n	800a468 <_dtoa_r+0x320>
 800a3f0:	4b11      	ldr	r3, [pc, #68]	; (800a438 <_dtoa_r+0x2f0>)
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3f8:	e6c0      	b.n	800a17c <_dtoa_r+0x34>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e7df      	b.n	800a3be <_dtoa_r+0x276>
 800a3fe:	bf00      	nop
 800a400:	636f4361 	.word	0x636f4361
 800a404:	3fd287a7 	.word	0x3fd287a7
 800a408:	8b60c8b3 	.word	0x8b60c8b3
 800a40c:	3fc68a28 	.word	0x3fc68a28
 800a410:	509f79fb 	.word	0x509f79fb
 800a414:	3fd34413 	.word	0x3fd34413
 800a418:	0800d546 	.word	0x0800d546
 800a41c:	0800d55d 	.word	0x0800d55d
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	0800d542 	.word	0x0800d542
 800a428:	0800d539 	.word	0x0800d539
 800a42c:	0800d3b9 	.word	0x0800d3b9
 800a430:	3ff80000 	.word	0x3ff80000
 800a434:	0800d6c8 	.word	0x0800d6c8
 800a438:	0800d5b8 	.word	0x0800d5b8
 800a43c:	2501      	movs	r5, #1
 800a43e:	2300      	movs	r3, #0
 800a440:	9306      	str	r3, [sp, #24]
 800a442:	9508      	str	r5, [sp, #32]
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	2312      	movs	r3, #18
 800a450:	e7b0      	b.n	800a3b4 <_dtoa_r+0x26c>
 800a452:	2301      	movs	r3, #1
 800a454:	9308      	str	r3, [sp, #32]
 800a456:	e7f5      	b.n	800a444 <_dtoa_r+0x2fc>
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a45e:	e7b8      	b.n	800a3d2 <_dtoa_r+0x28a>
 800a460:	3101      	adds	r1, #1
 800a462:	6041      	str	r1, [r0, #4]
 800a464:	0052      	lsls	r2, r2, #1
 800a466:	e7b8      	b.n	800a3da <_dtoa_r+0x292>
 800a468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a46a:	9a01      	ldr	r2, [sp, #4]
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	2b0e      	cmp	r3, #14
 800a472:	f200 809d 	bhi.w	800a5b0 <_dtoa_r+0x468>
 800a476:	2d00      	cmp	r5, #0
 800a478:	f000 809a 	beq.w	800a5b0 <_dtoa_r+0x468>
 800a47c:	9b00      	ldr	r3, [sp, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd32      	ble.n	800a4e8 <_dtoa_r+0x3a0>
 800a482:	4ab7      	ldr	r2, [pc, #732]	; (800a760 <_dtoa_r+0x618>)
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a48c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a490:	9b00      	ldr	r3, [sp, #0]
 800a492:	05d8      	lsls	r0, r3, #23
 800a494:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a498:	d516      	bpl.n	800a4c8 <_dtoa_r+0x380>
 800a49a:	4bb2      	ldr	r3, [pc, #712]	; (800a764 <_dtoa_r+0x61c>)
 800a49c:	ec51 0b19 	vmov	r0, r1, d9
 800a4a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4a4:	f7f6 f9da 	bl	800085c <__aeabi_ddiv>
 800a4a8:	f007 070f 	and.w	r7, r7, #15
 800a4ac:	4682      	mov	sl, r0
 800a4ae:	468b      	mov	fp, r1
 800a4b0:	2503      	movs	r5, #3
 800a4b2:	4eac      	ldr	r6, [pc, #688]	; (800a764 <_dtoa_r+0x61c>)
 800a4b4:	b957      	cbnz	r7, 800a4cc <_dtoa_r+0x384>
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	464b      	mov	r3, r9
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	4659      	mov	r1, fp
 800a4be:	f7f6 f9cd 	bl	800085c <__aeabi_ddiv>
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	468b      	mov	fp, r1
 800a4c6:	e028      	b.n	800a51a <_dtoa_r+0x3d2>
 800a4c8:	2502      	movs	r5, #2
 800a4ca:	e7f2      	b.n	800a4b2 <_dtoa_r+0x36a>
 800a4cc:	07f9      	lsls	r1, r7, #31
 800a4ce:	d508      	bpl.n	800a4e2 <_dtoa_r+0x39a>
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4d8:	f7f6 f896 	bl	8000608 <__aeabi_dmul>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	4680      	mov	r8, r0
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	107f      	asrs	r7, r7, #1
 800a4e4:	3608      	adds	r6, #8
 800a4e6:	e7e5      	b.n	800a4b4 <_dtoa_r+0x36c>
 800a4e8:	f000 809b 	beq.w	800a622 <_dtoa_r+0x4da>
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	4f9d      	ldr	r7, [pc, #628]	; (800a764 <_dtoa_r+0x61c>)
 800a4f0:	425e      	negs	r6, r3
 800a4f2:	4b9b      	ldr	r3, [pc, #620]	; (800a760 <_dtoa_r+0x618>)
 800a4f4:	f006 020f 	and.w	r2, r6, #15
 800a4f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	ec51 0b19 	vmov	r0, r1, d9
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	1136      	asrs	r6, r6, #4
 800a50a:	4682      	mov	sl, r0
 800a50c:	468b      	mov	fp, r1
 800a50e:	2300      	movs	r3, #0
 800a510:	2502      	movs	r5, #2
 800a512:	2e00      	cmp	r6, #0
 800a514:	d17a      	bne.n	800a60c <_dtoa_r+0x4c4>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1d3      	bne.n	800a4c2 <_dtoa_r+0x37a>
 800a51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8082 	beq.w	800a626 <_dtoa_r+0x4de>
 800a522:	4b91      	ldr	r3, [pc, #580]	; (800a768 <_dtoa_r+0x620>)
 800a524:	2200      	movs	r2, #0
 800a526:	4650      	mov	r0, sl
 800a528:	4659      	mov	r1, fp
 800a52a:	f7f6 fadf 	bl	8000aec <__aeabi_dcmplt>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d079      	beq.n	800a626 <_dtoa_r+0x4de>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d076      	beq.n	800a626 <_dtoa_r+0x4de>
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	dd36      	ble.n	800a5ac <_dtoa_r+0x464>
 800a53e:	9b00      	ldr	r3, [sp, #0]
 800a540:	4650      	mov	r0, sl
 800a542:	4659      	mov	r1, fp
 800a544:	1e5f      	subs	r7, r3, #1
 800a546:	2200      	movs	r2, #0
 800a548:	4b88      	ldr	r3, [pc, #544]	; (800a76c <_dtoa_r+0x624>)
 800a54a:	f7f6 f85d 	bl	8000608 <__aeabi_dmul>
 800a54e:	9e02      	ldr	r6, [sp, #8]
 800a550:	4682      	mov	sl, r0
 800a552:	468b      	mov	fp, r1
 800a554:	3501      	adds	r5, #1
 800a556:	4628      	mov	r0, r5
 800a558:	f7f5 ffec 	bl	8000534 <__aeabi_i2d>
 800a55c:	4652      	mov	r2, sl
 800a55e:	465b      	mov	r3, fp
 800a560:	f7f6 f852 	bl	8000608 <__aeabi_dmul>
 800a564:	4b82      	ldr	r3, [pc, #520]	; (800a770 <_dtoa_r+0x628>)
 800a566:	2200      	movs	r2, #0
 800a568:	f7f5 fe98 	bl	800029c <__adddf3>
 800a56c:	46d0      	mov	r8, sl
 800a56e:	46d9      	mov	r9, fp
 800a570:	4682      	mov	sl, r0
 800a572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a576:	2e00      	cmp	r6, #0
 800a578:	d158      	bne.n	800a62c <_dtoa_r+0x4e4>
 800a57a:	4b7e      	ldr	r3, [pc, #504]	; (800a774 <_dtoa_r+0x62c>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	4640      	mov	r0, r8
 800a580:	4649      	mov	r1, r9
 800a582:	f7f5 fe89 	bl	8000298 <__aeabi_dsub>
 800a586:	4652      	mov	r2, sl
 800a588:	465b      	mov	r3, fp
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	f7f6 facb 	bl	8000b28 <__aeabi_dcmpgt>
 800a592:	2800      	cmp	r0, #0
 800a594:	f040 8295 	bne.w	800aac2 <_dtoa_r+0x97a>
 800a598:	4652      	mov	r2, sl
 800a59a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	f7f6 faa3 	bl	8000aec <__aeabi_dcmplt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f040 8289 	bne.w	800aabe <_dtoa_r+0x976>
 800a5ac:	ec5b ab19 	vmov	sl, fp, d9
 800a5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f2c0 8148 	blt.w	800a848 <_dtoa_r+0x700>
 800a5b8:	9a00      	ldr	r2, [sp, #0]
 800a5ba:	2a0e      	cmp	r2, #14
 800a5bc:	f300 8144 	bgt.w	800a848 <_dtoa_r+0x700>
 800a5c0:	4b67      	ldr	r3, [pc, #412]	; (800a760 <_dtoa_r+0x618>)
 800a5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f280 80d5 	bge.w	800a77c <_dtoa_r+0x634>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f300 80d1 	bgt.w	800a77c <_dtoa_r+0x634>
 800a5da:	f040 826f 	bne.w	800aabc <_dtoa_r+0x974>
 800a5de:	4b65      	ldr	r3, [pc, #404]	; (800a774 <_dtoa_r+0x62c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f6 f80f 	bl	8000608 <__aeabi_dmul>
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	f7f6 fa91 	bl	8000b14 <__aeabi_dcmpge>
 800a5f2:	9e03      	ldr	r6, [sp, #12]
 800a5f4:	4637      	mov	r7, r6
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f040 8245 	bne.w	800aa86 <_dtoa_r+0x93e>
 800a5fc:	9d01      	ldr	r5, [sp, #4]
 800a5fe:	2331      	movs	r3, #49	; 0x31
 800a600:	f805 3b01 	strb.w	r3, [r5], #1
 800a604:	9b00      	ldr	r3, [sp, #0]
 800a606:	3301      	adds	r3, #1
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	e240      	b.n	800aa8e <_dtoa_r+0x946>
 800a60c:	07f2      	lsls	r2, r6, #31
 800a60e:	d505      	bpl.n	800a61c <_dtoa_r+0x4d4>
 800a610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a614:	f7f5 fff8 	bl	8000608 <__aeabi_dmul>
 800a618:	3501      	adds	r5, #1
 800a61a:	2301      	movs	r3, #1
 800a61c:	1076      	asrs	r6, r6, #1
 800a61e:	3708      	adds	r7, #8
 800a620:	e777      	b.n	800a512 <_dtoa_r+0x3ca>
 800a622:	2502      	movs	r5, #2
 800a624:	e779      	b.n	800a51a <_dtoa_r+0x3d2>
 800a626:	9f00      	ldr	r7, [sp, #0]
 800a628:	9e03      	ldr	r6, [sp, #12]
 800a62a:	e794      	b.n	800a556 <_dtoa_r+0x40e>
 800a62c:	9901      	ldr	r1, [sp, #4]
 800a62e:	4b4c      	ldr	r3, [pc, #304]	; (800a760 <_dtoa_r+0x618>)
 800a630:	4431      	add	r1, r6
 800a632:	910d      	str	r1, [sp, #52]	; 0x34
 800a634:	9908      	ldr	r1, [sp, #32]
 800a636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a63a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a63e:	2900      	cmp	r1, #0
 800a640:	d043      	beq.n	800a6ca <_dtoa_r+0x582>
 800a642:	494d      	ldr	r1, [pc, #308]	; (800a778 <_dtoa_r+0x630>)
 800a644:	2000      	movs	r0, #0
 800a646:	f7f6 f909 	bl	800085c <__aeabi_ddiv>
 800a64a:	4652      	mov	r2, sl
 800a64c:	465b      	mov	r3, fp
 800a64e:	f7f5 fe23 	bl	8000298 <__aeabi_dsub>
 800a652:	9d01      	ldr	r5, [sp, #4]
 800a654:	4682      	mov	sl, r0
 800a656:	468b      	mov	fp, r1
 800a658:	4649      	mov	r1, r9
 800a65a:	4640      	mov	r0, r8
 800a65c:	f7f6 fa84 	bl	8000b68 <__aeabi_d2iz>
 800a660:	4606      	mov	r6, r0
 800a662:	f7f5 ff67 	bl	8000534 <__aeabi_i2d>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 fe13 	bl	8000298 <__aeabi_dsub>
 800a672:	3630      	adds	r6, #48	; 0x30
 800a674:	f805 6b01 	strb.w	r6, [r5], #1
 800a678:	4652      	mov	r2, sl
 800a67a:	465b      	mov	r3, fp
 800a67c:	4680      	mov	r8, r0
 800a67e:	4689      	mov	r9, r1
 800a680:	f7f6 fa34 	bl	8000aec <__aeabi_dcmplt>
 800a684:	2800      	cmp	r0, #0
 800a686:	d163      	bne.n	800a750 <_dtoa_r+0x608>
 800a688:	4642      	mov	r2, r8
 800a68a:	464b      	mov	r3, r9
 800a68c:	4936      	ldr	r1, [pc, #216]	; (800a768 <_dtoa_r+0x620>)
 800a68e:	2000      	movs	r0, #0
 800a690:	f7f5 fe02 	bl	8000298 <__aeabi_dsub>
 800a694:	4652      	mov	r2, sl
 800a696:	465b      	mov	r3, fp
 800a698:	f7f6 fa28 	bl	8000aec <__aeabi_dcmplt>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f040 80b5 	bne.w	800a80c <_dtoa_r+0x6c4>
 800a6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	d081      	beq.n	800a5ac <_dtoa_r+0x464>
 800a6a8:	4b30      	ldr	r3, [pc, #192]	; (800a76c <_dtoa_r+0x624>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4650      	mov	r0, sl
 800a6ae:	4659      	mov	r1, fp
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	4b2d      	ldr	r3, [pc, #180]	; (800a76c <_dtoa_r+0x624>)
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	468b      	mov	fp, r1
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	e7c6      	b.n	800a658 <_dtoa_r+0x510>
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	4659      	mov	r1, fp
 800a6ce:	f7f5 ff9b 	bl	8000608 <__aeabi_dmul>
 800a6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d4:	9d01      	ldr	r5, [sp, #4]
 800a6d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6d8:	4682      	mov	sl, r0
 800a6da:	468b      	mov	fp, r1
 800a6dc:	4649      	mov	r1, r9
 800a6de:	4640      	mov	r0, r8
 800a6e0:	f7f6 fa42 	bl	8000b68 <__aeabi_d2iz>
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	f7f5 ff25 	bl	8000534 <__aeabi_i2d>
 800a6ea:	3630      	adds	r6, #48	; 0x30
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6fe:	429d      	cmp	r5, r3
 800a700:	4680      	mov	r8, r0
 800a702:	4689      	mov	r9, r1
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	d124      	bne.n	800a754 <_dtoa_r+0x60c>
 800a70a:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <_dtoa_r+0x630>)
 800a70c:	4650      	mov	r0, sl
 800a70e:	4659      	mov	r1, fp
 800a710:	f7f5 fdc4 	bl	800029c <__adddf3>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f6 fa04 	bl	8000b28 <__aeabi_dcmpgt>
 800a720:	2800      	cmp	r0, #0
 800a722:	d173      	bne.n	800a80c <_dtoa_r+0x6c4>
 800a724:	4652      	mov	r2, sl
 800a726:	465b      	mov	r3, fp
 800a728:	4913      	ldr	r1, [pc, #76]	; (800a778 <_dtoa_r+0x630>)
 800a72a:	2000      	movs	r0, #0
 800a72c:	f7f5 fdb4 	bl	8000298 <__aeabi_dsub>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f6 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f43f af35 	beq.w	800a5ac <_dtoa_r+0x464>
 800a742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a744:	1e6b      	subs	r3, r5, #1
 800a746:	930f      	str	r3, [sp, #60]	; 0x3c
 800a748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a74c:	2b30      	cmp	r3, #48	; 0x30
 800a74e:	d0f8      	beq.n	800a742 <_dtoa_r+0x5fa>
 800a750:	9700      	str	r7, [sp, #0]
 800a752:	e049      	b.n	800a7e8 <_dtoa_r+0x6a0>
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <_dtoa_r+0x624>)
 800a756:	f7f5 ff57 	bl	8000608 <__aeabi_dmul>
 800a75a:	4680      	mov	r8, r0
 800a75c:	4689      	mov	r9, r1
 800a75e:	e7bd      	b.n	800a6dc <_dtoa_r+0x594>
 800a760:	0800d6c8 	.word	0x0800d6c8
 800a764:	0800d6a0 	.word	0x0800d6a0
 800a768:	3ff00000 	.word	0x3ff00000
 800a76c:	40240000 	.word	0x40240000
 800a770:	401c0000 	.word	0x401c0000
 800a774:	40140000 	.word	0x40140000
 800a778:	3fe00000 	.word	0x3fe00000
 800a77c:	9d01      	ldr	r5, [sp, #4]
 800a77e:	4656      	mov	r6, sl
 800a780:	465f      	mov	r7, fp
 800a782:	4642      	mov	r2, r8
 800a784:	464b      	mov	r3, r9
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f6 f867 	bl	800085c <__aeabi_ddiv>
 800a78e:	f7f6 f9eb 	bl	8000b68 <__aeabi_d2iz>
 800a792:	4682      	mov	sl, r0
 800a794:	f7f5 fece 	bl	8000534 <__aeabi_i2d>
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	f7f5 ff34 	bl	8000608 <__aeabi_dmul>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7ac:	f7f5 fd74 	bl	8000298 <__aeabi_dsub>
 800a7b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7b4:	9e01      	ldr	r6, [sp, #4]
 800a7b6:	9f03      	ldr	r7, [sp, #12]
 800a7b8:	1bae      	subs	r6, r5, r6
 800a7ba:	42b7      	cmp	r7, r6
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	d135      	bne.n	800a82e <_dtoa_r+0x6e6>
 800a7c2:	f7f5 fd6b 	bl	800029c <__adddf3>
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	f7f6 f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 800a7d2:	b9d0      	cbnz	r0, 800a80a <_dtoa_r+0x6c2>
 800a7d4:	4642      	mov	r2, r8
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7e0:	b110      	cbz	r0, 800a7e8 <_dtoa_r+0x6a0>
 800a7e2:	f01a 0f01 	tst.w	sl, #1
 800a7e6:	d110      	bne.n	800a80a <_dtoa_r+0x6c2>
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	ee18 1a10 	vmov	r1, s16
 800a7ee:	f000 fe75 	bl	800b4dc <_Bfree>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9800      	ldr	r0, [sp, #0]
 800a7f6:	702b      	strb	r3, [r5, #0]
 800a7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	6018      	str	r0, [r3, #0]
 800a7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f acf1 	beq.w	800a1e8 <_dtoa_r+0xa0>
 800a806:	601d      	str	r5, [r3, #0]
 800a808:	e4ee      	b.n	800a1e8 <_dtoa_r+0xa0>
 800a80a:	9f00      	ldr	r7, [sp, #0]
 800a80c:	462b      	mov	r3, r5
 800a80e:	461d      	mov	r5, r3
 800a810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a814:	2a39      	cmp	r2, #57	; 0x39
 800a816:	d106      	bne.n	800a826 <_dtoa_r+0x6de>
 800a818:	9a01      	ldr	r2, [sp, #4]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d1f7      	bne.n	800a80e <_dtoa_r+0x6c6>
 800a81e:	9901      	ldr	r1, [sp, #4]
 800a820:	2230      	movs	r2, #48	; 0x30
 800a822:	3701      	adds	r7, #1
 800a824:	700a      	strb	r2, [r1, #0]
 800a826:	781a      	ldrb	r2, [r3, #0]
 800a828:	3201      	adds	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e790      	b.n	800a750 <_dtoa_r+0x608>
 800a82e:	4ba6      	ldr	r3, [pc, #664]	; (800aac8 <_dtoa_r+0x980>)
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee9 	bl	8000608 <__aeabi_dmul>
 800a836:	2200      	movs	r2, #0
 800a838:	2300      	movs	r3, #0
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	f7f6 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a842:	2800      	cmp	r0, #0
 800a844:	d09d      	beq.n	800a782 <_dtoa_r+0x63a>
 800a846:	e7cf      	b.n	800a7e8 <_dtoa_r+0x6a0>
 800a848:	9a08      	ldr	r2, [sp, #32]
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	f000 80d7 	beq.w	800a9fe <_dtoa_r+0x8b6>
 800a850:	9a06      	ldr	r2, [sp, #24]
 800a852:	2a01      	cmp	r2, #1
 800a854:	f300 80ba 	bgt.w	800a9cc <_dtoa_r+0x884>
 800a858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	f000 80b2 	beq.w	800a9c4 <_dtoa_r+0x87c>
 800a860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a864:	9e07      	ldr	r6, [sp, #28]
 800a866:	9d04      	ldr	r5, [sp, #16]
 800a868:	9a04      	ldr	r2, [sp, #16]
 800a86a:	441a      	add	r2, r3
 800a86c:	9204      	str	r2, [sp, #16]
 800a86e:	9a05      	ldr	r2, [sp, #20]
 800a870:	2101      	movs	r1, #1
 800a872:	441a      	add	r2, r3
 800a874:	4620      	mov	r0, r4
 800a876:	9205      	str	r2, [sp, #20]
 800a878:	f000 ff32 	bl	800b6e0 <__i2b>
 800a87c:	4607      	mov	r7, r0
 800a87e:	2d00      	cmp	r5, #0
 800a880:	dd0c      	ble.n	800a89c <_dtoa_r+0x754>
 800a882:	9b05      	ldr	r3, [sp, #20]
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd09      	ble.n	800a89c <_dtoa_r+0x754>
 800a888:	42ab      	cmp	r3, r5
 800a88a:	9a04      	ldr	r2, [sp, #16]
 800a88c:	bfa8      	it	ge
 800a88e:	462b      	movge	r3, r5
 800a890:	1ad2      	subs	r2, r2, r3
 800a892:	9204      	str	r2, [sp, #16]
 800a894:	9a05      	ldr	r2, [sp, #20]
 800a896:	1aed      	subs	r5, r5, r3
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	b31b      	cbz	r3, 800a8e8 <_dtoa_r+0x7a0>
 800a8a0:	9b08      	ldr	r3, [sp, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80af 	beq.w	800aa06 <_dtoa_r+0x8be>
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	dd13      	ble.n	800a8d4 <_dtoa_r+0x78c>
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	4632      	mov	r2, r6
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 ffd5 	bl	800b860 <__pow5mult>
 800a8b6:	ee18 2a10 	vmov	r2, s16
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	4607      	mov	r7, r0
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 ff24 	bl	800b70c <__multiply>
 800a8c4:	ee18 1a10 	vmov	r1, s16
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fe06 	bl	800b4dc <_Bfree>
 800a8d0:	ee08 8a10 	vmov	s16, r8
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	1b9a      	subs	r2, r3, r6
 800a8d8:	d006      	beq.n	800a8e8 <_dtoa_r+0x7a0>
 800a8da:	ee18 1a10 	vmov	r1, s16
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 ffbe 	bl	800b860 <__pow5mult>
 800a8e4:	ee08 0a10 	vmov	s16, r0
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fef8 	bl	800b6e0 <__i2b>
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	f340 8088 	ble.w	800aa0a <_dtoa_r+0x8c2>
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 ffae 	bl	800b860 <__pow5mult>
 800a904:	9b06      	ldr	r3, [sp, #24]
 800a906:	2b01      	cmp	r3, #1
 800a908:	4606      	mov	r6, r0
 800a90a:	f340 8081 	ble.w	800aa10 <_dtoa_r+0x8c8>
 800a90e:	f04f 0800 	mov.w	r8, #0
 800a912:	6933      	ldr	r3, [r6, #16]
 800a914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a918:	6918      	ldr	r0, [r3, #16]
 800a91a:	f000 fe91 	bl	800b640 <__hi0bits>
 800a91e:	f1c0 0020 	rsb	r0, r0, #32
 800a922:	9b05      	ldr	r3, [sp, #20]
 800a924:	4418      	add	r0, r3
 800a926:	f010 001f 	ands.w	r0, r0, #31
 800a92a:	f000 8092 	beq.w	800aa52 <_dtoa_r+0x90a>
 800a92e:	f1c0 0320 	rsb	r3, r0, #32
 800a932:	2b04      	cmp	r3, #4
 800a934:	f340 808a 	ble.w	800aa4c <_dtoa_r+0x904>
 800a938:	f1c0 001c 	rsb	r0, r0, #28
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	4403      	add	r3, r0
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	4403      	add	r3, r0
 800a946:	4405      	add	r5, r0
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dd07      	ble.n	800a960 <_dtoa_r+0x818>
 800a950:	ee18 1a10 	vmov	r1, s16
 800a954:	461a      	mov	r2, r3
 800a956:	4620      	mov	r0, r4
 800a958:	f000 ffdc 	bl	800b914 <__lshift>
 800a95c:	ee08 0a10 	vmov	s16, r0
 800a960:	9b05      	ldr	r3, [sp, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	dd05      	ble.n	800a972 <_dtoa_r+0x82a>
 800a966:	4631      	mov	r1, r6
 800a968:	461a      	mov	r2, r3
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 ffd2 	bl	800b914 <__lshift>
 800a970:	4606      	mov	r6, r0
 800a972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d06e      	beq.n	800aa56 <_dtoa_r+0x90e>
 800a978:	ee18 0a10 	vmov	r0, s16
 800a97c:	4631      	mov	r1, r6
 800a97e:	f001 f839 	bl	800b9f4 <__mcmp>
 800a982:	2800      	cmp	r0, #0
 800a984:	da67      	bge.n	800aa56 <_dtoa_r+0x90e>
 800a986:	9b00      	ldr	r3, [sp, #0]
 800a988:	3b01      	subs	r3, #1
 800a98a:	ee18 1a10 	vmov	r1, s16
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	220a      	movs	r2, #10
 800a992:	2300      	movs	r3, #0
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fdc3 	bl	800b520 <__multadd>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	ee08 0a10 	vmov	s16, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 81b1 	beq.w	800ad08 <_dtoa_r+0xbc0>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 fdb7 	bl	800b520 <__multadd>
 800a9b2:	9b02      	ldr	r3, [sp, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	f300 808e 	bgt.w	800aad8 <_dtoa_r+0x990>
 800a9bc:	9b06      	ldr	r3, [sp, #24]
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	dc51      	bgt.n	800aa66 <_dtoa_r+0x91e>
 800a9c2:	e089      	b.n	800aad8 <_dtoa_r+0x990>
 800a9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9ca:	e74b      	b.n	800a864 <_dtoa_r+0x71c>
 800a9cc:	9b03      	ldr	r3, [sp, #12]
 800a9ce:	1e5e      	subs	r6, r3, #1
 800a9d0:	9b07      	ldr	r3, [sp, #28]
 800a9d2:	42b3      	cmp	r3, r6
 800a9d4:	bfbf      	itttt	lt
 800a9d6:	9b07      	ldrlt	r3, [sp, #28]
 800a9d8:	9607      	strlt	r6, [sp, #28]
 800a9da:	1af2      	sublt	r2, r6, r3
 800a9dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9de:	bfb6      	itet	lt
 800a9e0:	189b      	addlt	r3, r3, r2
 800a9e2:	1b9e      	subge	r6, r3, r6
 800a9e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	bfb8      	it	lt
 800a9ea:	2600      	movlt	r6, #0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfb7      	itett	lt
 800a9f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a9f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a9f8:	1a9d      	sublt	r5, r3, r2
 800a9fa:	2300      	movlt	r3, #0
 800a9fc:	e734      	b.n	800a868 <_dtoa_r+0x720>
 800a9fe:	9e07      	ldr	r6, [sp, #28]
 800aa00:	9d04      	ldr	r5, [sp, #16]
 800aa02:	9f08      	ldr	r7, [sp, #32]
 800aa04:	e73b      	b.n	800a87e <_dtoa_r+0x736>
 800aa06:	9a07      	ldr	r2, [sp, #28]
 800aa08:	e767      	b.n	800a8da <_dtoa_r+0x792>
 800aa0a:	9b06      	ldr	r3, [sp, #24]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	dc18      	bgt.n	800aa42 <_dtoa_r+0x8fa>
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	d115      	bne.n	800aa42 <_dtoa_r+0x8fa>
 800aa16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa1a:	b993      	cbnz	r3, 800aa42 <_dtoa_r+0x8fa>
 800aa1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa20:	0d1b      	lsrs	r3, r3, #20
 800aa22:	051b      	lsls	r3, r3, #20
 800aa24:	b183      	cbz	r3, 800aa48 <_dtoa_r+0x900>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	9b05      	ldr	r3, [sp, #20]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	f04f 0801 	mov.w	r8, #1
 800aa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f47f af6a 	bne.w	800a912 <_dtoa_r+0x7ca>
 800aa3e:	2001      	movs	r0, #1
 800aa40:	e76f      	b.n	800a922 <_dtoa_r+0x7da>
 800aa42:	f04f 0800 	mov.w	r8, #0
 800aa46:	e7f6      	b.n	800aa36 <_dtoa_r+0x8ee>
 800aa48:	4698      	mov	r8, r3
 800aa4a:	e7f4      	b.n	800aa36 <_dtoa_r+0x8ee>
 800aa4c:	f43f af7d 	beq.w	800a94a <_dtoa_r+0x802>
 800aa50:	4618      	mov	r0, r3
 800aa52:	301c      	adds	r0, #28
 800aa54:	e772      	b.n	800a93c <_dtoa_r+0x7f4>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dc37      	bgt.n	800aacc <_dtoa_r+0x984>
 800aa5c:	9b06      	ldr	r3, [sp, #24]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	dd34      	ble.n	800aacc <_dtoa_r+0x984>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	b96b      	cbnz	r3, 800aa86 <_dtoa_r+0x93e>
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fd56 	bl	800b520 <__multadd>
 800aa74:	4601      	mov	r1, r0
 800aa76:	4606      	mov	r6, r0
 800aa78:	ee18 0a10 	vmov	r0, s16
 800aa7c:	f000 ffba 	bl	800b9f4 <__mcmp>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f73f adbb 	bgt.w	800a5fc <_dtoa_r+0x4b4>
 800aa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa88:	9d01      	ldr	r5, [sp, #4]
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	f04f 0800 	mov.w	r8, #0
 800aa92:	4631      	mov	r1, r6
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fd21 	bl	800b4dc <_Bfree>
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	f43f aea4 	beq.w	800a7e8 <_dtoa_r+0x6a0>
 800aaa0:	f1b8 0f00 	cmp.w	r8, #0
 800aaa4:	d005      	beq.n	800aab2 <_dtoa_r+0x96a>
 800aaa6:	45b8      	cmp	r8, r7
 800aaa8:	d003      	beq.n	800aab2 <_dtoa_r+0x96a>
 800aaaa:	4641      	mov	r1, r8
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 fd15 	bl	800b4dc <_Bfree>
 800aab2:	4639      	mov	r1, r7
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fd11 	bl	800b4dc <_Bfree>
 800aaba:	e695      	b.n	800a7e8 <_dtoa_r+0x6a0>
 800aabc:	2600      	movs	r6, #0
 800aabe:	4637      	mov	r7, r6
 800aac0:	e7e1      	b.n	800aa86 <_dtoa_r+0x93e>
 800aac2:	9700      	str	r7, [sp, #0]
 800aac4:	4637      	mov	r7, r6
 800aac6:	e599      	b.n	800a5fc <_dtoa_r+0x4b4>
 800aac8:	40240000 	.word	0x40240000
 800aacc:	9b08      	ldr	r3, [sp, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80ca 	beq.w	800ac68 <_dtoa_r+0xb20>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	9302      	str	r3, [sp, #8]
 800aad8:	2d00      	cmp	r5, #0
 800aada:	dd05      	ble.n	800aae8 <_dtoa_r+0x9a0>
 800aadc:	4639      	mov	r1, r7
 800aade:	462a      	mov	r2, r5
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 ff17 	bl	800b914 <__lshift>
 800aae6:	4607      	mov	r7, r0
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	d05b      	beq.n	800aba6 <_dtoa_r+0xa5e>
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fcb3 	bl	800b45c <_Balloc>
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b928      	cbnz	r0, 800ab06 <_dtoa_r+0x9be>
 800aafa:	4b87      	ldr	r3, [pc, #540]	; (800ad18 <_dtoa_r+0xbd0>)
 800aafc:	4602      	mov	r2, r0
 800aafe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab02:	f7ff bb3b 	b.w	800a17c <_dtoa_r+0x34>
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	3202      	adds	r2, #2
 800ab0a:	0092      	lsls	r2, r2, #2
 800ab0c:	f107 010c 	add.w	r1, r7, #12
 800ab10:	300c      	adds	r0, #12
 800ab12:	f000 fc95 	bl	800b440 <memcpy>
 800ab16:	2201      	movs	r2, #1
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fefa 	bl	800b914 <__lshift>
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	f103 0901 	add.w	r9, r3, #1
 800ab26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f00a 0301 	and.w	r3, sl, #1
 800ab32:	46b8      	mov	r8, r7
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	4607      	mov	r7, r0
 800ab38:	4631      	mov	r1, r6
 800ab3a:	ee18 0a10 	vmov	r0, s16
 800ab3e:	f7ff fa77 	bl	800a030 <quorem>
 800ab42:	4641      	mov	r1, r8
 800ab44:	9002      	str	r0, [sp, #8]
 800ab46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab4a:	ee18 0a10 	vmov	r0, s16
 800ab4e:	f000 ff51 	bl	800b9f4 <__mcmp>
 800ab52:	463a      	mov	r2, r7
 800ab54:	9003      	str	r0, [sp, #12]
 800ab56:	4631      	mov	r1, r6
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 ff67 	bl	800ba2c <__mdiff>
 800ab5e:	68c2      	ldr	r2, [r0, #12]
 800ab60:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab64:	4605      	mov	r5, r0
 800ab66:	bb02      	cbnz	r2, 800abaa <_dtoa_r+0xa62>
 800ab68:	4601      	mov	r1, r0
 800ab6a:	ee18 0a10 	vmov	r0, s16
 800ab6e:	f000 ff41 	bl	800b9f4 <__mcmp>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4629      	mov	r1, r5
 800ab76:	4620      	mov	r0, r4
 800ab78:	9207      	str	r2, [sp, #28]
 800ab7a:	f000 fcaf 	bl	800b4dc <_Bfree>
 800ab7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab82:	ea43 0102 	orr.w	r1, r3, r2
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	464d      	mov	r5, r9
 800ab8c:	d10f      	bne.n	800abae <_dtoa_r+0xa66>
 800ab8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab92:	d02a      	beq.n	800abea <_dtoa_r+0xaa2>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	dd02      	ble.n	800aba0 <_dtoa_r+0xa58>
 800ab9a:	9b02      	ldr	r3, [sp, #8]
 800ab9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aba0:	f88b a000 	strb.w	sl, [fp]
 800aba4:	e775      	b.n	800aa92 <_dtoa_r+0x94a>
 800aba6:	4638      	mov	r0, r7
 800aba8:	e7ba      	b.n	800ab20 <_dtoa_r+0x9d8>
 800abaa:	2201      	movs	r2, #1
 800abac:	e7e2      	b.n	800ab74 <_dtoa_r+0xa2c>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	db04      	blt.n	800abbe <_dtoa_r+0xa76>
 800abb4:	9906      	ldr	r1, [sp, #24]
 800abb6:	430b      	orrs	r3, r1
 800abb8:	9904      	ldr	r1, [sp, #16]
 800abba:	430b      	orrs	r3, r1
 800abbc:	d122      	bne.n	800ac04 <_dtoa_r+0xabc>
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	ddee      	ble.n	800aba0 <_dtoa_r+0xa58>
 800abc2:	ee18 1a10 	vmov	r1, s16
 800abc6:	2201      	movs	r2, #1
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fea3 	bl	800b914 <__lshift>
 800abce:	4631      	mov	r1, r6
 800abd0:	ee08 0a10 	vmov	s16, r0
 800abd4:	f000 ff0e 	bl	800b9f4 <__mcmp>
 800abd8:	2800      	cmp	r0, #0
 800abda:	dc03      	bgt.n	800abe4 <_dtoa_r+0xa9c>
 800abdc:	d1e0      	bne.n	800aba0 <_dtoa_r+0xa58>
 800abde:	f01a 0f01 	tst.w	sl, #1
 800abe2:	d0dd      	beq.n	800aba0 <_dtoa_r+0xa58>
 800abe4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abe8:	d1d7      	bne.n	800ab9a <_dtoa_r+0xa52>
 800abea:	2339      	movs	r3, #57	; 0x39
 800abec:	f88b 3000 	strb.w	r3, [fp]
 800abf0:	462b      	mov	r3, r5
 800abf2:	461d      	mov	r5, r3
 800abf4:	3b01      	subs	r3, #1
 800abf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abfa:	2a39      	cmp	r2, #57	; 0x39
 800abfc:	d071      	beq.n	800ace2 <_dtoa_r+0xb9a>
 800abfe:	3201      	adds	r2, #1
 800ac00:	701a      	strb	r2, [r3, #0]
 800ac02:	e746      	b.n	800aa92 <_dtoa_r+0x94a>
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	dd07      	ble.n	800ac18 <_dtoa_r+0xad0>
 800ac08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac0c:	d0ed      	beq.n	800abea <_dtoa_r+0xaa2>
 800ac0e:	f10a 0301 	add.w	r3, sl, #1
 800ac12:	f88b 3000 	strb.w	r3, [fp]
 800ac16:	e73c      	b.n	800aa92 <_dtoa_r+0x94a>
 800ac18:	9b05      	ldr	r3, [sp, #20]
 800ac1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac1e:	4599      	cmp	r9, r3
 800ac20:	d047      	beq.n	800acb2 <_dtoa_r+0xb6a>
 800ac22:	ee18 1a10 	vmov	r1, s16
 800ac26:	2300      	movs	r3, #0
 800ac28:	220a      	movs	r2, #10
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fc78 	bl	800b520 <__multadd>
 800ac30:	45b8      	cmp	r8, r7
 800ac32:	ee08 0a10 	vmov	s16, r0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	f04f 020a 	mov.w	r2, #10
 800ac3e:	4641      	mov	r1, r8
 800ac40:	4620      	mov	r0, r4
 800ac42:	d106      	bne.n	800ac52 <_dtoa_r+0xb0a>
 800ac44:	f000 fc6c 	bl	800b520 <__multadd>
 800ac48:	4680      	mov	r8, r0
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	f109 0901 	add.w	r9, r9, #1
 800ac50:	e772      	b.n	800ab38 <_dtoa_r+0x9f0>
 800ac52:	f000 fc65 	bl	800b520 <__multadd>
 800ac56:	4639      	mov	r1, r7
 800ac58:	4680      	mov	r8, r0
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fc5e 	bl	800b520 <__multadd>
 800ac64:	4607      	mov	r7, r0
 800ac66:	e7f1      	b.n	800ac4c <_dtoa_r+0xb04>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	9d01      	ldr	r5, [sp, #4]
 800ac6e:	ee18 0a10 	vmov	r0, s16
 800ac72:	4631      	mov	r1, r6
 800ac74:	f7ff f9dc 	bl	800a030 <quorem>
 800ac78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac7c:	9b01      	ldr	r3, [sp, #4]
 800ac7e:	f805 ab01 	strb.w	sl, [r5], #1
 800ac82:	1aea      	subs	r2, r5, r3
 800ac84:	9b02      	ldr	r3, [sp, #8]
 800ac86:	4293      	cmp	r3, r2
 800ac88:	dd09      	ble.n	800ac9e <_dtoa_r+0xb56>
 800ac8a:	ee18 1a10 	vmov	r1, s16
 800ac8e:	2300      	movs	r3, #0
 800ac90:	220a      	movs	r2, #10
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fc44 	bl	800b520 <__multadd>
 800ac98:	ee08 0a10 	vmov	s16, r0
 800ac9c:	e7e7      	b.n	800ac6e <_dtoa_r+0xb26>
 800ac9e:	9b02      	ldr	r3, [sp, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfc8      	it	gt
 800aca4:	461d      	movgt	r5, r3
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	bfd8      	it	le
 800acaa:	2501      	movle	r5, #1
 800acac:	441d      	add	r5, r3
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	ee18 1a10 	vmov	r1, s16
 800acb6:	2201      	movs	r2, #1
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fe2b 	bl	800b914 <__lshift>
 800acbe:	4631      	mov	r1, r6
 800acc0:	ee08 0a10 	vmov	s16, r0
 800acc4:	f000 fe96 	bl	800b9f4 <__mcmp>
 800acc8:	2800      	cmp	r0, #0
 800acca:	dc91      	bgt.n	800abf0 <_dtoa_r+0xaa8>
 800accc:	d102      	bne.n	800acd4 <_dtoa_r+0xb8c>
 800acce:	f01a 0f01 	tst.w	sl, #1
 800acd2:	d18d      	bne.n	800abf0 <_dtoa_r+0xaa8>
 800acd4:	462b      	mov	r3, r5
 800acd6:	461d      	mov	r5, r3
 800acd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acdc:	2a30      	cmp	r2, #48	; 0x30
 800acde:	d0fa      	beq.n	800acd6 <_dtoa_r+0xb8e>
 800ace0:	e6d7      	b.n	800aa92 <_dtoa_r+0x94a>
 800ace2:	9a01      	ldr	r2, [sp, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d184      	bne.n	800abf2 <_dtoa_r+0xaaa>
 800ace8:	9b00      	ldr	r3, [sp, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	2331      	movs	r3, #49	; 0x31
 800acf0:	7013      	strb	r3, [r2, #0]
 800acf2:	e6ce      	b.n	800aa92 <_dtoa_r+0x94a>
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <_dtoa_r+0xbd4>)
 800acf6:	f7ff ba95 	b.w	800a224 <_dtoa_r+0xdc>
 800acfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f47f aa6e 	bne.w	800a1de <_dtoa_r+0x96>
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <_dtoa_r+0xbd8>)
 800ad04:	f7ff ba8e 	b.w	800a224 <_dtoa_r+0xdc>
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	dcae      	bgt.n	800ac6c <_dtoa_r+0xb24>
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	f73f aea8 	bgt.w	800aa66 <_dtoa_r+0x91e>
 800ad16:	e7a9      	b.n	800ac6c <_dtoa_r+0xb24>
 800ad18:	0800d5b8 	.word	0x0800d5b8
 800ad1c:	0800d3b8 	.word	0x0800d3b8
 800ad20:	0800d539 	.word	0x0800d539

0800ad24 <rshift>:
 800ad24:	6903      	ldr	r3, [r0, #16]
 800ad26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad32:	f100 0414 	add.w	r4, r0, #20
 800ad36:	dd45      	ble.n	800adc4 <rshift+0xa0>
 800ad38:	f011 011f 	ands.w	r1, r1, #31
 800ad3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad44:	d10c      	bne.n	800ad60 <rshift+0x3c>
 800ad46:	f100 0710 	add.w	r7, r0, #16
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	42b1      	cmp	r1, r6
 800ad4e:	d334      	bcc.n	800adba <rshift+0x96>
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	1eea      	subs	r2, r5, #3
 800ad56:	4296      	cmp	r6, r2
 800ad58:	bf38      	it	cc
 800ad5a:	2300      	movcc	r3, #0
 800ad5c:	4423      	add	r3, r4
 800ad5e:	e015      	b.n	800ad8c <rshift+0x68>
 800ad60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad64:	f1c1 0820 	rsb	r8, r1, #32
 800ad68:	40cf      	lsrs	r7, r1
 800ad6a:	f105 0e04 	add.w	lr, r5, #4
 800ad6e:	46a1      	mov	r9, r4
 800ad70:	4576      	cmp	r6, lr
 800ad72:	46f4      	mov	ip, lr
 800ad74:	d815      	bhi.n	800ada2 <rshift+0x7e>
 800ad76:	1a9a      	subs	r2, r3, r2
 800ad78:	0092      	lsls	r2, r2, #2
 800ad7a:	3a04      	subs	r2, #4
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	42ae      	cmp	r6, r5
 800ad80:	bf38      	it	cc
 800ad82:	2200      	movcc	r2, #0
 800ad84:	18a3      	adds	r3, r4, r2
 800ad86:	50a7      	str	r7, [r4, r2]
 800ad88:	b107      	cbz	r7, 800ad8c <rshift+0x68>
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	1b1a      	subs	r2, r3, r4
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad94:	bf08      	it	eq
 800ad96:	2300      	moveq	r3, #0
 800ad98:	6102      	str	r2, [r0, #16]
 800ad9a:	bf08      	it	eq
 800ad9c:	6143      	streq	r3, [r0, #20]
 800ad9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada2:	f8dc c000 	ldr.w	ip, [ip]
 800ada6:	fa0c fc08 	lsl.w	ip, ip, r8
 800adaa:	ea4c 0707 	orr.w	r7, ip, r7
 800adae:	f849 7b04 	str.w	r7, [r9], #4
 800adb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800adb6:	40cf      	lsrs	r7, r1
 800adb8:	e7da      	b.n	800ad70 <rshift+0x4c>
 800adba:	f851 cb04 	ldr.w	ip, [r1], #4
 800adbe:	f847 cf04 	str.w	ip, [r7, #4]!
 800adc2:	e7c3      	b.n	800ad4c <rshift+0x28>
 800adc4:	4623      	mov	r3, r4
 800adc6:	e7e1      	b.n	800ad8c <rshift+0x68>

0800adc8 <__hexdig_fun>:
 800adc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adcc:	2b09      	cmp	r3, #9
 800adce:	d802      	bhi.n	800add6 <__hexdig_fun+0xe>
 800add0:	3820      	subs	r0, #32
 800add2:	b2c0      	uxtb	r0, r0
 800add4:	4770      	bx	lr
 800add6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adda:	2b05      	cmp	r3, #5
 800addc:	d801      	bhi.n	800ade2 <__hexdig_fun+0x1a>
 800adde:	3847      	subs	r0, #71	; 0x47
 800ade0:	e7f7      	b.n	800add2 <__hexdig_fun+0xa>
 800ade2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	d801      	bhi.n	800adee <__hexdig_fun+0x26>
 800adea:	3827      	subs	r0, #39	; 0x27
 800adec:	e7f1      	b.n	800add2 <__hexdig_fun+0xa>
 800adee:	2000      	movs	r0, #0
 800adf0:	4770      	bx	lr
	...

0800adf4 <__gethex>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	ed2d 8b02 	vpush	{d8}
 800adfc:	b089      	sub	sp, #36	; 0x24
 800adfe:	ee08 0a10 	vmov	s16, r0
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	4bb4      	ldr	r3, [pc, #720]	; (800b0d8 <__gethex+0x2e4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	468b      	mov	fp, r1
 800ae0e:	4690      	mov	r8, r2
 800ae10:	f7f5 f9e6 	bl	80001e0 <strlen>
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	f8db 2000 	ldr.w	r2, [fp]
 800ae1a:	4403      	add	r3, r0
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	1c93      	adds	r3, r2, #2
 800ae26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae2e:	32fe      	adds	r2, #254	; 0xfe
 800ae30:	18d1      	adds	r1, r2, r3
 800ae32:	461f      	mov	r7, r3
 800ae34:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae38:	9100      	str	r1, [sp, #0]
 800ae3a:	2830      	cmp	r0, #48	; 0x30
 800ae3c:	d0f8      	beq.n	800ae30 <__gethex+0x3c>
 800ae3e:	f7ff ffc3 	bl	800adc8 <__hexdig_fun>
 800ae42:	4604      	mov	r4, r0
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d13a      	bne.n	800aebe <__gethex+0xca>
 800ae48:	9901      	ldr	r1, [sp, #4]
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f001 fa33 	bl	800c2b8 <strncmp>
 800ae52:	4605      	mov	r5, r0
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d168      	bne.n	800af2a <__gethex+0x136>
 800ae58:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae5c:	eb07 060a 	add.w	r6, r7, sl
 800ae60:	f7ff ffb2 	bl	800adc8 <__hexdig_fun>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d062      	beq.n	800af2e <__gethex+0x13a>
 800ae68:	4633      	mov	r3, r6
 800ae6a:	7818      	ldrb	r0, [r3, #0]
 800ae6c:	2830      	cmp	r0, #48	; 0x30
 800ae6e:	461f      	mov	r7, r3
 800ae70:	f103 0301 	add.w	r3, r3, #1
 800ae74:	d0f9      	beq.n	800ae6a <__gethex+0x76>
 800ae76:	f7ff ffa7 	bl	800adc8 <__hexdig_fun>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	fab0 f480 	clz	r4, r0
 800ae80:	0964      	lsrs	r4, r4, #5
 800ae82:	4635      	mov	r5, r6
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	463a      	mov	r2, r7
 800ae88:	4616      	mov	r6, r2
 800ae8a:	3201      	adds	r2, #1
 800ae8c:	7830      	ldrb	r0, [r6, #0]
 800ae8e:	f7ff ff9b 	bl	800adc8 <__hexdig_fun>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d1f8      	bne.n	800ae88 <__gethex+0x94>
 800ae96:	9901      	ldr	r1, [sp, #4]
 800ae98:	4652      	mov	r2, sl
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f001 fa0c 	bl	800c2b8 <strncmp>
 800aea0:	b980      	cbnz	r0, 800aec4 <__gethex+0xd0>
 800aea2:	b94d      	cbnz	r5, 800aeb8 <__gethex+0xc4>
 800aea4:	eb06 050a 	add.w	r5, r6, sl
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4616      	mov	r6, r2
 800aeac:	3201      	adds	r2, #1
 800aeae:	7830      	ldrb	r0, [r6, #0]
 800aeb0:	f7ff ff8a 	bl	800adc8 <__hexdig_fun>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1f8      	bne.n	800aeaa <__gethex+0xb6>
 800aeb8:	1bad      	subs	r5, r5, r6
 800aeba:	00ad      	lsls	r5, r5, #2
 800aebc:	e004      	b.n	800aec8 <__gethex+0xd4>
 800aebe:	2400      	movs	r4, #0
 800aec0:	4625      	mov	r5, r4
 800aec2:	e7e0      	b.n	800ae86 <__gethex+0x92>
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	d1f7      	bne.n	800aeb8 <__gethex+0xc4>
 800aec8:	7833      	ldrb	r3, [r6, #0]
 800aeca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aece:	2b50      	cmp	r3, #80	; 0x50
 800aed0:	d13b      	bne.n	800af4a <__gethex+0x156>
 800aed2:	7873      	ldrb	r3, [r6, #1]
 800aed4:	2b2b      	cmp	r3, #43	; 0x2b
 800aed6:	d02c      	beq.n	800af32 <__gethex+0x13e>
 800aed8:	2b2d      	cmp	r3, #45	; 0x2d
 800aeda:	d02e      	beq.n	800af3a <__gethex+0x146>
 800aedc:	1c71      	adds	r1, r6, #1
 800aede:	f04f 0900 	mov.w	r9, #0
 800aee2:	7808      	ldrb	r0, [r1, #0]
 800aee4:	f7ff ff70 	bl	800adc8 <__hexdig_fun>
 800aee8:	1e43      	subs	r3, r0, #1
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b18      	cmp	r3, #24
 800aeee:	d82c      	bhi.n	800af4a <__gethex+0x156>
 800aef0:	f1a0 0210 	sub.w	r2, r0, #16
 800aef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aef8:	f7ff ff66 	bl	800adc8 <__hexdig_fun>
 800aefc:	1e43      	subs	r3, r0, #1
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b18      	cmp	r3, #24
 800af02:	d91d      	bls.n	800af40 <__gethex+0x14c>
 800af04:	f1b9 0f00 	cmp.w	r9, #0
 800af08:	d000      	beq.n	800af0c <__gethex+0x118>
 800af0a:	4252      	negs	r2, r2
 800af0c:	4415      	add	r5, r2
 800af0e:	f8cb 1000 	str.w	r1, [fp]
 800af12:	b1e4      	cbz	r4, 800af4e <__gethex+0x15a>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	bf14      	ite	ne
 800af1a:	2700      	movne	r7, #0
 800af1c:	2706      	moveq	r7, #6
 800af1e:	4638      	mov	r0, r7
 800af20:	b009      	add	sp, #36	; 0x24
 800af22:	ecbd 8b02 	vpop	{d8}
 800af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2a:	463e      	mov	r6, r7
 800af2c:	4625      	mov	r5, r4
 800af2e:	2401      	movs	r4, #1
 800af30:	e7ca      	b.n	800aec8 <__gethex+0xd4>
 800af32:	f04f 0900 	mov.w	r9, #0
 800af36:	1cb1      	adds	r1, r6, #2
 800af38:	e7d3      	b.n	800aee2 <__gethex+0xee>
 800af3a:	f04f 0901 	mov.w	r9, #1
 800af3e:	e7fa      	b.n	800af36 <__gethex+0x142>
 800af40:	230a      	movs	r3, #10
 800af42:	fb03 0202 	mla	r2, r3, r2, r0
 800af46:	3a10      	subs	r2, #16
 800af48:	e7d4      	b.n	800aef4 <__gethex+0x100>
 800af4a:	4631      	mov	r1, r6
 800af4c:	e7df      	b.n	800af0e <__gethex+0x11a>
 800af4e:	1bf3      	subs	r3, r6, r7
 800af50:	3b01      	subs	r3, #1
 800af52:	4621      	mov	r1, r4
 800af54:	2b07      	cmp	r3, #7
 800af56:	dc0b      	bgt.n	800af70 <__gethex+0x17c>
 800af58:	ee18 0a10 	vmov	r0, s16
 800af5c:	f000 fa7e 	bl	800b45c <_Balloc>
 800af60:	4604      	mov	r4, r0
 800af62:	b940      	cbnz	r0, 800af76 <__gethex+0x182>
 800af64:	4b5d      	ldr	r3, [pc, #372]	; (800b0dc <__gethex+0x2e8>)
 800af66:	4602      	mov	r2, r0
 800af68:	21de      	movs	r1, #222	; 0xde
 800af6a:	485d      	ldr	r0, [pc, #372]	; (800b0e0 <__gethex+0x2ec>)
 800af6c:	f001 f9c6 	bl	800c2fc <__assert_func>
 800af70:	3101      	adds	r1, #1
 800af72:	105b      	asrs	r3, r3, #1
 800af74:	e7ee      	b.n	800af54 <__gethex+0x160>
 800af76:	f100 0914 	add.w	r9, r0, #20
 800af7a:	f04f 0b00 	mov.w	fp, #0
 800af7e:	f1ca 0301 	rsb	r3, sl, #1
 800af82:	f8cd 9008 	str.w	r9, [sp, #8]
 800af86:	f8cd b000 	str.w	fp, [sp]
 800af8a:	9306      	str	r3, [sp, #24]
 800af8c:	42b7      	cmp	r7, r6
 800af8e:	d340      	bcc.n	800b012 <__gethex+0x21e>
 800af90:	9802      	ldr	r0, [sp, #8]
 800af92:	9b00      	ldr	r3, [sp, #0]
 800af94:	f840 3b04 	str.w	r3, [r0], #4
 800af98:	eba0 0009 	sub.w	r0, r0, r9
 800af9c:	1080      	asrs	r0, r0, #2
 800af9e:	0146      	lsls	r6, r0, #5
 800afa0:	6120      	str	r0, [r4, #16]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fb4c 	bl	800b640 <__hi0bits>
 800afa8:	1a30      	subs	r0, r6, r0
 800afaa:	f8d8 6000 	ldr.w	r6, [r8]
 800afae:	42b0      	cmp	r0, r6
 800afb0:	dd63      	ble.n	800b07a <__gethex+0x286>
 800afb2:	1b87      	subs	r7, r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 fef0 	bl	800bd9c <__any_on>
 800afbc:	4682      	mov	sl, r0
 800afbe:	b1a8      	cbz	r0, 800afec <__gethex+0x1f8>
 800afc0:	1e7b      	subs	r3, r7, #1
 800afc2:	1159      	asrs	r1, r3, #5
 800afc4:	f003 021f 	and.w	r2, r3, #31
 800afc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800afcc:	f04f 0a01 	mov.w	sl, #1
 800afd0:	fa0a f202 	lsl.w	r2, sl, r2
 800afd4:	420a      	tst	r2, r1
 800afd6:	d009      	beq.n	800afec <__gethex+0x1f8>
 800afd8:	4553      	cmp	r3, sl
 800afda:	dd05      	ble.n	800afe8 <__gethex+0x1f4>
 800afdc:	1eb9      	subs	r1, r7, #2
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fedc 	bl	800bd9c <__any_on>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d145      	bne.n	800b074 <__gethex+0x280>
 800afe8:	f04f 0a02 	mov.w	sl, #2
 800afec:	4639      	mov	r1, r7
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff fe98 	bl	800ad24 <rshift>
 800aff4:	443d      	add	r5, r7
 800aff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800affa:	42ab      	cmp	r3, r5
 800affc:	da4c      	bge.n	800b098 <__gethex+0x2a4>
 800affe:	ee18 0a10 	vmov	r0, s16
 800b002:	4621      	mov	r1, r4
 800b004:	f000 fa6a 	bl	800b4dc <_Bfree>
 800b008:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b00a:	2300      	movs	r3, #0
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	27a3      	movs	r7, #163	; 0xa3
 800b010:	e785      	b.n	800af1e <__gethex+0x12a>
 800b012:	1e73      	subs	r3, r6, #1
 800b014:	9a05      	ldr	r2, [sp, #20]
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d019      	beq.n	800b054 <__gethex+0x260>
 800b020:	f1bb 0f20 	cmp.w	fp, #32
 800b024:	d107      	bne.n	800b036 <__gethex+0x242>
 800b026:	9b02      	ldr	r3, [sp, #8]
 800b028:	9a00      	ldr	r2, [sp, #0]
 800b02a:	f843 2b04 	str.w	r2, [r3], #4
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	2300      	movs	r3, #0
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	469b      	mov	fp, r3
 800b036:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b03a:	f7ff fec5 	bl	800adc8 <__hexdig_fun>
 800b03e:	9b00      	ldr	r3, [sp, #0]
 800b040:	f000 000f 	and.w	r0, r0, #15
 800b044:	fa00 f00b 	lsl.w	r0, r0, fp
 800b048:	4303      	orrs	r3, r0
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	f10b 0b04 	add.w	fp, fp, #4
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	e00d      	b.n	800b070 <__gethex+0x27c>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	9a06      	ldr	r2, [sp, #24]
 800b058:	4413      	add	r3, r2
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	d3e0      	bcc.n	800b020 <__gethex+0x22c>
 800b05e:	4618      	mov	r0, r3
 800b060:	9901      	ldr	r1, [sp, #4]
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	4652      	mov	r2, sl
 800b066:	f001 f927 	bl	800c2b8 <strncmp>
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d1d7      	bne.n	800b020 <__gethex+0x22c>
 800b070:	461e      	mov	r6, r3
 800b072:	e78b      	b.n	800af8c <__gethex+0x198>
 800b074:	f04f 0a03 	mov.w	sl, #3
 800b078:	e7b8      	b.n	800afec <__gethex+0x1f8>
 800b07a:	da0a      	bge.n	800b092 <__gethex+0x29e>
 800b07c:	1a37      	subs	r7, r6, r0
 800b07e:	4621      	mov	r1, r4
 800b080:	ee18 0a10 	vmov	r0, s16
 800b084:	463a      	mov	r2, r7
 800b086:	f000 fc45 	bl	800b914 <__lshift>
 800b08a:	1bed      	subs	r5, r5, r7
 800b08c:	4604      	mov	r4, r0
 800b08e:	f100 0914 	add.w	r9, r0, #20
 800b092:	f04f 0a00 	mov.w	sl, #0
 800b096:	e7ae      	b.n	800aff6 <__gethex+0x202>
 800b098:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b09c:	42a8      	cmp	r0, r5
 800b09e:	dd72      	ble.n	800b186 <__gethex+0x392>
 800b0a0:	1b45      	subs	r5, r0, r5
 800b0a2:	42ae      	cmp	r6, r5
 800b0a4:	dc36      	bgt.n	800b114 <__gethex+0x320>
 800b0a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d02a      	beq.n	800b104 <__gethex+0x310>
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d02c      	beq.n	800b10c <__gethex+0x318>
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d11c      	bne.n	800b0f0 <__gethex+0x2fc>
 800b0b6:	42ae      	cmp	r6, r5
 800b0b8:	d11a      	bne.n	800b0f0 <__gethex+0x2fc>
 800b0ba:	2e01      	cmp	r6, #1
 800b0bc:	d112      	bne.n	800b0e4 <__gethex+0x2f0>
 800b0be:	9a04      	ldr	r2, [sp, #16]
 800b0c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	f8c9 3000 	str.w	r3, [r9]
 800b0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0d0:	2762      	movs	r7, #98	; 0x62
 800b0d2:	601c      	str	r4, [r3, #0]
 800b0d4:	e723      	b.n	800af1e <__gethex+0x12a>
 800b0d6:	bf00      	nop
 800b0d8:	0800d630 	.word	0x0800d630
 800b0dc:	0800d5b8 	.word	0x0800d5b8
 800b0e0:	0800d5c9 	.word	0x0800d5c9
 800b0e4:	1e71      	subs	r1, r6, #1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 fe58 	bl	800bd9c <__any_on>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1e6      	bne.n	800b0be <__gethex+0x2ca>
 800b0f0:	ee18 0a10 	vmov	r0, s16
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f000 f9f1 	bl	800b4dc <_Bfree>
 800b0fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	2750      	movs	r7, #80	; 0x50
 800b102:	e70c      	b.n	800af1e <__gethex+0x12a>
 800b104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f2      	bne.n	800b0f0 <__gethex+0x2fc>
 800b10a:	e7d8      	b.n	800b0be <__gethex+0x2ca>
 800b10c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1d5      	bne.n	800b0be <__gethex+0x2ca>
 800b112:	e7ed      	b.n	800b0f0 <__gethex+0x2fc>
 800b114:	1e6f      	subs	r7, r5, #1
 800b116:	f1ba 0f00 	cmp.w	sl, #0
 800b11a:	d131      	bne.n	800b180 <__gethex+0x38c>
 800b11c:	b127      	cbz	r7, 800b128 <__gethex+0x334>
 800b11e:	4639      	mov	r1, r7
 800b120:	4620      	mov	r0, r4
 800b122:	f000 fe3b 	bl	800bd9c <__any_on>
 800b126:	4682      	mov	sl, r0
 800b128:	117b      	asrs	r3, r7, #5
 800b12a:	2101      	movs	r1, #1
 800b12c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b130:	f007 071f 	and.w	r7, r7, #31
 800b134:	fa01 f707 	lsl.w	r7, r1, r7
 800b138:	421f      	tst	r7, r3
 800b13a:	4629      	mov	r1, r5
 800b13c:	4620      	mov	r0, r4
 800b13e:	bf18      	it	ne
 800b140:	f04a 0a02 	orrne.w	sl, sl, #2
 800b144:	1b76      	subs	r6, r6, r5
 800b146:	f7ff fded 	bl	800ad24 <rshift>
 800b14a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b14e:	2702      	movs	r7, #2
 800b150:	f1ba 0f00 	cmp.w	sl, #0
 800b154:	d048      	beq.n	800b1e8 <__gethex+0x3f4>
 800b156:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d015      	beq.n	800b18a <__gethex+0x396>
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d017      	beq.n	800b192 <__gethex+0x39e>
 800b162:	2b01      	cmp	r3, #1
 800b164:	d109      	bne.n	800b17a <__gethex+0x386>
 800b166:	f01a 0f02 	tst.w	sl, #2
 800b16a:	d006      	beq.n	800b17a <__gethex+0x386>
 800b16c:	f8d9 0000 	ldr.w	r0, [r9]
 800b170:	ea4a 0a00 	orr.w	sl, sl, r0
 800b174:	f01a 0f01 	tst.w	sl, #1
 800b178:	d10e      	bne.n	800b198 <__gethex+0x3a4>
 800b17a:	f047 0710 	orr.w	r7, r7, #16
 800b17e:	e033      	b.n	800b1e8 <__gethex+0x3f4>
 800b180:	f04f 0a01 	mov.w	sl, #1
 800b184:	e7d0      	b.n	800b128 <__gethex+0x334>
 800b186:	2701      	movs	r7, #1
 800b188:	e7e2      	b.n	800b150 <__gethex+0x35c>
 800b18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b18c:	f1c3 0301 	rsb	r3, r3, #1
 800b190:	9315      	str	r3, [sp, #84]	; 0x54
 800b192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0f0      	beq.n	800b17a <__gethex+0x386>
 800b198:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1b6:	d01c      	beq.n	800b1f2 <__gethex+0x3fe>
 800b1b8:	3201      	adds	r2, #1
 800b1ba:	6002      	str	r2, [r0, #0]
 800b1bc:	2f02      	cmp	r7, #2
 800b1be:	f104 0314 	add.w	r3, r4, #20
 800b1c2:	d13f      	bne.n	800b244 <__gethex+0x450>
 800b1c4:	f8d8 2000 	ldr.w	r2, [r8]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	42b2      	cmp	r2, r6
 800b1cc:	d10a      	bne.n	800b1e4 <__gethex+0x3f0>
 800b1ce:	1171      	asrs	r1, r6, #5
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1d6:	f006 061f 	and.w	r6, r6, #31
 800b1da:	fa02 f606 	lsl.w	r6, r2, r6
 800b1de:	421e      	tst	r6, r3
 800b1e0:	bf18      	it	ne
 800b1e2:	4617      	movne	r7, r2
 800b1e4:	f047 0720 	orr.w	r7, r7, #32
 800b1e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1ea:	601c      	str	r4, [r3, #0]
 800b1ec:	9b04      	ldr	r3, [sp, #16]
 800b1ee:	601d      	str	r5, [r3, #0]
 800b1f0:	e695      	b.n	800af1e <__gethex+0x12a>
 800b1f2:	4299      	cmp	r1, r3
 800b1f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1f8:	d8d8      	bhi.n	800b1ac <__gethex+0x3b8>
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	459b      	cmp	fp, r3
 800b1fe:	db19      	blt.n	800b234 <__gethex+0x440>
 800b200:	6861      	ldr	r1, [r4, #4]
 800b202:	ee18 0a10 	vmov	r0, s16
 800b206:	3101      	adds	r1, #1
 800b208:	f000 f928 	bl	800b45c <_Balloc>
 800b20c:	4681      	mov	r9, r0
 800b20e:	b918      	cbnz	r0, 800b218 <__gethex+0x424>
 800b210:	4b1a      	ldr	r3, [pc, #104]	; (800b27c <__gethex+0x488>)
 800b212:	4602      	mov	r2, r0
 800b214:	2184      	movs	r1, #132	; 0x84
 800b216:	e6a8      	b.n	800af6a <__gethex+0x176>
 800b218:	6922      	ldr	r2, [r4, #16]
 800b21a:	3202      	adds	r2, #2
 800b21c:	f104 010c 	add.w	r1, r4, #12
 800b220:	0092      	lsls	r2, r2, #2
 800b222:	300c      	adds	r0, #12
 800b224:	f000 f90c 	bl	800b440 <memcpy>
 800b228:	4621      	mov	r1, r4
 800b22a:	ee18 0a10 	vmov	r0, s16
 800b22e:	f000 f955 	bl	800b4dc <_Bfree>
 800b232:	464c      	mov	r4, r9
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b23c:	6122      	str	r2, [r4, #16]
 800b23e:	2201      	movs	r2, #1
 800b240:	615a      	str	r2, [r3, #20]
 800b242:	e7bb      	b.n	800b1bc <__gethex+0x3c8>
 800b244:	6922      	ldr	r2, [r4, #16]
 800b246:	455a      	cmp	r2, fp
 800b248:	dd0b      	ble.n	800b262 <__gethex+0x46e>
 800b24a:	2101      	movs	r1, #1
 800b24c:	4620      	mov	r0, r4
 800b24e:	f7ff fd69 	bl	800ad24 <rshift>
 800b252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b256:	3501      	adds	r5, #1
 800b258:	42ab      	cmp	r3, r5
 800b25a:	f6ff aed0 	blt.w	800affe <__gethex+0x20a>
 800b25e:	2701      	movs	r7, #1
 800b260:	e7c0      	b.n	800b1e4 <__gethex+0x3f0>
 800b262:	f016 061f 	ands.w	r6, r6, #31
 800b266:	d0fa      	beq.n	800b25e <__gethex+0x46a>
 800b268:	4453      	add	r3, sl
 800b26a:	f1c6 0620 	rsb	r6, r6, #32
 800b26e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b272:	f000 f9e5 	bl	800b640 <__hi0bits>
 800b276:	42b0      	cmp	r0, r6
 800b278:	dbe7      	blt.n	800b24a <__gethex+0x456>
 800b27a:	e7f0      	b.n	800b25e <__gethex+0x46a>
 800b27c:	0800d5b8 	.word	0x0800d5b8

0800b280 <L_shift>:
 800b280:	f1c2 0208 	rsb	r2, r2, #8
 800b284:	0092      	lsls	r2, r2, #2
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	f1c2 0620 	rsb	r6, r2, #32
 800b28c:	6843      	ldr	r3, [r0, #4]
 800b28e:	6804      	ldr	r4, [r0, #0]
 800b290:	fa03 f506 	lsl.w	r5, r3, r6
 800b294:	432c      	orrs	r4, r5
 800b296:	40d3      	lsrs	r3, r2
 800b298:	6004      	str	r4, [r0, #0]
 800b29a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b29e:	4288      	cmp	r0, r1
 800b2a0:	d3f4      	bcc.n	800b28c <L_shift+0xc>
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}

0800b2a4 <__match>:
 800b2a4:	b530      	push	{r4, r5, lr}
 800b2a6:	6803      	ldr	r3, [r0, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ae:	b914      	cbnz	r4, 800b2b6 <__match+0x12>
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	bd30      	pop	{r4, r5, pc}
 800b2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2be:	2d19      	cmp	r5, #25
 800b2c0:	bf98      	it	ls
 800b2c2:	3220      	addls	r2, #32
 800b2c4:	42a2      	cmp	r2, r4
 800b2c6:	d0f0      	beq.n	800b2aa <__match+0x6>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e7f3      	b.n	800b2b4 <__match+0x10>

0800b2cc <__hexnan>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	680b      	ldr	r3, [r1, #0]
 800b2d2:	115e      	asrs	r6, r3, #5
 800b2d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2d8:	f013 031f 	ands.w	r3, r3, #31
 800b2dc:	b087      	sub	sp, #28
 800b2de:	bf18      	it	ne
 800b2e0:	3604      	addne	r6, #4
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	1f37      	subs	r7, r6, #4
 800b2e6:	4690      	mov	r8, r2
 800b2e8:	6802      	ldr	r2, [r0, #0]
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2f2:	46b9      	mov	r9, r7
 800b2f4:	463c      	mov	r4, r7
 800b2f6:	9502      	str	r5, [sp, #8]
 800b2f8:	46ab      	mov	fp, r5
 800b2fa:	7851      	ldrb	r1, [r2, #1]
 800b2fc:	1c53      	adds	r3, r2, #1
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	b341      	cbz	r1, 800b354 <__hexnan+0x88>
 800b302:	4608      	mov	r0, r1
 800b304:	9205      	str	r2, [sp, #20]
 800b306:	9104      	str	r1, [sp, #16]
 800b308:	f7ff fd5e 	bl	800adc8 <__hexdig_fun>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d14f      	bne.n	800b3b0 <__hexnan+0xe4>
 800b310:	9904      	ldr	r1, [sp, #16]
 800b312:	9a05      	ldr	r2, [sp, #20]
 800b314:	2920      	cmp	r1, #32
 800b316:	d818      	bhi.n	800b34a <__hexnan+0x7e>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	459b      	cmp	fp, r3
 800b31c:	dd13      	ble.n	800b346 <__hexnan+0x7a>
 800b31e:	454c      	cmp	r4, r9
 800b320:	d206      	bcs.n	800b330 <__hexnan+0x64>
 800b322:	2d07      	cmp	r5, #7
 800b324:	dc04      	bgt.n	800b330 <__hexnan+0x64>
 800b326:	462a      	mov	r2, r5
 800b328:	4649      	mov	r1, r9
 800b32a:	4620      	mov	r0, r4
 800b32c:	f7ff ffa8 	bl	800b280 <L_shift>
 800b330:	4544      	cmp	r4, r8
 800b332:	d950      	bls.n	800b3d6 <__hexnan+0x10a>
 800b334:	2300      	movs	r3, #0
 800b336:	f1a4 0904 	sub.w	r9, r4, #4
 800b33a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b33e:	f8cd b008 	str.w	fp, [sp, #8]
 800b342:	464c      	mov	r4, r9
 800b344:	461d      	mov	r5, r3
 800b346:	9a03      	ldr	r2, [sp, #12]
 800b348:	e7d7      	b.n	800b2fa <__hexnan+0x2e>
 800b34a:	2929      	cmp	r1, #41	; 0x29
 800b34c:	d156      	bne.n	800b3fc <__hexnan+0x130>
 800b34e:	3202      	adds	r2, #2
 800b350:	f8ca 2000 	str.w	r2, [sl]
 800b354:	f1bb 0f00 	cmp.w	fp, #0
 800b358:	d050      	beq.n	800b3fc <__hexnan+0x130>
 800b35a:	454c      	cmp	r4, r9
 800b35c:	d206      	bcs.n	800b36c <__hexnan+0xa0>
 800b35e:	2d07      	cmp	r5, #7
 800b360:	dc04      	bgt.n	800b36c <__hexnan+0xa0>
 800b362:	462a      	mov	r2, r5
 800b364:	4649      	mov	r1, r9
 800b366:	4620      	mov	r0, r4
 800b368:	f7ff ff8a 	bl	800b280 <L_shift>
 800b36c:	4544      	cmp	r4, r8
 800b36e:	d934      	bls.n	800b3da <__hexnan+0x10e>
 800b370:	f1a8 0204 	sub.w	r2, r8, #4
 800b374:	4623      	mov	r3, r4
 800b376:	f853 1b04 	ldr.w	r1, [r3], #4
 800b37a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b37e:	429f      	cmp	r7, r3
 800b380:	d2f9      	bcs.n	800b376 <__hexnan+0xaa>
 800b382:	1b3b      	subs	r3, r7, r4
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	3304      	adds	r3, #4
 800b38a:	3401      	adds	r4, #1
 800b38c:	3e03      	subs	r6, #3
 800b38e:	42b4      	cmp	r4, r6
 800b390:	bf88      	it	hi
 800b392:	2304      	movhi	r3, #4
 800b394:	4443      	add	r3, r8
 800b396:	2200      	movs	r2, #0
 800b398:	f843 2b04 	str.w	r2, [r3], #4
 800b39c:	429f      	cmp	r7, r3
 800b39e:	d2fb      	bcs.n	800b398 <__hexnan+0xcc>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	b91b      	cbnz	r3, 800b3ac <__hexnan+0xe0>
 800b3a4:	4547      	cmp	r7, r8
 800b3a6:	d127      	bne.n	800b3f8 <__hexnan+0x12c>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	2005      	movs	r0, #5
 800b3ae:	e026      	b.n	800b3fe <__hexnan+0x132>
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	2d08      	cmp	r5, #8
 800b3b4:	f10b 0b01 	add.w	fp, fp, #1
 800b3b8:	dd06      	ble.n	800b3c8 <__hexnan+0xfc>
 800b3ba:	4544      	cmp	r4, r8
 800b3bc:	d9c3      	bls.n	800b346 <__hexnan+0x7a>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3c4:	2501      	movs	r5, #1
 800b3c6:	3c04      	subs	r4, #4
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	f000 000f 	and.w	r0, r0, #15
 800b3ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b3d2:	6022      	str	r2, [r4, #0]
 800b3d4:	e7b7      	b.n	800b346 <__hexnan+0x7a>
 800b3d6:	2508      	movs	r5, #8
 800b3d8:	e7b5      	b.n	800b346 <__hexnan+0x7a>
 800b3da:	9b01      	ldr	r3, [sp, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0df      	beq.n	800b3a0 <__hexnan+0xd4>
 800b3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e4:	f1c3 0320 	rsb	r3, r3, #32
 800b3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3f0:	401a      	ands	r2, r3
 800b3f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b3f6:	e7d3      	b.n	800b3a0 <__hexnan+0xd4>
 800b3f8:	3f04      	subs	r7, #4
 800b3fa:	e7d1      	b.n	800b3a0 <__hexnan+0xd4>
 800b3fc:	2004      	movs	r0, #4
 800b3fe:	b007      	add	sp, #28
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b404 <_localeconv_r>:
 800b404:	4800      	ldr	r0, [pc, #0]	; (800b408 <_localeconv_r+0x4>)
 800b406:	4770      	bx	lr
 800b408:	2000017c 	.word	0x2000017c

0800b40c <malloc>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <malloc+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 bd67 	b.w	800bee4 <_malloc_r>
 800b416:	bf00      	nop
 800b418:	20000024 	.word	0x20000024

0800b41c <__ascii_mbtowc>:
 800b41c:	b082      	sub	sp, #8
 800b41e:	b901      	cbnz	r1, 800b422 <__ascii_mbtowc+0x6>
 800b420:	a901      	add	r1, sp, #4
 800b422:	b142      	cbz	r2, 800b436 <__ascii_mbtowc+0x1a>
 800b424:	b14b      	cbz	r3, 800b43a <__ascii_mbtowc+0x1e>
 800b426:	7813      	ldrb	r3, [r2, #0]
 800b428:	600b      	str	r3, [r1, #0]
 800b42a:	7812      	ldrb	r2, [r2, #0]
 800b42c:	1e10      	subs	r0, r2, #0
 800b42e:	bf18      	it	ne
 800b430:	2001      	movne	r0, #1
 800b432:	b002      	add	sp, #8
 800b434:	4770      	bx	lr
 800b436:	4610      	mov	r0, r2
 800b438:	e7fb      	b.n	800b432 <__ascii_mbtowc+0x16>
 800b43a:	f06f 0001 	mvn.w	r0, #1
 800b43e:	e7f8      	b.n	800b432 <__ascii_mbtowc+0x16>

0800b440 <memcpy>:
 800b440:	440a      	add	r2, r1
 800b442:	4291      	cmp	r1, r2
 800b444:	f100 33ff 	add.w	r3, r0, #4294967295
 800b448:	d100      	bne.n	800b44c <memcpy+0xc>
 800b44a:	4770      	bx	lr
 800b44c:	b510      	push	{r4, lr}
 800b44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b456:	4291      	cmp	r1, r2
 800b458:	d1f9      	bne.n	800b44e <memcpy+0xe>
 800b45a:	bd10      	pop	{r4, pc}

0800b45c <_Balloc>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
 800b464:	b976      	cbnz	r6, 800b484 <_Balloc+0x28>
 800b466:	2010      	movs	r0, #16
 800b468:	f7ff ffd0 	bl	800b40c <malloc>
 800b46c:	4602      	mov	r2, r0
 800b46e:	6260      	str	r0, [r4, #36]	; 0x24
 800b470:	b920      	cbnz	r0, 800b47c <_Balloc+0x20>
 800b472:	4b18      	ldr	r3, [pc, #96]	; (800b4d4 <_Balloc+0x78>)
 800b474:	4818      	ldr	r0, [pc, #96]	; (800b4d8 <_Balloc+0x7c>)
 800b476:	2166      	movs	r1, #102	; 0x66
 800b478:	f000 ff40 	bl	800c2fc <__assert_func>
 800b47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b480:	6006      	str	r6, [r0, #0]
 800b482:	60c6      	str	r6, [r0, #12]
 800b484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b486:	68f3      	ldr	r3, [r6, #12]
 800b488:	b183      	cbz	r3, 800b4ac <_Balloc+0x50>
 800b48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b492:	b9b8      	cbnz	r0, 800b4c4 <_Balloc+0x68>
 800b494:	2101      	movs	r1, #1
 800b496:	fa01 f605 	lsl.w	r6, r1, r5
 800b49a:	1d72      	adds	r2, r6, #5
 800b49c:	0092      	lsls	r2, r2, #2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fc9d 	bl	800bdde <_calloc_r>
 800b4a4:	b160      	cbz	r0, 800b4c0 <_Balloc+0x64>
 800b4a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4aa:	e00e      	b.n	800b4ca <_Balloc+0x6e>
 800b4ac:	2221      	movs	r2, #33	; 0x21
 800b4ae:	2104      	movs	r1, #4
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 fc94 	bl	800bdde <_calloc_r>
 800b4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4b8:	60f0      	str	r0, [r6, #12]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1e4      	bne.n	800b48a <_Balloc+0x2e>
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	6802      	ldr	r2, [r0, #0]
 800b4c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4d0:	e7f7      	b.n	800b4c2 <_Balloc+0x66>
 800b4d2:	bf00      	nop
 800b4d4:	0800d546 	.word	0x0800d546
 800b4d8:	0800d644 	.word	0x0800d644

0800b4dc <_Bfree>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	b976      	cbnz	r6, 800b504 <_Bfree+0x28>
 800b4e6:	2010      	movs	r0, #16
 800b4e8:	f7ff ff90 	bl	800b40c <malloc>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	6268      	str	r0, [r5, #36]	; 0x24
 800b4f0:	b920      	cbnz	r0, 800b4fc <_Bfree+0x20>
 800b4f2:	4b09      	ldr	r3, [pc, #36]	; (800b518 <_Bfree+0x3c>)
 800b4f4:	4809      	ldr	r0, [pc, #36]	; (800b51c <_Bfree+0x40>)
 800b4f6:	218a      	movs	r1, #138	; 0x8a
 800b4f8:	f000 ff00 	bl	800c2fc <__assert_func>
 800b4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b500:	6006      	str	r6, [r0, #0]
 800b502:	60c6      	str	r6, [r0, #12]
 800b504:	b13c      	cbz	r4, 800b516 <_Bfree+0x3a>
 800b506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b508:	6862      	ldr	r2, [r4, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b510:	6021      	str	r1, [r4, #0]
 800b512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	0800d546 	.word	0x0800d546
 800b51c:	0800d644 	.word	0x0800d644

0800b520 <__multadd>:
 800b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b524:	690d      	ldr	r5, [r1, #16]
 800b526:	4607      	mov	r7, r0
 800b528:	460c      	mov	r4, r1
 800b52a:	461e      	mov	r6, r3
 800b52c:	f101 0c14 	add.w	ip, r1, #20
 800b530:	2000      	movs	r0, #0
 800b532:	f8dc 3000 	ldr.w	r3, [ip]
 800b536:	b299      	uxth	r1, r3
 800b538:	fb02 6101 	mla	r1, r2, r1, r6
 800b53c:	0c1e      	lsrs	r6, r3, #16
 800b53e:	0c0b      	lsrs	r3, r1, #16
 800b540:	fb02 3306 	mla	r3, r2, r6, r3
 800b544:	b289      	uxth	r1, r1
 800b546:	3001      	adds	r0, #1
 800b548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b54c:	4285      	cmp	r5, r0
 800b54e:	f84c 1b04 	str.w	r1, [ip], #4
 800b552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b556:	dcec      	bgt.n	800b532 <__multadd+0x12>
 800b558:	b30e      	cbz	r6, 800b59e <__multadd+0x7e>
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dc19      	bgt.n	800b594 <__multadd+0x74>
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	4638      	mov	r0, r7
 800b564:	3101      	adds	r1, #1
 800b566:	f7ff ff79 	bl	800b45c <_Balloc>
 800b56a:	4680      	mov	r8, r0
 800b56c:	b928      	cbnz	r0, 800b57a <__multadd+0x5a>
 800b56e:	4602      	mov	r2, r0
 800b570:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <__multadd+0x84>)
 800b572:	480d      	ldr	r0, [pc, #52]	; (800b5a8 <__multadd+0x88>)
 800b574:	21b5      	movs	r1, #181	; 0xb5
 800b576:	f000 fec1 	bl	800c2fc <__assert_func>
 800b57a:	6922      	ldr	r2, [r4, #16]
 800b57c:	3202      	adds	r2, #2
 800b57e:	f104 010c 	add.w	r1, r4, #12
 800b582:	0092      	lsls	r2, r2, #2
 800b584:	300c      	adds	r0, #12
 800b586:	f7ff ff5b 	bl	800b440 <memcpy>
 800b58a:	4621      	mov	r1, r4
 800b58c:	4638      	mov	r0, r7
 800b58e:	f7ff ffa5 	bl	800b4dc <_Bfree>
 800b592:	4644      	mov	r4, r8
 800b594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b598:	3501      	adds	r5, #1
 800b59a:	615e      	str	r6, [r3, #20]
 800b59c:	6125      	str	r5, [r4, #16]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a4:	0800d5b8 	.word	0x0800d5b8
 800b5a8:	0800d644 	.word	0x0800d644

0800b5ac <__s2b>:
 800b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	4615      	mov	r5, r2
 800b5b4:	461f      	mov	r7, r3
 800b5b6:	2209      	movs	r2, #9
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	db09      	blt.n	800b5dc <__s2b+0x30>
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7ff ff47 	bl	800b45c <_Balloc>
 800b5ce:	b940      	cbnz	r0, 800b5e2 <__s2b+0x36>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	4b19      	ldr	r3, [pc, #100]	; (800b638 <__s2b+0x8c>)
 800b5d4:	4819      	ldr	r0, [pc, #100]	; (800b63c <__s2b+0x90>)
 800b5d6:	21ce      	movs	r1, #206	; 0xce
 800b5d8:	f000 fe90 	bl	800c2fc <__assert_func>
 800b5dc:	0052      	lsls	r2, r2, #1
 800b5de:	3101      	adds	r1, #1
 800b5e0:	e7f0      	b.n	800b5c4 <__s2b+0x18>
 800b5e2:	9b08      	ldr	r3, [sp, #32]
 800b5e4:	6143      	str	r3, [r0, #20]
 800b5e6:	2d09      	cmp	r5, #9
 800b5e8:	f04f 0301 	mov.w	r3, #1
 800b5ec:	6103      	str	r3, [r0, #16]
 800b5ee:	dd16      	ble.n	800b61e <__s2b+0x72>
 800b5f0:	f104 0909 	add.w	r9, r4, #9
 800b5f4:	46c8      	mov	r8, r9
 800b5f6:	442c      	add	r4, r5
 800b5f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	3b30      	subs	r3, #48	; 0x30
 800b600:	220a      	movs	r2, #10
 800b602:	4630      	mov	r0, r6
 800b604:	f7ff ff8c 	bl	800b520 <__multadd>
 800b608:	45a0      	cmp	r8, r4
 800b60a:	d1f5      	bne.n	800b5f8 <__s2b+0x4c>
 800b60c:	f1a5 0408 	sub.w	r4, r5, #8
 800b610:	444c      	add	r4, r9
 800b612:	1b2d      	subs	r5, r5, r4
 800b614:	1963      	adds	r3, r4, r5
 800b616:	42bb      	cmp	r3, r7
 800b618:	db04      	blt.n	800b624 <__s2b+0x78>
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61e:	340a      	adds	r4, #10
 800b620:	2509      	movs	r5, #9
 800b622:	e7f6      	b.n	800b612 <__s2b+0x66>
 800b624:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b628:	4601      	mov	r1, r0
 800b62a:	3b30      	subs	r3, #48	; 0x30
 800b62c:	220a      	movs	r2, #10
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff76 	bl	800b520 <__multadd>
 800b634:	e7ee      	b.n	800b614 <__s2b+0x68>
 800b636:	bf00      	nop
 800b638:	0800d5b8 	.word	0x0800d5b8
 800b63c:	0800d644 	.word	0x0800d644

0800b640 <__hi0bits>:
 800b640:	0c03      	lsrs	r3, r0, #16
 800b642:	041b      	lsls	r3, r3, #16
 800b644:	b9d3      	cbnz	r3, 800b67c <__hi0bits+0x3c>
 800b646:	0400      	lsls	r0, r0, #16
 800b648:	2310      	movs	r3, #16
 800b64a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b64e:	bf04      	itt	eq
 800b650:	0200      	lsleq	r0, r0, #8
 800b652:	3308      	addeq	r3, #8
 800b654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b658:	bf04      	itt	eq
 800b65a:	0100      	lsleq	r0, r0, #4
 800b65c:	3304      	addeq	r3, #4
 800b65e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b662:	bf04      	itt	eq
 800b664:	0080      	lsleq	r0, r0, #2
 800b666:	3302      	addeq	r3, #2
 800b668:	2800      	cmp	r0, #0
 800b66a:	db05      	blt.n	800b678 <__hi0bits+0x38>
 800b66c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b670:	f103 0301 	add.w	r3, r3, #1
 800b674:	bf08      	it	eq
 800b676:	2320      	moveq	r3, #32
 800b678:	4618      	mov	r0, r3
 800b67a:	4770      	bx	lr
 800b67c:	2300      	movs	r3, #0
 800b67e:	e7e4      	b.n	800b64a <__hi0bits+0xa>

0800b680 <__lo0bits>:
 800b680:	6803      	ldr	r3, [r0, #0]
 800b682:	f013 0207 	ands.w	r2, r3, #7
 800b686:	4601      	mov	r1, r0
 800b688:	d00b      	beq.n	800b6a2 <__lo0bits+0x22>
 800b68a:	07da      	lsls	r2, r3, #31
 800b68c:	d423      	bmi.n	800b6d6 <__lo0bits+0x56>
 800b68e:	0798      	lsls	r0, r3, #30
 800b690:	bf49      	itett	mi
 800b692:	085b      	lsrmi	r3, r3, #1
 800b694:	089b      	lsrpl	r3, r3, #2
 800b696:	2001      	movmi	r0, #1
 800b698:	600b      	strmi	r3, [r1, #0]
 800b69a:	bf5c      	itt	pl
 800b69c:	600b      	strpl	r3, [r1, #0]
 800b69e:	2002      	movpl	r0, #2
 800b6a0:	4770      	bx	lr
 800b6a2:	b298      	uxth	r0, r3
 800b6a4:	b9a8      	cbnz	r0, 800b6d2 <__lo0bits+0x52>
 800b6a6:	0c1b      	lsrs	r3, r3, #16
 800b6a8:	2010      	movs	r0, #16
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	b90a      	cbnz	r2, 800b6b2 <__lo0bits+0x32>
 800b6ae:	3008      	adds	r0, #8
 800b6b0:	0a1b      	lsrs	r3, r3, #8
 800b6b2:	071a      	lsls	r2, r3, #28
 800b6b4:	bf04      	itt	eq
 800b6b6:	091b      	lsreq	r3, r3, #4
 800b6b8:	3004      	addeq	r0, #4
 800b6ba:	079a      	lsls	r2, r3, #30
 800b6bc:	bf04      	itt	eq
 800b6be:	089b      	lsreq	r3, r3, #2
 800b6c0:	3002      	addeq	r0, #2
 800b6c2:	07da      	lsls	r2, r3, #31
 800b6c4:	d403      	bmi.n	800b6ce <__lo0bits+0x4e>
 800b6c6:	085b      	lsrs	r3, r3, #1
 800b6c8:	f100 0001 	add.w	r0, r0, #1
 800b6cc:	d005      	beq.n	800b6da <__lo0bits+0x5a>
 800b6ce:	600b      	str	r3, [r1, #0]
 800b6d0:	4770      	bx	lr
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	e7e9      	b.n	800b6aa <__lo0bits+0x2a>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	4770      	bx	lr
 800b6da:	2020      	movs	r0, #32
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <__i2b>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	f7ff feb9 	bl	800b45c <_Balloc>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	b928      	cbnz	r0, 800b6fa <__i2b+0x1a>
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <__i2b+0x24>)
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <__i2b+0x28>)
 800b6f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6f6:	f000 fe01 	bl	800c2fc <__assert_func>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	6144      	str	r4, [r0, #20]
 800b6fe:	6103      	str	r3, [r0, #16]
 800b700:	bd10      	pop	{r4, pc}
 800b702:	bf00      	nop
 800b704:	0800d5b8 	.word	0x0800d5b8
 800b708:	0800d644 	.word	0x0800d644

0800b70c <__multiply>:
 800b70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	4691      	mov	r9, r2
 800b712:	690a      	ldr	r2, [r1, #16]
 800b714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b718:	429a      	cmp	r2, r3
 800b71a:	bfb8      	it	lt
 800b71c:	460b      	movlt	r3, r1
 800b71e:	460c      	mov	r4, r1
 800b720:	bfbc      	itt	lt
 800b722:	464c      	movlt	r4, r9
 800b724:	4699      	movlt	r9, r3
 800b726:	6927      	ldr	r7, [r4, #16]
 800b728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b72c:	68a3      	ldr	r3, [r4, #8]
 800b72e:	6861      	ldr	r1, [r4, #4]
 800b730:	eb07 060a 	add.w	r6, r7, sl
 800b734:	42b3      	cmp	r3, r6
 800b736:	b085      	sub	sp, #20
 800b738:	bfb8      	it	lt
 800b73a:	3101      	addlt	r1, #1
 800b73c:	f7ff fe8e 	bl	800b45c <_Balloc>
 800b740:	b930      	cbnz	r0, 800b750 <__multiply+0x44>
 800b742:	4602      	mov	r2, r0
 800b744:	4b44      	ldr	r3, [pc, #272]	; (800b858 <__multiply+0x14c>)
 800b746:	4845      	ldr	r0, [pc, #276]	; (800b85c <__multiply+0x150>)
 800b748:	f240 115d 	movw	r1, #349	; 0x15d
 800b74c:	f000 fdd6 	bl	800c2fc <__assert_func>
 800b750:	f100 0514 	add.w	r5, r0, #20
 800b754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b758:	462b      	mov	r3, r5
 800b75a:	2200      	movs	r2, #0
 800b75c:	4543      	cmp	r3, r8
 800b75e:	d321      	bcc.n	800b7a4 <__multiply+0x98>
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b768:	f109 0314 	add.w	r3, r9, #20
 800b76c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b770:	9202      	str	r2, [sp, #8]
 800b772:	1b3a      	subs	r2, r7, r4
 800b774:	3a15      	subs	r2, #21
 800b776:	f022 0203 	bic.w	r2, r2, #3
 800b77a:	3204      	adds	r2, #4
 800b77c:	f104 0115 	add.w	r1, r4, #21
 800b780:	428f      	cmp	r7, r1
 800b782:	bf38      	it	cc
 800b784:	2204      	movcc	r2, #4
 800b786:	9201      	str	r2, [sp, #4]
 800b788:	9a02      	ldr	r2, [sp, #8]
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d80c      	bhi.n	800b7aa <__multiply+0x9e>
 800b790:	2e00      	cmp	r6, #0
 800b792:	dd03      	ble.n	800b79c <__multiply+0x90>
 800b794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d05a      	beq.n	800b852 <__multiply+0x146>
 800b79c:	6106      	str	r6, [r0, #16]
 800b79e:	b005      	add	sp, #20
 800b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a4:	f843 2b04 	str.w	r2, [r3], #4
 800b7a8:	e7d8      	b.n	800b75c <__multiply+0x50>
 800b7aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7ae:	f1ba 0f00 	cmp.w	sl, #0
 800b7b2:	d024      	beq.n	800b7fe <__multiply+0xf2>
 800b7b4:	f104 0e14 	add.w	lr, r4, #20
 800b7b8:	46a9      	mov	r9, r5
 800b7ba:	f04f 0c00 	mov.w	ip, #0
 800b7be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7c2:	f8d9 1000 	ldr.w	r1, [r9]
 800b7c6:	fa1f fb82 	uxth.w	fp, r2
 800b7ca:	b289      	uxth	r1, r1
 800b7cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7d4:	f8d9 2000 	ldr.w	r2, [r9]
 800b7d8:	4461      	add	r1, ip
 800b7da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7de:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7e6:	b289      	uxth	r1, r1
 800b7e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7ec:	4577      	cmp	r7, lr
 800b7ee:	f849 1b04 	str.w	r1, [r9], #4
 800b7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7f6:	d8e2      	bhi.n	800b7be <__multiply+0xb2>
 800b7f8:	9a01      	ldr	r2, [sp, #4]
 800b7fa:	f845 c002 	str.w	ip, [r5, r2]
 800b7fe:	9a03      	ldr	r2, [sp, #12]
 800b800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b804:	3304      	adds	r3, #4
 800b806:	f1b9 0f00 	cmp.w	r9, #0
 800b80a:	d020      	beq.n	800b84e <__multiply+0x142>
 800b80c:	6829      	ldr	r1, [r5, #0]
 800b80e:	f104 0c14 	add.w	ip, r4, #20
 800b812:	46ae      	mov	lr, r5
 800b814:	f04f 0a00 	mov.w	sl, #0
 800b818:	f8bc b000 	ldrh.w	fp, [ip]
 800b81c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b820:	fb09 220b 	mla	r2, r9, fp, r2
 800b824:	4492      	add	sl, r2
 800b826:	b289      	uxth	r1, r1
 800b828:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b82c:	f84e 1b04 	str.w	r1, [lr], #4
 800b830:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b834:	f8be 1000 	ldrh.w	r1, [lr]
 800b838:	0c12      	lsrs	r2, r2, #16
 800b83a:	fb09 1102 	mla	r1, r9, r2, r1
 800b83e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b842:	4567      	cmp	r7, ip
 800b844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b848:	d8e6      	bhi.n	800b818 <__multiply+0x10c>
 800b84a:	9a01      	ldr	r2, [sp, #4]
 800b84c:	50a9      	str	r1, [r5, r2]
 800b84e:	3504      	adds	r5, #4
 800b850:	e79a      	b.n	800b788 <__multiply+0x7c>
 800b852:	3e01      	subs	r6, #1
 800b854:	e79c      	b.n	800b790 <__multiply+0x84>
 800b856:	bf00      	nop
 800b858:	0800d5b8 	.word	0x0800d5b8
 800b85c:	0800d644 	.word	0x0800d644

0800b860 <__pow5mult>:
 800b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b864:	4615      	mov	r5, r2
 800b866:	f012 0203 	ands.w	r2, r2, #3
 800b86a:	4606      	mov	r6, r0
 800b86c:	460f      	mov	r7, r1
 800b86e:	d007      	beq.n	800b880 <__pow5mult+0x20>
 800b870:	4c25      	ldr	r4, [pc, #148]	; (800b908 <__pow5mult+0xa8>)
 800b872:	3a01      	subs	r2, #1
 800b874:	2300      	movs	r3, #0
 800b876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b87a:	f7ff fe51 	bl	800b520 <__multadd>
 800b87e:	4607      	mov	r7, r0
 800b880:	10ad      	asrs	r5, r5, #2
 800b882:	d03d      	beq.n	800b900 <__pow5mult+0xa0>
 800b884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b886:	b97c      	cbnz	r4, 800b8a8 <__pow5mult+0x48>
 800b888:	2010      	movs	r0, #16
 800b88a:	f7ff fdbf 	bl	800b40c <malloc>
 800b88e:	4602      	mov	r2, r0
 800b890:	6270      	str	r0, [r6, #36]	; 0x24
 800b892:	b928      	cbnz	r0, 800b8a0 <__pow5mult+0x40>
 800b894:	4b1d      	ldr	r3, [pc, #116]	; (800b90c <__pow5mult+0xac>)
 800b896:	481e      	ldr	r0, [pc, #120]	; (800b910 <__pow5mult+0xb0>)
 800b898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b89c:	f000 fd2e 	bl	800c2fc <__assert_func>
 800b8a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8a4:	6004      	str	r4, [r0, #0]
 800b8a6:	60c4      	str	r4, [r0, #12]
 800b8a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8b0:	b94c      	cbnz	r4, 800b8c6 <__pow5mult+0x66>
 800b8b2:	f240 2171 	movw	r1, #625	; 0x271
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff ff12 	bl	800b6e0 <__i2b>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	f04f 0900 	mov.w	r9, #0
 800b8ca:	07eb      	lsls	r3, r5, #31
 800b8cc:	d50a      	bpl.n	800b8e4 <__pow5mult+0x84>
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7ff ff1a 	bl	800b70c <__multiply>
 800b8d8:	4639      	mov	r1, r7
 800b8da:	4680      	mov	r8, r0
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f7ff fdfd 	bl	800b4dc <_Bfree>
 800b8e2:	4647      	mov	r7, r8
 800b8e4:	106d      	asrs	r5, r5, #1
 800b8e6:	d00b      	beq.n	800b900 <__pow5mult+0xa0>
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	b938      	cbnz	r0, 800b8fc <__pow5mult+0x9c>
 800b8ec:	4622      	mov	r2, r4
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7ff ff0b 	bl	800b70c <__multiply>
 800b8f6:	6020      	str	r0, [r4, #0]
 800b8f8:	f8c0 9000 	str.w	r9, [r0]
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	e7e4      	b.n	800b8ca <__pow5mult+0x6a>
 800b900:	4638      	mov	r0, r7
 800b902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b906:	bf00      	nop
 800b908:	0800d790 	.word	0x0800d790
 800b90c:	0800d546 	.word	0x0800d546
 800b910:	0800d644 	.word	0x0800d644

0800b914 <__lshift>:
 800b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b918:	460c      	mov	r4, r1
 800b91a:	6849      	ldr	r1, [r1, #4]
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	4607      	mov	r7, r0
 800b926:	4691      	mov	r9, r2
 800b928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b92c:	f108 0601 	add.w	r6, r8, #1
 800b930:	42b3      	cmp	r3, r6
 800b932:	db0b      	blt.n	800b94c <__lshift+0x38>
 800b934:	4638      	mov	r0, r7
 800b936:	f7ff fd91 	bl	800b45c <_Balloc>
 800b93a:	4605      	mov	r5, r0
 800b93c:	b948      	cbnz	r0, 800b952 <__lshift+0x3e>
 800b93e:	4602      	mov	r2, r0
 800b940:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <__lshift+0xd8>)
 800b942:	482b      	ldr	r0, [pc, #172]	; (800b9f0 <__lshift+0xdc>)
 800b944:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b948:	f000 fcd8 	bl	800c2fc <__assert_func>
 800b94c:	3101      	adds	r1, #1
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	e7ee      	b.n	800b930 <__lshift+0x1c>
 800b952:	2300      	movs	r3, #0
 800b954:	f100 0114 	add.w	r1, r0, #20
 800b958:	f100 0210 	add.w	r2, r0, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	4553      	cmp	r3, sl
 800b960:	db37      	blt.n	800b9d2 <__lshift+0xbe>
 800b962:	6920      	ldr	r0, [r4, #16]
 800b964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b968:	f104 0314 	add.w	r3, r4, #20
 800b96c:	f019 091f 	ands.w	r9, r9, #31
 800b970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b978:	d02f      	beq.n	800b9da <__lshift+0xc6>
 800b97a:	f1c9 0e20 	rsb	lr, r9, #32
 800b97e:	468a      	mov	sl, r1
 800b980:	f04f 0c00 	mov.w	ip, #0
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	fa02 f209 	lsl.w	r2, r2, r9
 800b98a:	ea42 020c 	orr.w	r2, r2, ip
 800b98e:	f84a 2b04 	str.w	r2, [sl], #4
 800b992:	f853 2b04 	ldr.w	r2, [r3], #4
 800b996:	4298      	cmp	r0, r3
 800b998:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b99c:	d8f2      	bhi.n	800b984 <__lshift+0x70>
 800b99e:	1b03      	subs	r3, r0, r4
 800b9a0:	3b15      	subs	r3, #21
 800b9a2:	f023 0303 	bic.w	r3, r3, #3
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	f104 0215 	add.w	r2, r4, #21
 800b9ac:	4290      	cmp	r0, r2
 800b9ae:	bf38      	it	cc
 800b9b0:	2304      	movcc	r3, #4
 800b9b2:	f841 c003 	str.w	ip, [r1, r3]
 800b9b6:	f1bc 0f00 	cmp.w	ip, #0
 800b9ba:	d001      	beq.n	800b9c0 <__lshift+0xac>
 800b9bc:	f108 0602 	add.w	r6, r8, #2
 800b9c0:	3e01      	subs	r6, #1
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	612e      	str	r6, [r5, #16]
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	f7ff fd88 	bl	800b4dc <_Bfree>
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	e7c1      	b.n	800b95e <__lshift+0x4a>
 800b9da:	3904      	subs	r1, #4
 800b9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9e4:	4298      	cmp	r0, r3
 800b9e6:	d8f9      	bhi.n	800b9dc <__lshift+0xc8>
 800b9e8:	e7ea      	b.n	800b9c0 <__lshift+0xac>
 800b9ea:	bf00      	nop
 800b9ec:	0800d5b8 	.word	0x0800d5b8
 800b9f0:	0800d644 	.word	0x0800d644

0800b9f4 <__mcmp>:
 800b9f4:	b530      	push	{r4, r5, lr}
 800b9f6:	6902      	ldr	r2, [r0, #16]
 800b9f8:	690c      	ldr	r4, [r1, #16]
 800b9fa:	1b12      	subs	r2, r2, r4
 800b9fc:	d10e      	bne.n	800ba1c <__mcmp+0x28>
 800b9fe:	f100 0314 	add.w	r3, r0, #20
 800ba02:	3114      	adds	r1, #20
 800ba04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba14:	42a5      	cmp	r5, r4
 800ba16:	d003      	beq.n	800ba20 <__mcmp+0x2c>
 800ba18:	d305      	bcc.n	800ba26 <__mcmp+0x32>
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	bd30      	pop	{r4, r5, pc}
 800ba20:	4283      	cmp	r3, r0
 800ba22:	d3f3      	bcc.n	800ba0c <__mcmp+0x18>
 800ba24:	e7fa      	b.n	800ba1c <__mcmp+0x28>
 800ba26:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2a:	e7f7      	b.n	800ba1c <__mcmp+0x28>

0800ba2c <__mdiff>:
 800ba2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	460c      	mov	r4, r1
 800ba32:	4606      	mov	r6, r0
 800ba34:	4611      	mov	r1, r2
 800ba36:	4620      	mov	r0, r4
 800ba38:	4690      	mov	r8, r2
 800ba3a:	f7ff ffdb 	bl	800b9f4 <__mcmp>
 800ba3e:	1e05      	subs	r5, r0, #0
 800ba40:	d110      	bne.n	800ba64 <__mdiff+0x38>
 800ba42:	4629      	mov	r1, r5
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff fd09 	bl	800b45c <_Balloc>
 800ba4a:	b930      	cbnz	r0, 800ba5a <__mdiff+0x2e>
 800ba4c:	4b3a      	ldr	r3, [pc, #232]	; (800bb38 <__mdiff+0x10c>)
 800ba4e:	4602      	mov	r2, r0
 800ba50:	f240 2132 	movw	r1, #562	; 0x232
 800ba54:	4839      	ldr	r0, [pc, #228]	; (800bb3c <__mdiff+0x110>)
 800ba56:	f000 fc51 	bl	800c2fc <__assert_func>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba64:	bfa4      	itt	ge
 800ba66:	4643      	movge	r3, r8
 800ba68:	46a0      	movge	r8, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba70:	bfa6      	itte	ge
 800ba72:	461c      	movge	r4, r3
 800ba74:	2500      	movge	r5, #0
 800ba76:	2501      	movlt	r5, #1
 800ba78:	f7ff fcf0 	bl	800b45c <_Balloc>
 800ba7c:	b920      	cbnz	r0, 800ba88 <__mdiff+0x5c>
 800ba7e:	4b2e      	ldr	r3, [pc, #184]	; (800bb38 <__mdiff+0x10c>)
 800ba80:	4602      	mov	r2, r0
 800ba82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba86:	e7e5      	b.n	800ba54 <__mdiff+0x28>
 800ba88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba8c:	6926      	ldr	r6, [r4, #16]
 800ba8e:	60c5      	str	r5, [r0, #12]
 800ba90:	f104 0914 	add.w	r9, r4, #20
 800ba94:	f108 0514 	add.w	r5, r8, #20
 800ba98:	f100 0e14 	add.w	lr, r0, #20
 800ba9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800baa4:	f108 0210 	add.w	r2, r8, #16
 800baa8:	46f2      	mov	sl, lr
 800baaa:	2100      	movs	r1, #0
 800baac:	f859 3b04 	ldr.w	r3, [r9], #4
 800bab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bab4:	fa1f f883 	uxth.w	r8, r3
 800bab8:	fa11 f18b 	uxtah	r1, r1, fp
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	eba1 0808 	sub.w	r8, r1, r8
 800bac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baca:	fa1f f888 	uxth.w	r8, r8
 800bace:	1419      	asrs	r1, r3, #16
 800bad0:	454e      	cmp	r6, r9
 800bad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bad6:	f84a 3b04 	str.w	r3, [sl], #4
 800bada:	d8e7      	bhi.n	800baac <__mdiff+0x80>
 800badc:	1b33      	subs	r3, r6, r4
 800bade:	3b15      	subs	r3, #21
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	3304      	adds	r3, #4
 800bae6:	3415      	adds	r4, #21
 800bae8:	42a6      	cmp	r6, r4
 800baea:	bf38      	it	cc
 800baec:	2304      	movcc	r3, #4
 800baee:	441d      	add	r5, r3
 800baf0:	4473      	add	r3, lr
 800baf2:	469e      	mov	lr, r3
 800baf4:	462e      	mov	r6, r5
 800baf6:	4566      	cmp	r6, ip
 800baf8:	d30e      	bcc.n	800bb18 <__mdiff+0xec>
 800bafa:	f10c 0203 	add.w	r2, ip, #3
 800bafe:	1b52      	subs	r2, r2, r5
 800bb00:	f022 0203 	bic.w	r2, r2, #3
 800bb04:	3d03      	subs	r5, #3
 800bb06:	45ac      	cmp	ip, r5
 800bb08:	bf38      	it	cc
 800bb0a:	2200      	movcc	r2, #0
 800bb0c:	441a      	add	r2, r3
 800bb0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb12:	b17b      	cbz	r3, 800bb34 <__mdiff+0x108>
 800bb14:	6107      	str	r7, [r0, #16]
 800bb16:	e7a3      	b.n	800ba60 <__mdiff+0x34>
 800bb18:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb1c:	fa11 f288 	uxtah	r2, r1, r8
 800bb20:	1414      	asrs	r4, r2, #16
 800bb22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb26:	b292      	uxth	r2, r2
 800bb28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb2c:	f84e 2b04 	str.w	r2, [lr], #4
 800bb30:	1421      	asrs	r1, r4, #16
 800bb32:	e7e0      	b.n	800baf6 <__mdiff+0xca>
 800bb34:	3f01      	subs	r7, #1
 800bb36:	e7ea      	b.n	800bb0e <__mdiff+0xe2>
 800bb38:	0800d5b8 	.word	0x0800d5b8
 800bb3c:	0800d644 	.word	0x0800d644

0800bb40 <__ulp>:
 800bb40:	b082      	sub	sp, #8
 800bb42:	ed8d 0b00 	vstr	d0, [sp]
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	4912      	ldr	r1, [pc, #72]	; (800bb94 <__ulp+0x54>)
 800bb4a:	4019      	ands	r1, r3
 800bb4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bb50:	2900      	cmp	r1, #0
 800bb52:	dd05      	ble.n	800bb60 <__ulp+0x20>
 800bb54:	2200      	movs	r2, #0
 800bb56:	460b      	mov	r3, r1
 800bb58:	ec43 2b10 	vmov	d0, r2, r3
 800bb5c:	b002      	add	sp, #8
 800bb5e:	4770      	bx	lr
 800bb60:	4249      	negs	r1, r1
 800bb62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bb66:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bb6a:	f04f 0200 	mov.w	r2, #0
 800bb6e:	f04f 0300 	mov.w	r3, #0
 800bb72:	da04      	bge.n	800bb7e <__ulp+0x3e>
 800bb74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb78:	fa41 f300 	asr.w	r3, r1, r0
 800bb7c:	e7ec      	b.n	800bb58 <__ulp+0x18>
 800bb7e:	f1a0 0114 	sub.w	r1, r0, #20
 800bb82:	291e      	cmp	r1, #30
 800bb84:	bfda      	itte	le
 800bb86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bb8a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bb8e:	2101      	movgt	r1, #1
 800bb90:	460a      	mov	r2, r1
 800bb92:	e7e1      	b.n	800bb58 <__ulp+0x18>
 800bb94:	7ff00000 	.word	0x7ff00000

0800bb98 <__b2d>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	6905      	ldr	r5, [r0, #16]
 800bb9c:	f100 0714 	add.w	r7, r0, #20
 800bba0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bba4:	1f2e      	subs	r6, r5, #4
 800bba6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff fd48 	bl	800b640 <__hi0bits>
 800bbb0:	f1c0 0320 	rsb	r3, r0, #32
 800bbb4:	280a      	cmp	r0, #10
 800bbb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bc34 <__b2d+0x9c>
 800bbba:	600b      	str	r3, [r1, #0]
 800bbbc:	dc14      	bgt.n	800bbe8 <__b2d+0x50>
 800bbbe:	f1c0 0e0b 	rsb	lr, r0, #11
 800bbc2:	fa24 f10e 	lsr.w	r1, r4, lr
 800bbc6:	42b7      	cmp	r7, r6
 800bbc8:	ea41 030c 	orr.w	r3, r1, ip
 800bbcc:	bf34      	ite	cc
 800bbce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbd2:	2100      	movcs	r1, #0
 800bbd4:	3015      	adds	r0, #21
 800bbd6:	fa04 f000 	lsl.w	r0, r4, r0
 800bbda:	fa21 f10e 	lsr.w	r1, r1, lr
 800bbde:	ea40 0201 	orr.w	r2, r0, r1
 800bbe2:	ec43 2b10 	vmov	d0, r2, r3
 800bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe8:	42b7      	cmp	r7, r6
 800bbea:	bf3a      	itte	cc
 800bbec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbf0:	f1a5 0608 	subcc.w	r6, r5, #8
 800bbf4:	2100      	movcs	r1, #0
 800bbf6:	380b      	subs	r0, #11
 800bbf8:	d017      	beq.n	800bc2a <__b2d+0x92>
 800bbfa:	f1c0 0c20 	rsb	ip, r0, #32
 800bbfe:	fa04 f500 	lsl.w	r5, r4, r0
 800bc02:	42be      	cmp	r6, r7
 800bc04:	fa21 f40c 	lsr.w	r4, r1, ip
 800bc08:	ea45 0504 	orr.w	r5, r5, r4
 800bc0c:	bf8c      	ite	hi
 800bc0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc12:	2400      	movls	r4, #0
 800bc14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bc18:	fa01 f000 	lsl.w	r0, r1, r0
 800bc1c:	fa24 f40c 	lsr.w	r4, r4, ip
 800bc20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc24:	ea40 0204 	orr.w	r2, r0, r4
 800bc28:	e7db      	b.n	800bbe2 <__b2d+0x4a>
 800bc2a:	ea44 030c 	orr.w	r3, r4, ip
 800bc2e:	460a      	mov	r2, r1
 800bc30:	e7d7      	b.n	800bbe2 <__b2d+0x4a>
 800bc32:	bf00      	nop
 800bc34:	3ff00000 	.word	0x3ff00000

0800bc38 <__d2b>:
 800bc38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	4689      	mov	r9, r1
 800bc3e:	2101      	movs	r1, #1
 800bc40:	ec57 6b10 	vmov	r6, r7, d0
 800bc44:	4690      	mov	r8, r2
 800bc46:	f7ff fc09 	bl	800b45c <_Balloc>
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	b930      	cbnz	r0, 800bc5c <__d2b+0x24>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <__d2b+0xb0>)
 800bc52:	4826      	ldr	r0, [pc, #152]	; (800bcec <__d2b+0xb4>)
 800bc54:	f240 310a 	movw	r1, #778	; 0x30a
 800bc58:	f000 fb50 	bl	800c2fc <__assert_func>
 800bc5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc64:	bb35      	cbnz	r5, 800bcb4 <__d2b+0x7c>
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	d028      	beq.n	800bcbe <__d2b+0x86>
 800bc6c:	4668      	mov	r0, sp
 800bc6e:	9600      	str	r6, [sp, #0]
 800bc70:	f7ff fd06 	bl	800b680 <__lo0bits>
 800bc74:	9900      	ldr	r1, [sp, #0]
 800bc76:	b300      	cbz	r0, 800bcba <__d2b+0x82>
 800bc78:	9a01      	ldr	r2, [sp, #4]
 800bc7a:	f1c0 0320 	rsb	r3, r0, #32
 800bc7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc82:	430b      	orrs	r3, r1
 800bc84:	40c2      	lsrs	r2, r0
 800bc86:	6163      	str	r3, [r4, #20]
 800bc88:	9201      	str	r2, [sp, #4]
 800bc8a:	9b01      	ldr	r3, [sp, #4]
 800bc8c:	61a3      	str	r3, [r4, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bf14      	ite	ne
 800bc92:	2202      	movne	r2, #2
 800bc94:	2201      	moveq	r2, #1
 800bc96:	6122      	str	r2, [r4, #16]
 800bc98:	b1d5      	cbz	r5, 800bcd0 <__d2b+0x98>
 800bc9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc9e:	4405      	add	r5, r0
 800bca0:	f8c9 5000 	str.w	r5, [r9]
 800bca4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bca8:	f8c8 0000 	str.w	r0, [r8]
 800bcac:	4620      	mov	r0, r4
 800bcae:	b003      	add	sp, #12
 800bcb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcb8:	e7d5      	b.n	800bc66 <__d2b+0x2e>
 800bcba:	6161      	str	r1, [r4, #20]
 800bcbc:	e7e5      	b.n	800bc8a <__d2b+0x52>
 800bcbe:	a801      	add	r0, sp, #4
 800bcc0:	f7ff fcde 	bl	800b680 <__lo0bits>
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	6163      	str	r3, [r4, #20]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	6122      	str	r2, [r4, #16]
 800bccc:	3020      	adds	r0, #32
 800bcce:	e7e3      	b.n	800bc98 <__d2b+0x60>
 800bcd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcd8:	f8c9 0000 	str.w	r0, [r9]
 800bcdc:	6918      	ldr	r0, [r3, #16]
 800bcde:	f7ff fcaf 	bl	800b640 <__hi0bits>
 800bce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bce6:	e7df      	b.n	800bca8 <__d2b+0x70>
 800bce8:	0800d5b8 	.word	0x0800d5b8
 800bcec:	0800d644 	.word	0x0800d644

0800bcf0 <__ratio>:
 800bcf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	4688      	mov	r8, r1
 800bcf6:	4669      	mov	r1, sp
 800bcf8:	4681      	mov	r9, r0
 800bcfa:	f7ff ff4d 	bl	800bb98 <__b2d>
 800bcfe:	a901      	add	r1, sp, #4
 800bd00:	4640      	mov	r0, r8
 800bd02:	ec55 4b10 	vmov	r4, r5, d0
 800bd06:	f7ff ff47 	bl	800bb98 <__b2d>
 800bd0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bd12:	eba3 0c02 	sub.w	ip, r3, r2
 800bd16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd1a:	1a9b      	subs	r3, r3, r2
 800bd1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd20:	ec51 0b10 	vmov	r0, r1, d0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bfd6      	itet	le
 800bd28:	460a      	movle	r2, r1
 800bd2a:	462a      	movgt	r2, r5
 800bd2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd30:	468b      	mov	fp, r1
 800bd32:	462f      	mov	r7, r5
 800bd34:	bfd4      	ite	le
 800bd36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd3e:	4620      	mov	r0, r4
 800bd40:	ee10 2a10 	vmov	r2, s0
 800bd44:	465b      	mov	r3, fp
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fd88 	bl	800085c <__aeabi_ddiv>
 800bd4c:	ec41 0b10 	vmov	d0, r0, r1
 800bd50:	b003      	add	sp, #12
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd56 <__copybits>:
 800bd56:	3901      	subs	r1, #1
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	1149      	asrs	r1, r1, #5
 800bd5c:	6914      	ldr	r4, [r2, #16]
 800bd5e:	3101      	adds	r1, #1
 800bd60:	f102 0314 	add.w	r3, r2, #20
 800bd64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd6c:	1f05      	subs	r5, r0, #4
 800bd6e:	42a3      	cmp	r3, r4
 800bd70:	d30c      	bcc.n	800bd8c <__copybits+0x36>
 800bd72:	1aa3      	subs	r3, r4, r2
 800bd74:	3b11      	subs	r3, #17
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	3211      	adds	r2, #17
 800bd7c:	42a2      	cmp	r2, r4
 800bd7e:	bf88      	it	hi
 800bd80:	2300      	movhi	r3, #0
 800bd82:	4418      	add	r0, r3
 800bd84:	2300      	movs	r3, #0
 800bd86:	4288      	cmp	r0, r1
 800bd88:	d305      	bcc.n	800bd96 <__copybits+0x40>
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd90:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd94:	e7eb      	b.n	800bd6e <__copybits+0x18>
 800bd96:	f840 3b04 	str.w	r3, [r0], #4
 800bd9a:	e7f4      	b.n	800bd86 <__copybits+0x30>

0800bd9c <__any_on>:
 800bd9c:	f100 0214 	add.w	r2, r0, #20
 800bda0:	6900      	ldr	r0, [r0, #16]
 800bda2:	114b      	asrs	r3, r1, #5
 800bda4:	4298      	cmp	r0, r3
 800bda6:	b510      	push	{r4, lr}
 800bda8:	db11      	blt.n	800bdce <__any_on+0x32>
 800bdaa:	dd0a      	ble.n	800bdc2 <__any_on+0x26>
 800bdac:	f011 011f 	ands.w	r1, r1, #31
 800bdb0:	d007      	beq.n	800bdc2 <__any_on+0x26>
 800bdb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdb6:	fa24 f001 	lsr.w	r0, r4, r1
 800bdba:	fa00 f101 	lsl.w	r1, r0, r1
 800bdbe:	428c      	cmp	r4, r1
 800bdc0:	d10b      	bne.n	800bdda <__any_on+0x3e>
 800bdc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d803      	bhi.n	800bdd2 <__any_on+0x36>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	4603      	mov	r3, r0
 800bdd0:	e7f7      	b.n	800bdc2 <__any_on+0x26>
 800bdd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdd6:	2900      	cmp	r1, #0
 800bdd8:	d0f5      	beq.n	800bdc6 <__any_on+0x2a>
 800bdda:	2001      	movs	r0, #1
 800bddc:	e7f6      	b.n	800bdcc <__any_on+0x30>

0800bdde <_calloc_r>:
 800bdde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bde0:	fba1 2402 	umull	r2, r4, r1, r2
 800bde4:	b94c      	cbnz	r4, 800bdfa <_calloc_r+0x1c>
 800bde6:	4611      	mov	r1, r2
 800bde8:	9201      	str	r2, [sp, #4]
 800bdea:	f000 f87b 	bl	800bee4 <_malloc_r>
 800bdee:	9a01      	ldr	r2, [sp, #4]
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	b930      	cbnz	r0, 800be02 <_calloc_r+0x24>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	b003      	add	sp, #12
 800bdf8:	bd30      	pop	{r4, r5, pc}
 800bdfa:	220c      	movs	r2, #12
 800bdfc:	6002      	str	r2, [r0, #0]
 800bdfe:	2500      	movs	r5, #0
 800be00:	e7f8      	b.n	800bdf4 <_calloc_r+0x16>
 800be02:	4621      	mov	r1, r4
 800be04:	f7fc fb8a 	bl	800851c <memset>
 800be08:	e7f4      	b.n	800bdf4 <_calloc_r+0x16>
	...

0800be0c <_free_r>:
 800be0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be0e:	2900      	cmp	r1, #0
 800be10:	d044      	beq.n	800be9c <_free_r+0x90>
 800be12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be16:	9001      	str	r0, [sp, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f1a1 0404 	sub.w	r4, r1, #4
 800be1e:	bfb8      	it	lt
 800be20:	18e4      	addlt	r4, r4, r3
 800be22:	f000 fab5 	bl	800c390 <__malloc_lock>
 800be26:	4a1e      	ldr	r2, [pc, #120]	; (800bea0 <_free_r+0x94>)
 800be28:	9801      	ldr	r0, [sp, #4]
 800be2a:	6813      	ldr	r3, [r2, #0]
 800be2c:	b933      	cbnz	r3, 800be3c <_free_r+0x30>
 800be2e:	6063      	str	r3, [r4, #4]
 800be30:	6014      	str	r4, [r2, #0]
 800be32:	b003      	add	sp, #12
 800be34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be38:	f000 bab0 	b.w	800c39c <__malloc_unlock>
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	d908      	bls.n	800be52 <_free_r+0x46>
 800be40:	6825      	ldr	r5, [r4, #0]
 800be42:	1961      	adds	r1, r4, r5
 800be44:	428b      	cmp	r3, r1
 800be46:	bf01      	itttt	eq
 800be48:	6819      	ldreq	r1, [r3, #0]
 800be4a:	685b      	ldreq	r3, [r3, #4]
 800be4c:	1949      	addeq	r1, r1, r5
 800be4e:	6021      	streq	r1, [r4, #0]
 800be50:	e7ed      	b.n	800be2e <_free_r+0x22>
 800be52:	461a      	mov	r2, r3
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	b10b      	cbz	r3, 800be5c <_free_r+0x50>
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d9fa      	bls.n	800be52 <_free_r+0x46>
 800be5c:	6811      	ldr	r1, [r2, #0]
 800be5e:	1855      	adds	r5, r2, r1
 800be60:	42a5      	cmp	r5, r4
 800be62:	d10b      	bne.n	800be7c <_free_r+0x70>
 800be64:	6824      	ldr	r4, [r4, #0]
 800be66:	4421      	add	r1, r4
 800be68:	1854      	adds	r4, r2, r1
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	d1e0      	bne.n	800be32 <_free_r+0x26>
 800be70:	681c      	ldr	r4, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	6053      	str	r3, [r2, #4]
 800be76:	4421      	add	r1, r4
 800be78:	6011      	str	r1, [r2, #0]
 800be7a:	e7da      	b.n	800be32 <_free_r+0x26>
 800be7c:	d902      	bls.n	800be84 <_free_r+0x78>
 800be7e:	230c      	movs	r3, #12
 800be80:	6003      	str	r3, [r0, #0]
 800be82:	e7d6      	b.n	800be32 <_free_r+0x26>
 800be84:	6825      	ldr	r5, [r4, #0]
 800be86:	1961      	adds	r1, r4, r5
 800be88:	428b      	cmp	r3, r1
 800be8a:	bf04      	itt	eq
 800be8c:	6819      	ldreq	r1, [r3, #0]
 800be8e:	685b      	ldreq	r3, [r3, #4]
 800be90:	6063      	str	r3, [r4, #4]
 800be92:	bf04      	itt	eq
 800be94:	1949      	addeq	r1, r1, r5
 800be96:	6021      	streq	r1, [r4, #0]
 800be98:	6054      	str	r4, [r2, #4]
 800be9a:	e7ca      	b.n	800be32 <_free_r+0x26>
 800be9c:	b003      	add	sp, #12
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	20002640 	.word	0x20002640

0800bea4 <sbrk_aligned>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	4e0e      	ldr	r6, [pc, #56]	; (800bee0 <sbrk_aligned+0x3c>)
 800bea8:	460c      	mov	r4, r1
 800beaa:	6831      	ldr	r1, [r6, #0]
 800beac:	4605      	mov	r5, r0
 800beae:	b911      	cbnz	r1, 800beb6 <sbrk_aligned+0x12>
 800beb0:	f000 f9f2 	bl	800c298 <_sbrk_r>
 800beb4:	6030      	str	r0, [r6, #0]
 800beb6:	4621      	mov	r1, r4
 800beb8:	4628      	mov	r0, r5
 800beba:	f000 f9ed 	bl	800c298 <_sbrk_r>
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	d00a      	beq.n	800bed8 <sbrk_aligned+0x34>
 800bec2:	1cc4      	adds	r4, r0, #3
 800bec4:	f024 0403 	bic.w	r4, r4, #3
 800bec8:	42a0      	cmp	r0, r4
 800beca:	d007      	beq.n	800bedc <sbrk_aligned+0x38>
 800becc:	1a21      	subs	r1, r4, r0
 800bece:	4628      	mov	r0, r5
 800bed0:	f000 f9e2 	bl	800c298 <_sbrk_r>
 800bed4:	3001      	adds	r0, #1
 800bed6:	d101      	bne.n	800bedc <sbrk_aligned+0x38>
 800bed8:	f04f 34ff 	mov.w	r4, #4294967295
 800bedc:	4620      	mov	r0, r4
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	20002644 	.word	0x20002644

0800bee4 <_malloc_r>:
 800bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	1ccd      	adds	r5, r1, #3
 800beea:	f025 0503 	bic.w	r5, r5, #3
 800beee:	3508      	adds	r5, #8
 800bef0:	2d0c      	cmp	r5, #12
 800bef2:	bf38      	it	cc
 800bef4:	250c      	movcc	r5, #12
 800bef6:	2d00      	cmp	r5, #0
 800bef8:	4607      	mov	r7, r0
 800befa:	db01      	blt.n	800bf00 <_malloc_r+0x1c>
 800befc:	42a9      	cmp	r1, r5
 800befe:	d905      	bls.n	800bf0c <_malloc_r+0x28>
 800bf00:	230c      	movs	r3, #12
 800bf02:	603b      	str	r3, [r7, #0]
 800bf04:	2600      	movs	r6, #0
 800bf06:	4630      	mov	r0, r6
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	4e2e      	ldr	r6, [pc, #184]	; (800bfc8 <_malloc_r+0xe4>)
 800bf0e:	f000 fa3f 	bl	800c390 <__malloc_lock>
 800bf12:	6833      	ldr	r3, [r6, #0]
 800bf14:	461c      	mov	r4, r3
 800bf16:	bb34      	cbnz	r4, 800bf66 <_malloc_r+0x82>
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	f7ff ffc2 	bl	800bea4 <sbrk_aligned>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	4604      	mov	r4, r0
 800bf24:	d14d      	bne.n	800bfc2 <_malloc_r+0xde>
 800bf26:	6834      	ldr	r4, [r6, #0]
 800bf28:	4626      	mov	r6, r4
 800bf2a:	2e00      	cmp	r6, #0
 800bf2c:	d140      	bne.n	800bfb0 <_malloc_r+0xcc>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	4631      	mov	r1, r6
 800bf32:	4638      	mov	r0, r7
 800bf34:	eb04 0803 	add.w	r8, r4, r3
 800bf38:	f000 f9ae 	bl	800c298 <_sbrk_r>
 800bf3c:	4580      	cmp	r8, r0
 800bf3e:	d13a      	bne.n	800bfb6 <_malloc_r+0xd2>
 800bf40:	6821      	ldr	r1, [r4, #0]
 800bf42:	3503      	adds	r5, #3
 800bf44:	1a6d      	subs	r5, r5, r1
 800bf46:	f025 0503 	bic.w	r5, r5, #3
 800bf4a:	3508      	adds	r5, #8
 800bf4c:	2d0c      	cmp	r5, #12
 800bf4e:	bf38      	it	cc
 800bf50:	250c      	movcc	r5, #12
 800bf52:	4629      	mov	r1, r5
 800bf54:	4638      	mov	r0, r7
 800bf56:	f7ff ffa5 	bl	800bea4 <sbrk_aligned>
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d02b      	beq.n	800bfb6 <_malloc_r+0xd2>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	442b      	add	r3, r5
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	e00e      	b.n	800bf84 <_malloc_r+0xa0>
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	1b52      	subs	r2, r2, r5
 800bf6a:	d41e      	bmi.n	800bfaa <_malloc_r+0xc6>
 800bf6c:	2a0b      	cmp	r2, #11
 800bf6e:	d916      	bls.n	800bf9e <_malloc_r+0xba>
 800bf70:	1961      	adds	r1, r4, r5
 800bf72:	42a3      	cmp	r3, r4
 800bf74:	6025      	str	r5, [r4, #0]
 800bf76:	bf18      	it	ne
 800bf78:	6059      	strne	r1, [r3, #4]
 800bf7a:	6863      	ldr	r3, [r4, #4]
 800bf7c:	bf08      	it	eq
 800bf7e:	6031      	streq	r1, [r6, #0]
 800bf80:	5162      	str	r2, [r4, r5]
 800bf82:	604b      	str	r3, [r1, #4]
 800bf84:	4638      	mov	r0, r7
 800bf86:	f104 060b 	add.w	r6, r4, #11
 800bf8a:	f000 fa07 	bl	800c39c <__malloc_unlock>
 800bf8e:	f026 0607 	bic.w	r6, r6, #7
 800bf92:	1d23      	adds	r3, r4, #4
 800bf94:	1af2      	subs	r2, r6, r3
 800bf96:	d0b6      	beq.n	800bf06 <_malloc_r+0x22>
 800bf98:	1b9b      	subs	r3, r3, r6
 800bf9a:	50a3      	str	r3, [r4, r2]
 800bf9c:	e7b3      	b.n	800bf06 <_malloc_r+0x22>
 800bf9e:	6862      	ldr	r2, [r4, #4]
 800bfa0:	42a3      	cmp	r3, r4
 800bfa2:	bf0c      	ite	eq
 800bfa4:	6032      	streq	r2, [r6, #0]
 800bfa6:	605a      	strne	r2, [r3, #4]
 800bfa8:	e7ec      	b.n	800bf84 <_malloc_r+0xa0>
 800bfaa:	4623      	mov	r3, r4
 800bfac:	6864      	ldr	r4, [r4, #4]
 800bfae:	e7b2      	b.n	800bf16 <_malloc_r+0x32>
 800bfb0:	4634      	mov	r4, r6
 800bfb2:	6876      	ldr	r6, [r6, #4]
 800bfb4:	e7b9      	b.n	800bf2a <_malloc_r+0x46>
 800bfb6:	230c      	movs	r3, #12
 800bfb8:	603b      	str	r3, [r7, #0]
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f000 f9ee 	bl	800c39c <__malloc_unlock>
 800bfc0:	e7a1      	b.n	800bf06 <_malloc_r+0x22>
 800bfc2:	6025      	str	r5, [r4, #0]
 800bfc4:	e7de      	b.n	800bf84 <_malloc_r+0xa0>
 800bfc6:	bf00      	nop
 800bfc8:	20002640 	.word	0x20002640

0800bfcc <__ssputs_r>:
 800bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd0:	688e      	ldr	r6, [r1, #8]
 800bfd2:	429e      	cmp	r6, r3
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	4690      	mov	r8, r2
 800bfda:	461f      	mov	r7, r3
 800bfdc:	d838      	bhi.n	800c050 <__ssputs_r+0x84>
 800bfde:	898a      	ldrh	r2, [r1, #12]
 800bfe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfe4:	d032      	beq.n	800c04c <__ssputs_r+0x80>
 800bfe6:	6825      	ldr	r5, [r4, #0]
 800bfe8:	6909      	ldr	r1, [r1, #16]
 800bfea:	eba5 0901 	sub.w	r9, r5, r1
 800bfee:	6965      	ldr	r5, [r4, #20]
 800bff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bff8:	3301      	adds	r3, #1
 800bffa:	444b      	add	r3, r9
 800bffc:	106d      	asrs	r5, r5, #1
 800bffe:	429d      	cmp	r5, r3
 800c000:	bf38      	it	cc
 800c002:	461d      	movcc	r5, r3
 800c004:	0553      	lsls	r3, r2, #21
 800c006:	d531      	bpl.n	800c06c <__ssputs_r+0xa0>
 800c008:	4629      	mov	r1, r5
 800c00a:	f7ff ff6b 	bl	800bee4 <_malloc_r>
 800c00e:	4606      	mov	r6, r0
 800c010:	b950      	cbnz	r0, 800c028 <__ssputs_r+0x5c>
 800c012:	230c      	movs	r3, #12
 800c014:	f8ca 3000 	str.w	r3, [sl]
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	f04f 30ff 	mov.w	r0, #4294967295
 800c024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c028:	6921      	ldr	r1, [r4, #16]
 800c02a:	464a      	mov	r2, r9
 800c02c:	f7ff fa08 	bl	800b440 <memcpy>
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	6126      	str	r6, [r4, #16]
 800c03e:	6165      	str	r5, [r4, #20]
 800c040:	444e      	add	r6, r9
 800c042:	eba5 0509 	sub.w	r5, r5, r9
 800c046:	6026      	str	r6, [r4, #0]
 800c048:	60a5      	str	r5, [r4, #8]
 800c04a:	463e      	mov	r6, r7
 800c04c:	42be      	cmp	r6, r7
 800c04e:	d900      	bls.n	800c052 <__ssputs_r+0x86>
 800c050:	463e      	mov	r6, r7
 800c052:	6820      	ldr	r0, [r4, #0]
 800c054:	4632      	mov	r2, r6
 800c056:	4641      	mov	r1, r8
 800c058:	f000 f980 	bl	800c35c <memmove>
 800c05c:	68a3      	ldr	r3, [r4, #8]
 800c05e:	1b9b      	subs	r3, r3, r6
 800c060:	60a3      	str	r3, [r4, #8]
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	4433      	add	r3, r6
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	2000      	movs	r0, #0
 800c06a:	e7db      	b.n	800c024 <__ssputs_r+0x58>
 800c06c:	462a      	mov	r2, r5
 800c06e:	f000 f99b 	bl	800c3a8 <_realloc_r>
 800c072:	4606      	mov	r6, r0
 800c074:	2800      	cmp	r0, #0
 800c076:	d1e1      	bne.n	800c03c <__ssputs_r+0x70>
 800c078:	6921      	ldr	r1, [r4, #16]
 800c07a:	4650      	mov	r0, sl
 800c07c:	f7ff fec6 	bl	800be0c <_free_r>
 800c080:	e7c7      	b.n	800c012 <__ssputs_r+0x46>
	...

0800c084 <_svfiprintf_r>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	4698      	mov	r8, r3
 800c08a:	898b      	ldrh	r3, [r1, #12]
 800c08c:	061b      	lsls	r3, r3, #24
 800c08e:	b09d      	sub	sp, #116	; 0x74
 800c090:	4607      	mov	r7, r0
 800c092:	460d      	mov	r5, r1
 800c094:	4614      	mov	r4, r2
 800c096:	d50e      	bpl.n	800c0b6 <_svfiprintf_r+0x32>
 800c098:	690b      	ldr	r3, [r1, #16]
 800c09a:	b963      	cbnz	r3, 800c0b6 <_svfiprintf_r+0x32>
 800c09c:	2140      	movs	r1, #64	; 0x40
 800c09e:	f7ff ff21 	bl	800bee4 <_malloc_r>
 800c0a2:	6028      	str	r0, [r5, #0]
 800c0a4:	6128      	str	r0, [r5, #16]
 800c0a6:	b920      	cbnz	r0, 800c0b2 <_svfiprintf_r+0x2e>
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	e0d1      	b.n	800c256 <_svfiprintf_r+0x1d2>
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	616b      	str	r3, [r5, #20]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ba:	2320      	movs	r3, #32
 800c0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0c4:	2330      	movs	r3, #48	; 0x30
 800c0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c270 <_svfiprintf_r+0x1ec>
 800c0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0ce:	f04f 0901 	mov.w	r9, #1
 800c0d2:	4623      	mov	r3, r4
 800c0d4:	469a      	mov	sl, r3
 800c0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0da:	b10a      	cbz	r2, 800c0e0 <_svfiprintf_r+0x5c>
 800c0dc:	2a25      	cmp	r2, #37	; 0x25
 800c0de:	d1f9      	bne.n	800c0d4 <_svfiprintf_r+0x50>
 800c0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e4:	d00b      	beq.n	800c0fe <_svfiprintf_r+0x7a>
 800c0e6:	465b      	mov	r3, fp
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff ff6d 	bl	800bfcc <__ssputs_r>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	f000 80aa 	beq.w	800c24c <_svfiprintf_r+0x1c8>
 800c0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fa:	445a      	add	r2, fp
 800c0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 80a2 	beq.w	800c24c <_svfiprintf_r+0x1c8>
 800c108:	2300      	movs	r3, #0
 800c10a:	f04f 32ff 	mov.w	r2, #4294967295
 800c10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c112:	f10a 0a01 	add.w	sl, sl, #1
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c11e:	931a      	str	r3, [sp, #104]	; 0x68
 800c120:	4654      	mov	r4, sl
 800c122:	2205      	movs	r2, #5
 800c124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c128:	4851      	ldr	r0, [pc, #324]	; (800c270 <_svfiprintf_r+0x1ec>)
 800c12a:	f7f4 f861 	bl	80001f0 <memchr>
 800c12e:	9a04      	ldr	r2, [sp, #16]
 800c130:	b9d8      	cbnz	r0, 800c16a <_svfiprintf_r+0xe6>
 800c132:	06d0      	lsls	r0, r2, #27
 800c134:	bf44      	itt	mi
 800c136:	2320      	movmi	r3, #32
 800c138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c13c:	0711      	lsls	r1, r2, #28
 800c13e:	bf44      	itt	mi
 800c140:	232b      	movmi	r3, #43	; 0x2b
 800c142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b2a      	cmp	r3, #42	; 0x2a
 800c14c:	d015      	beq.n	800c17a <_svfiprintf_r+0xf6>
 800c14e:	9a07      	ldr	r2, [sp, #28]
 800c150:	4654      	mov	r4, sl
 800c152:	2000      	movs	r0, #0
 800c154:	f04f 0c0a 	mov.w	ip, #10
 800c158:	4621      	mov	r1, r4
 800c15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c15e:	3b30      	subs	r3, #48	; 0x30
 800c160:	2b09      	cmp	r3, #9
 800c162:	d94e      	bls.n	800c202 <_svfiprintf_r+0x17e>
 800c164:	b1b0      	cbz	r0, 800c194 <_svfiprintf_r+0x110>
 800c166:	9207      	str	r2, [sp, #28]
 800c168:	e014      	b.n	800c194 <_svfiprintf_r+0x110>
 800c16a:	eba0 0308 	sub.w	r3, r0, r8
 800c16e:	fa09 f303 	lsl.w	r3, r9, r3
 800c172:	4313      	orrs	r3, r2
 800c174:	9304      	str	r3, [sp, #16]
 800c176:	46a2      	mov	sl, r4
 800c178:	e7d2      	b.n	800c120 <_svfiprintf_r+0x9c>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	1d19      	adds	r1, r3, #4
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	9103      	str	r1, [sp, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	bfbb      	ittet	lt
 800c186:	425b      	neglt	r3, r3
 800c188:	f042 0202 	orrlt.w	r2, r2, #2
 800c18c:	9307      	strge	r3, [sp, #28]
 800c18e:	9307      	strlt	r3, [sp, #28]
 800c190:	bfb8      	it	lt
 800c192:	9204      	strlt	r2, [sp, #16]
 800c194:	7823      	ldrb	r3, [r4, #0]
 800c196:	2b2e      	cmp	r3, #46	; 0x2e
 800c198:	d10c      	bne.n	800c1b4 <_svfiprintf_r+0x130>
 800c19a:	7863      	ldrb	r3, [r4, #1]
 800c19c:	2b2a      	cmp	r3, #42	; 0x2a
 800c19e:	d135      	bne.n	800c20c <_svfiprintf_r+0x188>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	1d1a      	adds	r2, r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	9203      	str	r2, [sp, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfb8      	it	lt
 800c1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b0:	3402      	adds	r4, #2
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c280 <_svfiprintf_r+0x1fc>
 800c1b8:	7821      	ldrb	r1, [r4, #0]
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	4650      	mov	r0, sl
 800c1be:	f7f4 f817 	bl	80001f0 <memchr>
 800c1c2:	b140      	cbz	r0, 800c1d6 <_svfiprintf_r+0x152>
 800c1c4:	2340      	movs	r3, #64	; 0x40
 800c1c6:	eba0 000a 	sub.w	r0, r0, sl
 800c1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	4303      	orrs	r3, r0
 800c1d2:	3401      	adds	r4, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1da:	4826      	ldr	r0, [pc, #152]	; (800c274 <_svfiprintf_r+0x1f0>)
 800c1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e0:	2206      	movs	r2, #6
 800c1e2:	f7f4 f805 	bl	80001f0 <memchr>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d038      	beq.n	800c25c <_svfiprintf_r+0x1d8>
 800c1ea:	4b23      	ldr	r3, [pc, #140]	; (800c278 <_svfiprintf_r+0x1f4>)
 800c1ec:	bb1b      	cbnz	r3, 800c236 <_svfiprintf_r+0x1b2>
 800c1ee:	9b03      	ldr	r3, [sp, #12]
 800c1f0:	3307      	adds	r3, #7
 800c1f2:	f023 0307 	bic.w	r3, r3, #7
 800c1f6:	3308      	adds	r3, #8
 800c1f8:	9303      	str	r3, [sp, #12]
 800c1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fc:	4433      	add	r3, r6
 800c1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c200:	e767      	b.n	800c0d2 <_svfiprintf_r+0x4e>
 800c202:	fb0c 3202 	mla	r2, ip, r2, r3
 800c206:	460c      	mov	r4, r1
 800c208:	2001      	movs	r0, #1
 800c20a:	e7a5      	b.n	800c158 <_svfiprintf_r+0xd4>
 800c20c:	2300      	movs	r3, #0
 800c20e:	3401      	adds	r4, #1
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	4619      	mov	r1, r3
 800c214:	f04f 0c0a 	mov.w	ip, #10
 800c218:	4620      	mov	r0, r4
 800c21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c21e:	3a30      	subs	r2, #48	; 0x30
 800c220:	2a09      	cmp	r2, #9
 800c222:	d903      	bls.n	800c22c <_svfiprintf_r+0x1a8>
 800c224:	2b00      	cmp	r3, #0
 800c226:	d0c5      	beq.n	800c1b4 <_svfiprintf_r+0x130>
 800c228:	9105      	str	r1, [sp, #20]
 800c22a:	e7c3      	b.n	800c1b4 <_svfiprintf_r+0x130>
 800c22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c230:	4604      	mov	r4, r0
 800c232:	2301      	movs	r3, #1
 800c234:	e7f0      	b.n	800c218 <_svfiprintf_r+0x194>
 800c236:	ab03      	add	r3, sp, #12
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	462a      	mov	r2, r5
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <_svfiprintf_r+0x1f8>)
 800c23e:	a904      	add	r1, sp, #16
 800c240:	4638      	mov	r0, r7
 800c242:	f7fc fa13 	bl	800866c <_printf_float>
 800c246:	1c42      	adds	r2, r0, #1
 800c248:	4606      	mov	r6, r0
 800c24a:	d1d6      	bne.n	800c1fa <_svfiprintf_r+0x176>
 800c24c:	89ab      	ldrh	r3, [r5, #12]
 800c24e:	065b      	lsls	r3, r3, #25
 800c250:	f53f af2c 	bmi.w	800c0ac <_svfiprintf_r+0x28>
 800c254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c256:	b01d      	add	sp, #116	; 0x74
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	ab03      	add	r3, sp, #12
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	462a      	mov	r2, r5
 800c262:	4b06      	ldr	r3, [pc, #24]	; (800c27c <_svfiprintf_r+0x1f8>)
 800c264:	a904      	add	r1, sp, #16
 800c266:	4638      	mov	r0, r7
 800c268:	f7fc fca4 	bl	8008bb4 <_printf_i>
 800c26c:	e7eb      	b.n	800c246 <_svfiprintf_r+0x1c2>
 800c26e:	bf00      	nop
 800c270:	0800d79c 	.word	0x0800d79c
 800c274:	0800d7a6 	.word	0x0800d7a6
 800c278:	0800866d 	.word	0x0800866d
 800c27c:	0800bfcd 	.word	0x0800bfcd
 800c280:	0800d7a2 	.word	0x0800d7a2
 800c284:	00000000 	.word	0x00000000

0800c288 <nan>:
 800c288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c290 <nan+0x8>
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	00000000 	.word	0x00000000
 800c294:	7ff80000 	.word	0x7ff80000

0800c298 <_sbrk_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	; (800c2b4 <_sbrk_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f6 f87c 	bl	80023a0 <_sbrk>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_sbrk_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_sbrk_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20002648 	.word	0x20002648

0800c2b8 <strncmp>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	b17a      	cbz	r2, 800c2dc <strncmp+0x24>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	3901      	subs	r1, #1
 800c2c0:	1884      	adds	r4, r0, r2
 800c2c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2ca:	4290      	cmp	r0, r2
 800c2cc:	d101      	bne.n	800c2d2 <strncmp+0x1a>
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	d101      	bne.n	800c2d6 <strncmp+0x1e>
 800c2d2:	1a80      	subs	r0, r0, r2
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d1f3      	bne.n	800c2c2 <strncmp+0xa>
 800c2da:	e7fa      	b.n	800c2d2 <strncmp+0x1a>
 800c2dc:	4610      	mov	r0, r2
 800c2de:	e7f9      	b.n	800c2d4 <strncmp+0x1c>

0800c2e0 <__ascii_wctomb>:
 800c2e0:	b149      	cbz	r1, 800c2f6 <__ascii_wctomb+0x16>
 800c2e2:	2aff      	cmp	r2, #255	; 0xff
 800c2e4:	bf85      	ittet	hi
 800c2e6:	238a      	movhi	r3, #138	; 0x8a
 800c2e8:	6003      	strhi	r3, [r0, #0]
 800c2ea:	700a      	strbls	r2, [r1, #0]
 800c2ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2f0:	bf98      	it	ls
 800c2f2:	2001      	movls	r0, #1
 800c2f4:	4770      	bx	lr
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4770      	bx	lr
	...

0800c2fc <__assert_func>:
 800c2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2fe:	4614      	mov	r4, r2
 800c300:	461a      	mov	r2, r3
 800c302:	4b09      	ldr	r3, [pc, #36]	; (800c328 <__assert_func+0x2c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4605      	mov	r5, r0
 800c308:	68d8      	ldr	r0, [r3, #12]
 800c30a:	b14c      	cbz	r4, 800c320 <__assert_func+0x24>
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <__assert_func+0x30>)
 800c30e:	9100      	str	r1, [sp, #0]
 800c310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c314:	4906      	ldr	r1, [pc, #24]	; (800c330 <__assert_func+0x34>)
 800c316:	462b      	mov	r3, r5
 800c318:	f000 f80e 	bl	800c338 <fiprintf>
 800c31c:	f000 fa8c 	bl	800c838 <abort>
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <__assert_func+0x38>)
 800c322:	461c      	mov	r4, r3
 800c324:	e7f3      	b.n	800c30e <__assert_func+0x12>
 800c326:	bf00      	nop
 800c328:	20000024 	.word	0x20000024
 800c32c:	0800d7ad 	.word	0x0800d7ad
 800c330:	0800d7ba 	.word	0x0800d7ba
 800c334:	0800d7e8 	.word	0x0800d7e8

0800c338 <fiprintf>:
 800c338:	b40e      	push	{r1, r2, r3}
 800c33a:	b503      	push	{r0, r1, lr}
 800c33c:	4601      	mov	r1, r0
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	4805      	ldr	r0, [pc, #20]	; (800c358 <fiprintf+0x20>)
 800c342:	f853 2b04 	ldr.w	r2, [r3], #4
 800c346:	6800      	ldr	r0, [r0, #0]
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	f000 f885 	bl	800c458 <_vfiprintf_r>
 800c34e:	b002      	add	sp, #8
 800c350:	f85d eb04 	ldr.w	lr, [sp], #4
 800c354:	b003      	add	sp, #12
 800c356:	4770      	bx	lr
 800c358:	20000024 	.word	0x20000024

0800c35c <memmove>:
 800c35c:	4288      	cmp	r0, r1
 800c35e:	b510      	push	{r4, lr}
 800c360:	eb01 0402 	add.w	r4, r1, r2
 800c364:	d902      	bls.n	800c36c <memmove+0x10>
 800c366:	4284      	cmp	r4, r0
 800c368:	4623      	mov	r3, r4
 800c36a:	d807      	bhi.n	800c37c <memmove+0x20>
 800c36c:	1e43      	subs	r3, r0, #1
 800c36e:	42a1      	cmp	r1, r4
 800c370:	d008      	beq.n	800c384 <memmove+0x28>
 800c372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c37a:	e7f8      	b.n	800c36e <memmove+0x12>
 800c37c:	4402      	add	r2, r0
 800c37e:	4601      	mov	r1, r0
 800c380:	428a      	cmp	r2, r1
 800c382:	d100      	bne.n	800c386 <memmove+0x2a>
 800c384:	bd10      	pop	{r4, pc}
 800c386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c38e:	e7f7      	b.n	800c380 <memmove+0x24>

0800c390 <__malloc_lock>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__malloc_lock+0x8>)
 800c392:	f000 bc11 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800c396:	bf00      	nop
 800c398:	2000264c 	.word	0x2000264c

0800c39c <__malloc_unlock>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__malloc_unlock+0x8>)
 800c39e:	f000 bc0c 	b.w	800cbba <__retarget_lock_release_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	2000264c 	.word	0x2000264c

0800c3a8 <_realloc_r>:
 800c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	b921      	cbnz	r1, 800c3be <_realloc_r+0x16>
 800c3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	f7ff bd93 	b.w	800bee4 <_malloc_r>
 800c3be:	b92a      	cbnz	r2, 800c3cc <_realloc_r+0x24>
 800c3c0:	f7ff fd24 	bl	800be0c <_free_r>
 800c3c4:	4625      	mov	r5, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3cc:	f000 fc5c 	bl	800cc88 <_malloc_usable_size_r>
 800c3d0:	4284      	cmp	r4, r0
 800c3d2:	4607      	mov	r7, r0
 800c3d4:	d802      	bhi.n	800c3dc <_realloc_r+0x34>
 800c3d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3da:	d812      	bhi.n	800c402 <_realloc_r+0x5a>
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4640      	mov	r0, r8
 800c3e0:	f7ff fd80 	bl	800bee4 <_malloc_r>
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d0ed      	beq.n	800c3c6 <_realloc_r+0x1e>
 800c3ea:	42bc      	cmp	r4, r7
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	bf28      	it	cs
 800c3f2:	463a      	movcs	r2, r7
 800c3f4:	f7ff f824 	bl	800b440 <memcpy>
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	f7ff fd06 	bl	800be0c <_free_r>
 800c400:	e7e1      	b.n	800c3c6 <_realloc_r+0x1e>
 800c402:	4635      	mov	r5, r6
 800c404:	e7df      	b.n	800c3c6 <_realloc_r+0x1e>

0800c406 <__sfputc_r>:
 800c406:	6893      	ldr	r3, [r2, #8]
 800c408:	3b01      	subs	r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	b410      	push	{r4}
 800c40e:	6093      	str	r3, [r2, #8]
 800c410:	da08      	bge.n	800c424 <__sfputc_r+0x1e>
 800c412:	6994      	ldr	r4, [r2, #24]
 800c414:	42a3      	cmp	r3, r4
 800c416:	db01      	blt.n	800c41c <__sfputc_r+0x16>
 800c418:	290a      	cmp	r1, #10
 800c41a:	d103      	bne.n	800c424 <__sfputc_r+0x1e>
 800c41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c420:	f000 b94a 	b.w	800c6b8 <__swbuf_r>
 800c424:	6813      	ldr	r3, [r2, #0]
 800c426:	1c58      	adds	r0, r3, #1
 800c428:	6010      	str	r0, [r2, #0]
 800c42a:	7019      	strb	r1, [r3, #0]
 800c42c:	4608      	mov	r0, r1
 800c42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <__sfputs_r>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	4614      	mov	r4, r2
 800c43c:	18d5      	adds	r5, r2, r3
 800c43e:	42ac      	cmp	r4, r5
 800c440:	d101      	bne.n	800c446 <__sfputs_r+0x12>
 800c442:	2000      	movs	r0, #0
 800c444:	e007      	b.n	800c456 <__sfputs_r+0x22>
 800c446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c44a:	463a      	mov	r2, r7
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7ff ffda 	bl	800c406 <__sfputc_r>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d1f3      	bne.n	800c43e <__sfputs_r+0xa>
 800c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c458 <_vfiprintf_r>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	460d      	mov	r5, r1
 800c45e:	b09d      	sub	sp, #116	; 0x74
 800c460:	4614      	mov	r4, r2
 800c462:	4698      	mov	r8, r3
 800c464:	4606      	mov	r6, r0
 800c466:	b118      	cbz	r0, 800c470 <_vfiprintf_r+0x18>
 800c468:	6983      	ldr	r3, [r0, #24]
 800c46a:	b90b      	cbnz	r3, 800c470 <_vfiprintf_r+0x18>
 800c46c:	f000 fb06 	bl	800ca7c <__sinit>
 800c470:	4b89      	ldr	r3, [pc, #548]	; (800c698 <_vfiprintf_r+0x240>)
 800c472:	429d      	cmp	r5, r3
 800c474:	d11b      	bne.n	800c4ae <_vfiprintf_r+0x56>
 800c476:	6875      	ldr	r5, [r6, #4]
 800c478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d402      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c486:	f000 fb97 	bl	800cbb8 <__retarget_lock_acquire_recursive>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	071b      	lsls	r3, r3, #28
 800c48e:	d501      	bpl.n	800c494 <_vfiprintf_r+0x3c>
 800c490:	692b      	ldr	r3, [r5, #16]
 800c492:	b9eb      	cbnz	r3, 800c4d0 <_vfiprintf_r+0x78>
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f960 	bl	800c75c <__swsetup_r>
 800c49c:	b1c0      	cbz	r0, 800c4d0 <_vfiprintf_r+0x78>
 800c49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a0:	07dc      	lsls	r4, r3, #31
 800c4a2:	d50e      	bpl.n	800c4c2 <_vfiprintf_r+0x6a>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	b01d      	add	sp, #116	; 0x74
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	4b7b      	ldr	r3, [pc, #492]	; (800c69c <_vfiprintf_r+0x244>)
 800c4b0:	429d      	cmp	r5, r3
 800c4b2:	d101      	bne.n	800c4b8 <_vfiprintf_r+0x60>
 800c4b4:	68b5      	ldr	r5, [r6, #8]
 800c4b6:	e7df      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4b8:	4b79      	ldr	r3, [pc, #484]	; (800c6a0 <_vfiprintf_r+0x248>)
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf08      	it	eq
 800c4be:	68f5      	ldreq	r5, [r6, #12]
 800c4c0:	e7da      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4c2:	89ab      	ldrh	r3, [r5, #12]
 800c4c4:	0598      	lsls	r0, r3, #22
 800c4c6:	d4ed      	bmi.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ca:	f000 fb76 	bl	800cbba <__retarget_lock_release_recursive>
 800c4ce:	e7e9      	b.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4de:	2330      	movs	r3, #48	; 0x30
 800c4e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6a4 <_vfiprintf_r+0x24c>
 800c4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4e8:	f04f 0901 	mov.w	r9, #1
 800c4ec:	4623      	mov	r3, r4
 800c4ee:	469a      	mov	sl, r3
 800c4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_vfiprintf_r+0xa2>
 800c4f6:	2a25      	cmp	r2, #37	; 0x25
 800c4f8:	d1f9      	bne.n	800c4ee <_vfiprintf_r+0x96>
 800c4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c4fe:	d00b      	beq.n	800c518 <_vfiprintf_r+0xc0>
 800c500:	465b      	mov	r3, fp
 800c502:	4622      	mov	r2, r4
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff94 	bl	800c434 <__sfputs_r>
 800c50c:	3001      	adds	r0, #1
 800c50e:	f000 80aa 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c514:	445a      	add	r2, fp
 800c516:	9209      	str	r2, [sp, #36]	; 0x24
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 80a2 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c522:	2300      	movs	r3, #0
 800c524:	f04f 32ff 	mov.w	r2, #4294967295
 800c528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c52c:	f10a 0a01 	add.w	sl, sl, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9307      	str	r3, [sp, #28]
 800c534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c538:	931a      	str	r3, [sp, #104]	; 0x68
 800c53a:	4654      	mov	r4, sl
 800c53c:	2205      	movs	r2, #5
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	4858      	ldr	r0, [pc, #352]	; (800c6a4 <_vfiprintf_r+0x24c>)
 800c544:	f7f3 fe54 	bl	80001f0 <memchr>
 800c548:	9a04      	ldr	r2, [sp, #16]
 800c54a:	b9d8      	cbnz	r0, 800c584 <_vfiprintf_r+0x12c>
 800c54c:	06d1      	lsls	r1, r2, #27
 800c54e:	bf44      	itt	mi
 800c550:	2320      	movmi	r3, #32
 800c552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c556:	0713      	lsls	r3, r2, #28
 800c558:	bf44      	itt	mi
 800c55a:	232b      	movmi	r3, #43	; 0x2b
 800c55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c560:	f89a 3000 	ldrb.w	r3, [sl]
 800c564:	2b2a      	cmp	r3, #42	; 0x2a
 800c566:	d015      	beq.n	800c594 <_vfiprintf_r+0x13c>
 800c568:	9a07      	ldr	r2, [sp, #28]
 800c56a:	4654      	mov	r4, sl
 800c56c:	2000      	movs	r0, #0
 800c56e:	f04f 0c0a 	mov.w	ip, #10
 800c572:	4621      	mov	r1, r4
 800c574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c578:	3b30      	subs	r3, #48	; 0x30
 800c57a:	2b09      	cmp	r3, #9
 800c57c:	d94e      	bls.n	800c61c <_vfiprintf_r+0x1c4>
 800c57e:	b1b0      	cbz	r0, 800c5ae <_vfiprintf_r+0x156>
 800c580:	9207      	str	r2, [sp, #28]
 800c582:	e014      	b.n	800c5ae <_vfiprintf_r+0x156>
 800c584:	eba0 0308 	sub.w	r3, r0, r8
 800c588:	fa09 f303 	lsl.w	r3, r9, r3
 800c58c:	4313      	orrs	r3, r2
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	46a2      	mov	sl, r4
 800c592:	e7d2      	b.n	800c53a <_vfiprintf_r+0xe2>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	1d19      	adds	r1, r3, #4
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	9103      	str	r1, [sp, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfbb      	ittet	lt
 800c5a0:	425b      	neglt	r3, r3
 800c5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a6:	9307      	strge	r3, [sp, #28]
 800c5a8:	9307      	strlt	r3, [sp, #28]
 800c5aa:	bfb8      	it	lt
 800c5ac:	9204      	strlt	r2, [sp, #16]
 800c5ae:	7823      	ldrb	r3, [r4, #0]
 800c5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5b2:	d10c      	bne.n	800c5ce <_vfiprintf_r+0x176>
 800c5b4:	7863      	ldrb	r3, [r4, #1]
 800c5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b8:	d135      	bne.n	800c626 <_vfiprintf_r+0x1ce>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	1d1a      	adds	r2, r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9203      	str	r2, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfb8      	it	lt
 800c5c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5ca:	3402      	adds	r4, #2
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6b4 <_vfiprintf_r+0x25c>
 800c5d2:	7821      	ldrb	r1, [r4, #0]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	f7f3 fe0a 	bl	80001f0 <memchr>
 800c5dc:	b140      	cbz	r0, 800c5f0 <_vfiprintf_r+0x198>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	eba0 000a 	sub.w	r0, r0, sl
 800c5e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	4303      	orrs	r3, r0
 800c5ec:	3401      	adds	r4, #1
 800c5ee:	9304      	str	r3, [sp, #16]
 800c5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f4:	482c      	ldr	r0, [pc, #176]	; (800c6a8 <_vfiprintf_r+0x250>)
 800c5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5fa:	2206      	movs	r2, #6
 800c5fc:	f7f3 fdf8 	bl	80001f0 <memchr>
 800c600:	2800      	cmp	r0, #0
 800c602:	d03f      	beq.n	800c684 <_vfiprintf_r+0x22c>
 800c604:	4b29      	ldr	r3, [pc, #164]	; (800c6ac <_vfiprintf_r+0x254>)
 800c606:	bb1b      	cbnz	r3, 800c650 <_vfiprintf_r+0x1f8>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	3307      	adds	r3, #7
 800c60c:	f023 0307 	bic.w	r3, r3, #7
 800c610:	3308      	adds	r3, #8
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c616:	443b      	add	r3, r7
 800c618:	9309      	str	r3, [sp, #36]	; 0x24
 800c61a:	e767      	b.n	800c4ec <_vfiprintf_r+0x94>
 800c61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c620:	460c      	mov	r4, r1
 800c622:	2001      	movs	r0, #1
 800c624:	e7a5      	b.n	800c572 <_vfiprintf_r+0x11a>
 800c626:	2300      	movs	r3, #0
 800c628:	3401      	adds	r4, #1
 800c62a:	9305      	str	r3, [sp, #20]
 800c62c:	4619      	mov	r1, r3
 800c62e:	f04f 0c0a 	mov.w	ip, #10
 800c632:	4620      	mov	r0, r4
 800c634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c638:	3a30      	subs	r2, #48	; 0x30
 800c63a:	2a09      	cmp	r2, #9
 800c63c:	d903      	bls.n	800c646 <_vfiprintf_r+0x1ee>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0c5      	beq.n	800c5ce <_vfiprintf_r+0x176>
 800c642:	9105      	str	r1, [sp, #20]
 800c644:	e7c3      	b.n	800c5ce <_vfiprintf_r+0x176>
 800c646:	fb0c 2101 	mla	r1, ip, r1, r2
 800c64a:	4604      	mov	r4, r0
 800c64c:	2301      	movs	r3, #1
 800c64e:	e7f0      	b.n	800c632 <_vfiprintf_r+0x1da>
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7fc f806 	bl	800866c <_printf_float>
 800c660:	4607      	mov	r7, r0
 800c662:	1c78      	adds	r0, r7, #1
 800c664:	d1d6      	bne.n	800c614 <_vfiprintf_r+0x1bc>
 800c666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c668:	07d9      	lsls	r1, r3, #31
 800c66a:	d405      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c66c:	89ab      	ldrh	r3, [r5, #12]
 800c66e:	059a      	lsls	r2, r3, #22
 800c670:	d402      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c674:	f000 faa1 	bl	800cbba <__retarget_lock_release_recursive>
 800c678:	89ab      	ldrh	r3, [r5, #12]
 800c67a:	065b      	lsls	r3, r3, #25
 800c67c:	f53f af12 	bmi.w	800c4a4 <_vfiprintf_r+0x4c>
 800c680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c682:	e711      	b.n	800c4a8 <_vfiprintf_r+0x50>
 800c684:	ab03      	add	r3, sp, #12
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	462a      	mov	r2, r5
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	4630      	mov	r0, r6
 800c690:	f7fc fa90 	bl	8008bb4 <_printf_i>
 800c694:	e7e4      	b.n	800c660 <_vfiprintf_r+0x208>
 800c696:	bf00      	nop
 800c698:	0800d80c 	.word	0x0800d80c
 800c69c:	0800d82c 	.word	0x0800d82c
 800c6a0:	0800d7ec 	.word	0x0800d7ec
 800c6a4:	0800d79c 	.word	0x0800d79c
 800c6a8:	0800d7a6 	.word	0x0800d7a6
 800c6ac:	0800866d 	.word	0x0800866d
 800c6b0:	0800c435 	.word	0x0800c435
 800c6b4:	0800d7a2 	.word	0x0800d7a2

0800c6b8 <__swbuf_r>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	4614      	mov	r4, r2
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b118      	cbz	r0, 800c6ca <__swbuf_r+0x12>
 800c6c2:	6983      	ldr	r3, [r0, #24]
 800c6c4:	b90b      	cbnz	r3, 800c6ca <__swbuf_r+0x12>
 800c6c6:	f000 f9d9 	bl	800ca7c <__sinit>
 800c6ca:	4b21      	ldr	r3, [pc, #132]	; (800c750 <__swbuf_r+0x98>)
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	d12b      	bne.n	800c728 <__swbuf_r+0x70>
 800c6d0:	686c      	ldr	r4, [r5, #4]
 800c6d2:	69a3      	ldr	r3, [r4, #24]
 800c6d4:	60a3      	str	r3, [r4, #8]
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	071a      	lsls	r2, r3, #28
 800c6da:	d52f      	bpl.n	800c73c <__swbuf_r+0x84>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	b36b      	cbz	r3, 800c73c <__swbuf_r+0x84>
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	1ac0      	subs	r0, r0, r3
 800c6e6:	6963      	ldr	r3, [r4, #20]
 800c6e8:	b2f6      	uxtb	r6, r6
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	4637      	mov	r7, r6
 800c6ee:	dc04      	bgt.n	800c6fa <__swbuf_r+0x42>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 f92e 	bl	800c954 <_fflush_r>
 800c6f8:	bb30      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	60a3      	str	r3, [r4, #8]
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	6022      	str	r2, [r4, #0]
 800c706:	701e      	strb	r6, [r3, #0]
 800c708:	6963      	ldr	r3, [r4, #20]
 800c70a:	3001      	adds	r0, #1
 800c70c:	4283      	cmp	r3, r0
 800c70e:	d004      	beq.n	800c71a <__swbuf_r+0x62>
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	07db      	lsls	r3, r3, #31
 800c714:	d506      	bpl.n	800c724 <__swbuf_r+0x6c>
 800c716:	2e0a      	cmp	r6, #10
 800c718:	d104      	bne.n	800c724 <__swbuf_r+0x6c>
 800c71a:	4621      	mov	r1, r4
 800c71c:	4628      	mov	r0, r5
 800c71e:	f000 f919 	bl	800c954 <_fflush_r>
 800c722:	b988      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c724:	4638      	mov	r0, r7
 800c726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <__swbuf_r+0x9c>)
 800c72a:	429c      	cmp	r4, r3
 800c72c:	d101      	bne.n	800c732 <__swbuf_r+0x7a>
 800c72e:	68ac      	ldr	r4, [r5, #8]
 800c730:	e7cf      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <__swbuf_r+0xa0>)
 800c734:	429c      	cmp	r4, r3
 800c736:	bf08      	it	eq
 800c738:	68ec      	ldreq	r4, [r5, #12]
 800c73a:	e7ca      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f80c 	bl	800c75c <__swsetup_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	d0cb      	beq.n	800c6e0 <__swbuf_r+0x28>
 800c748:	f04f 37ff 	mov.w	r7, #4294967295
 800c74c:	e7ea      	b.n	800c724 <__swbuf_r+0x6c>
 800c74e:	bf00      	nop
 800c750:	0800d80c 	.word	0x0800d80c
 800c754:	0800d82c 	.word	0x0800d82c
 800c758:	0800d7ec 	.word	0x0800d7ec

0800c75c <__swsetup_r>:
 800c75c:	4b32      	ldr	r3, [pc, #200]	; (800c828 <__swsetup_r+0xcc>)
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	681d      	ldr	r5, [r3, #0]
 800c762:	4606      	mov	r6, r0
 800c764:	460c      	mov	r4, r1
 800c766:	b125      	cbz	r5, 800c772 <__swsetup_r+0x16>
 800c768:	69ab      	ldr	r3, [r5, #24]
 800c76a:	b913      	cbnz	r3, 800c772 <__swsetup_r+0x16>
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 f985 	bl	800ca7c <__sinit>
 800c772:	4b2e      	ldr	r3, [pc, #184]	; (800c82c <__swsetup_r+0xd0>)
 800c774:	429c      	cmp	r4, r3
 800c776:	d10f      	bne.n	800c798 <__swsetup_r+0x3c>
 800c778:	686c      	ldr	r4, [r5, #4]
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c780:	0719      	lsls	r1, r3, #28
 800c782:	d42c      	bmi.n	800c7de <__swsetup_r+0x82>
 800c784:	06dd      	lsls	r5, r3, #27
 800c786:	d411      	bmi.n	800c7ac <__swsetup_r+0x50>
 800c788:	2309      	movs	r3, #9
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c790:	81a3      	strh	r3, [r4, #12]
 800c792:	f04f 30ff 	mov.w	r0, #4294967295
 800c796:	e03e      	b.n	800c816 <__swsetup_r+0xba>
 800c798:	4b25      	ldr	r3, [pc, #148]	; (800c830 <__swsetup_r+0xd4>)
 800c79a:	429c      	cmp	r4, r3
 800c79c:	d101      	bne.n	800c7a2 <__swsetup_r+0x46>
 800c79e:	68ac      	ldr	r4, [r5, #8]
 800c7a0:	e7eb      	b.n	800c77a <__swsetup_r+0x1e>
 800c7a2:	4b24      	ldr	r3, [pc, #144]	; (800c834 <__swsetup_r+0xd8>)
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	bf08      	it	eq
 800c7a8:	68ec      	ldreq	r4, [r5, #12]
 800c7aa:	e7e6      	b.n	800c77a <__swsetup_r+0x1e>
 800c7ac:	0758      	lsls	r0, r3, #29
 800c7ae:	d512      	bpl.n	800c7d6 <__swsetup_r+0x7a>
 800c7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b2:	b141      	cbz	r1, 800c7c6 <__swsetup_r+0x6a>
 800c7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7b8:	4299      	cmp	r1, r3
 800c7ba:	d002      	beq.n	800c7c2 <__swsetup_r+0x66>
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff fb25 	bl	800be0c <_free_r>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	6923      	ldr	r3, [r4, #16]
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f043 0308 	orr.w	r3, r3, #8
 800c7dc:	81a3      	strh	r3, [r4, #12]
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	b94b      	cbnz	r3, 800c7f6 <__swsetup_r+0x9a>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ec:	d003      	beq.n	800c7f6 <__swsetup_r+0x9a>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 fa09 	bl	800cc08 <__smakebuf_r>
 800c7f6:	89a0      	ldrh	r0, [r4, #12]
 800c7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7fc:	f010 0301 	ands.w	r3, r0, #1
 800c800:	d00a      	beq.n	800c818 <__swsetup_r+0xbc>
 800c802:	2300      	movs	r3, #0
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	425b      	negs	r3, r3
 800c80a:	61a3      	str	r3, [r4, #24]
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	b943      	cbnz	r3, 800c822 <__swsetup_r+0xc6>
 800c810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c814:	d1ba      	bne.n	800c78c <__swsetup_r+0x30>
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	0781      	lsls	r1, r0, #30
 800c81a:	bf58      	it	pl
 800c81c:	6963      	ldrpl	r3, [r4, #20]
 800c81e:	60a3      	str	r3, [r4, #8]
 800c820:	e7f4      	b.n	800c80c <__swsetup_r+0xb0>
 800c822:	2000      	movs	r0, #0
 800c824:	e7f7      	b.n	800c816 <__swsetup_r+0xba>
 800c826:	bf00      	nop
 800c828:	20000024 	.word	0x20000024
 800c82c:	0800d80c 	.word	0x0800d80c
 800c830:	0800d82c 	.word	0x0800d82c
 800c834:	0800d7ec 	.word	0x0800d7ec

0800c838 <abort>:
 800c838:	b508      	push	{r3, lr}
 800c83a:	2006      	movs	r0, #6
 800c83c:	f000 fa54 	bl	800cce8 <raise>
 800c840:	2001      	movs	r0, #1
 800c842:	f7f5 fd35 	bl	80022b0 <_exit>
	...

0800c848 <__sflush_r>:
 800c848:	898a      	ldrh	r2, [r1, #12]
 800c84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84e:	4605      	mov	r5, r0
 800c850:	0710      	lsls	r0, r2, #28
 800c852:	460c      	mov	r4, r1
 800c854:	d458      	bmi.n	800c908 <__sflush_r+0xc0>
 800c856:	684b      	ldr	r3, [r1, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dc05      	bgt.n	800c868 <__sflush_r+0x20>
 800c85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dc02      	bgt.n	800c868 <__sflush_r+0x20>
 800c862:	2000      	movs	r0, #0
 800c864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	d0f9      	beq.n	800c862 <__sflush_r+0x1a>
 800c86e:	2300      	movs	r3, #0
 800c870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c874:	682f      	ldr	r7, [r5, #0]
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	d032      	beq.n	800c8e0 <__sflush_r+0x98>
 800c87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	075a      	lsls	r2, r3, #29
 800c880:	d505      	bpl.n	800c88e <__sflush_r+0x46>
 800c882:	6863      	ldr	r3, [r4, #4]
 800c884:	1ac0      	subs	r0, r0, r3
 800c886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c888:	b10b      	cbz	r3, 800c88e <__sflush_r+0x46>
 800c88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c88c:	1ac0      	subs	r0, r0, r3
 800c88e:	2300      	movs	r3, #0
 800c890:	4602      	mov	r2, r0
 800c892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c894:	6a21      	ldr	r1, [r4, #32]
 800c896:	4628      	mov	r0, r5
 800c898:	47b0      	blx	r6
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	d106      	bne.n	800c8ae <__sflush_r+0x66>
 800c8a0:	6829      	ldr	r1, [r5, #0]
 800c8a2:	291d      	cmp	r1, #29
 800c8a4:	d82c      	bhi.n	800c900 <__sflush_r+0xb8>
 800c8a6:	4a2a      	ldr	r2, [pc, #168]	; (800c950 <__sflush_r+0x108>)
 800c8a8:	40ca      	lsrs	r2, r1
 800c8aa:	07d6      	lsls	r6, r2, #31
 800c8ac:	d528      	bpl.n	800c900 <__sflush_r+0xb8>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	6062      	str	r2, [r4, #4]
 800c8b2:	04d9      	lsls	r1, r3, #19
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	d504      	bpl.n	800c8c4 <__sflush_r+0x7c>
 800c8ba:	1c42      	adds	r2, r0, #1
 800c8bc:	d101      	bne.n	800c8c2 <__sflush_r+0x7a>
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	b903      	cbnz	r3, 800c8c4 <__sflush_r+0x7c>
 800c8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800c8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c6:	602f      	str	r7, [r5, #0]
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	d0ca      	beq.n	800c862 <__sflush_r+0x1a>
 800c8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8d0:	4299      	cmp	r1, r3
 800c8d2:	d002      	beq.n	800c8da <__sflush_r+0x92>
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7ff fa99 	bl	800be0c <_free_r>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8de:	e7c1      	b.n	800c864 <__sflush_r+0x1c>
 800c8e0:	6a21      	ldr	r1, [r4, #32]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	47b0      	blx	r6
 800c8e8:	1c41      	adds	r1, r0, #1
 800c8ea:	d1c7      	bne.n	800c87c <__sflush_r+0x34>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0c4      	beq.n	800c87c <__sflush_r+0x34>
 800c8f2:	2b1d      	cmp	r3, #29
 800c8f4:	d001      	beq.n	800c8fa <__sflush_r+0xb2>
 800c8f6:	2b16      	cmp	r3, #22
 800c8f8:	d101      	bne.n	800c8fe <__sflush_r+0xb6>
 800c8fa:	602f      	str	r7, [r5, #0]
 800c8fc:	e7b1      	b.n	800c862 <__sflush_r+0x1a>
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	e7ad      	b.n	800c864 <__sflush_r+0x1c>
 800c908:	690f      	ldr	r7, [r1, #16]
 800c90a:	2f00      	cmp	r7, #0
 800c90c:	d0a9      	beq.n	800c862 <__sflush_r+0x1a>
 800c90e:	0793      	lsls	r3, r2, #30
 800c910:	680e      	ldr	r6, [r1, #0]
 800c912:	bf08      	it	eq
 800c914:	694b      	ldreq	r3, [r1, #20]
 800c916:	600f      	str	r7, [r1, #0]
 800c918:	bf18      	it	ne
 800c91a:	2300      	movne	r3, #0
 800c91c:	eba6 0807 	sub.w	r8, r6, r7
 800c920:	608b      	str	r3, [r1, #8]
 800c922:	f1b8 0f00 	cmp.w	r8, #0
 800c926:	dd9c      	ble.n	800c862 <__sflush_r+0x1a>
 800c928:	6a21      	ldr	r1, [r4, #32]
 800c92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c92c:	4643      	mov	r3, r8
 800c92e:	463a      	mov	r2, r7
 800c930:	4628      	mov	r0, r5
 800c932:	47b0      	blx	r6
 800c934:	2800      	cmp	r0, #0
 800c936:	dc06      	bgt.n	800c946 <__sflush_r+0xfe>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	e78e      	b.n	800c864 <__sflush_r+0x1c>
 800c946:	4407      	add	r7, r0
 800c948:	eba8 0800 	sub.w	r8, r8, r0
 800c94c:	e7e9      	b.n	800c922 <__sflush_r+0xda>
 800c94e:	bf00      	nop
 800c950:	20400001 	.word	0x20400001

0800c954 <_fflush_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	690b      	ldr	r3, [r1, #16]
 800c958:	4605      	mov	r5, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	b913      	cbnz	r3, 800c964 <_fflush_r+0x10>
 800c95e:	2500      	movs	r5, #0
 800c960:	4628      	mov	r0, r5
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	b118      	cbz	r0, 800c96e <_fflush_r+0x1a>
 800c966:	6983      	ldr	r3, [r0, #24]
 800c968:	b90b      	cbnz	r3, 800c96e <_fflush_r+0x1a>
 800c96a:	f000 f887 	bl	800ca7c <__sinit>
 800c96e:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <_fflush_r+0x6c>)
 800c970:	429c      	cmp	r4, r3
 800c972:	d11b      	bne.n	800c9ac <_fflush_r+0x58>
 800c974:	686c      	ldr	r4, [r5, #4]
 800c976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0ef      	beq.n	800c95e <_fflush_r+0xa>
 800c97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c980:	07d0      	lsls	r0, r2, #31
 800c982:	d404      	bmi.n	800c98e <_fflush_r+0x3a>
 800c984:	0599      	lsls	r1, r3, #22
 800c986:	d402      	bmi.n	800c98e <_fflush_r+0x3a>
 800c988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c98a:	f000 f915 	bl	800cbb8 <__retarget_lock_acquire_recursive>
 800c98e:	4628      	mov	r0, r5
 800c990:	4621      	mov	r1, r4
 800c992:	f7ff ff59 	bl	800c848 <__sflush_r>
 800c996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c998:	07da      	lsls	r2, r3, #31
 800c99a:	4605      	mov	r5, r0
 800c99c:	d4e0      	bmi.n	800c960 <_fflush_r+0xc>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	059b      	lsls	r3, r3, #22
 800c9a2:	d4dd      	bmi.n	800c960 <_fflush_r+0xc>
 800c9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a6:	f000 f908 	bl	800cbba <__retarget_lock_release_recursive>
 800c9aa:	e7d9      	b.n	800c960 <_fflush_r+0xc>
 800c9ac:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <_fflush_r+0x70>)
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	d101      	bne.n	800c9b6 <_fflush_r+0x62>
 800c9b2:	68ac      	ldr	r4, [r5, #8]
 800c9b4:	e7df      	b.n	800c976 <_fflush_r+0x22>
 800c9b6:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <_fflush_r+0x74>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	bf08      	it	eq
 800c9bc:	68ec      	ldreq	r4, [r5, #12]
 800c9be:	e7da      	b.n	800c976 <_fflush_r+0x22>
 800c9c0:	0800d80c 	.word	0x0800d80c
 800c9c4:	0800d82c 	.word	0x0800d82c
 800c9c8:	0800d7ec 	.word	0x0800d7ec

0800c9cc <std>:
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9da:	6083      	str	r3, [r0, #8]
 800c9dc:	8181      	strh	r1, [r0, #12]
 800c9de:	6643      	str	r3, [r0, #100]	; 0x64
 800c9e0:	81c2      	strh	r2, [r0, #14]
 800c9e2:	6183      	str	r3, [r0, #24]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	305c      	adds	r0, #92	; 0x5c
 800c9ea:	f7fb fd97 	bl	800851c <memset>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <std+0x38>)
 800c9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <std+0x3c>)
 800c9f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <std+0x40>)
 800c9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9fa:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <std+0x44>)
 800c9fc:	6224      	str	r4, [r4, #32]
 800c9fe:	6323      	str	r3, [r4, #48]	; 0x30
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	0800cd21 	.word	0x0800cd21
 800ca08:	0800cd43 	.word	0x0800cd43
 800ca0c:	0800cd7b 	.word	0x0800cd7b
 800ca10:	0800cd9f 	.word	0x0800cd9f

0800ca14 <_cleanup_r>:
 800ca14:	4901      	ldr	r1, [pc, #4]	; (800ca1c <_cleanup_r+0x8>)
 800ca16:	f000 b8af 	b.w	800cb78 <_fwalk_reent>
 800ca1a:	bf00      	nop
 800ca1c:	0800c955 	.word	0x0800c955

0800ca20 <__sfmoreglue>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	2268      	movs	r2, #104	; 0x68
 800ca24:	1e4d      	subs	r5, r1, #1
 800ca26:	4355      	muls	r5, r2
 800ca28:	460e      	mov	r6, r1
 800ca2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca2e:	f7ff fa59 	bl	800bee4 <_malloc_r>
 800ca32:	4604      	mov	r4, r0
 800ca34:	b140      	cbz	r0, 800ca48 <__sfmoreglue+0x28>
 800ca36:	2100      	movs	r1, #0
 800ca38:	e9c0 1600 	strd	r1, r6, [r0]
 800ca3c:	300c      	adds	r0, #12
 800ca3e:	60a0      	str	r0, [r4, #8]
 800ca40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca44:	f7fb fd6a 	bl	800851c <memset>
 800ca48:	4620      	mov	r0, r4
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}

0800ca4c <__sfp_lock_acquire>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__sfp_lock_acquire+0x8>)
 800ca4e:	f000 b8b3 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800ca52:	bf00      	nop
 800ca54:	2000264d 	.word	0x2000264d

0800ca58 <__sfp_lock_release>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__sfp_lock_release+0x8>)
 800ca5a:	f000 b8ae 	b.w	800cbba <__retarget_lock_release_recursive>
 800ca5e:	bf00      	nop
 800ca60:	2000264d 	.word	0x2000264d

0800ca64 <__sinit_lock_acquire>:
 800ca64:	4801      	ldr	r0, [pc, #4]	; (800ca6c <__sinit_lock_acquire+0x8>)
 800ca66:	f000 b8a7 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800ca6a:	bf00      	nop
 800ca6c:	2000264e 	.word	0x2000264e

0800ca70 <__sinit_lock_release>:
 800ca70:	4801      	ldr	r0, [pc, #4]	; (800ca78 <__sinit_lock_release+0x8>)
 800ca72:	f000 b8a2 	b.w	800cbba <__retarget_lock_release_recursive>
 800ca76:	bf00      	nop
 800ca78:	2000264e 	.word	0x2000264e

0800ca7c <__sinit>:
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	4604      	mov	r4, r0
 800ca80:	f7ff fff0 	bl	800ca64 <__sinit_lock_acquire>
 800ca84:	69a3      	ldr	r3, [r4, #24]
 800ca86:	b11b      	cbz	r3, 800ca90 <__sinit+0x14>
 800ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca8c:	f7ff bff0 	b.w	800ca70 <__sinit_lock_release>
 800ca90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca94:	6523      	str	r3, [r4, #80]	; 0x50
 800ca96:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <__sinit+0x68>)
 800ca98:	4a13      	ldr	r2, [pc, #76]	; (800cae8 <__sinit+0x6c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca9e:	42a3      	cmp	r3, r4
 800caa0:	bf04      	itt	eq
 800caa2:	2301      	moveq	r3, #1
 800caa4:	61a3      	streq	r3, [r4, #24]
 800caa6:	4620      	mov	r0, r4
 800caa8:	f000 f820 	bl	800caec <__sfp>
 800caac:	6060      	str	r0, [r4, #4]
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f81c 	bl	800caec <__sfp>
 800cab4:	60a0      	str	r0, [r4, #8]
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 f818 	bl	800caec <__sfp>
 800cabc:	2200      	movs	r2, #0
 800cabe:	60e0      	str	r0, [r4, #12]
 800cac0:	2104      	movs	r1, #4
 800cac2:	6860      	ldr	r0, [r4, #4]
 800cac4:	f7ff ff82 	bl	800c9cc <std>
 800cac8:	68a0      	ldr	r0, [r4, #8]
 800caca:	2201      	movs	r2, #1
 800cacc:	2109      	movs	r1, #9
 800cace:	f7ff ff7d 	bl	800c9cc <std>
 800cad2:	68e0      	ldr	r0, [r4, #12]
 800cad4:	2202      	movs	r2, #2
 800cad6:	2112      	movs	r1, #18
 800cad8:	f7ff ff78 	bl	800c9cc <std>
 800cadc:	2301      	movs	r3, #1
 800cade:	61a3      	str	r3, [r4, #24]
 800cae0:	e7d2      	b.n	800ca88 <__sinit+0xc>
 800cae2:	bf00      	nop
 800cae4:	0800d3a4 	.word	0x0800d3a4
 800cae8:	0800ca15 	.word	0x0800ca15

0800caec <__sfp>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	4607      	mov	r7, r0
 800caf0:	f7ff ffac 	bl	800ca4c <__sfp_lock_acquire>
 800caf4:	4b1e      	ldr	r3, [pc, #120]	; (800cb70 <__sfp+0x84>)
 800caf6:	681e      	ldr	r6, [r3, #0]
 800caf8:	69b3      	ldr	r3, [r6, #24]
 800cafa:	b913      	cbnz	r3, 800cb02 <__sfp+0x16>
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff ffbd 	bl	800ca7c <__sinit>
 800cb02:	3648      	adds	r6, #72	; 0x48
 800cb04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	d503      	bpl.n	800cb14 <__sfp+0x28>
 800cb0c:	6833      	ldr	r3, [r6, #0]
 800cb0e:	b30b      	cbz	r3, 800cb54 <__sfp+0x68>
 800cb10:	6836      	ldr	r6, [r6, #0]
 800cb12:	e7f7      	b.n	800cb04 <__sfp+0x18>
 800cb14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb18:	b9d5      	cbnz	r5, 800cb50 <__sfp+0x64>
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <__sfp+0x88>)
 800cb1c:	60e3      	str	r3, [r4, #12]
 800cb1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb22:	6665      	str	r5, [r4, #100]	; 0x64
 800cb24:	f000 f847 	bl	800cbb6 <__retarget_lock_init_recursive>
 800cb28:	f7ff ff96 	bl	800ca58 <__sfp_lock_release>
 800cb2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb34:	6025      	str	r5, [r4, #0]
 800cb36:	61a5      	str	r5, [r4, #24]
 800cb38:	2208      	movs	r2, #8
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb40:	f7fb fcec 	bl	800851c <memset>
 800cb44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb50:	3468      	adds	r4, #104	; 0x68
 800cb52:	e7d9      	b.n	800cb08 <__sfp+0x1c>
 800cb54:	2104      	movs	r1, #4
 800cb56:	4638      	mov	r0, r7
 800cb58:	f7ff ff62 	bl	800ca20 <__sfmoreglue>
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	6030      	str	r0, [r6, #0]
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d1d5      	bne.n	800cb10 <__sfp+0x24>
 800cb64:	f7ff ff78 	bl	800ca58 <__sfp_lock_release>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	e7ee      	b.n	800cb4c <__sfp+0x60>
 800cb6e:	bf00      	nop
 800cb70:	0800d3a4 	.word	0x0800d3a4
 800cb74:	ffff0001 	.word	0xffff0001

0800cb78 <_fwalk_reent>:
 800cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	4688      	mov	r8, r1
 800cb80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb84:	2700      	movs	r7, #0
 800cb86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb8a:	f1b9 0901 	subs.w	r9, r9, #1
 800cb8e:	d505      	bpl.n	800cb9c <_fwalk_reent+0x24>
 800cb90:	6824      	ldr	r4, [r4, #0]
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d1f7      	bne.n	800cb86 <_fwalk_reent+0xe>
 800cb96:	4638      	mov	r0, r7
 800cb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	89ab      	ldrh	r3, [r5, #12]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d907      	bls.n	800cbb2 <_fwalk_reent+0x3a>
 800cba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cba6:	3301      	adds	r3, #1
 800cba8:	d003      	beq.n	800cbb2 <_fwalk_reent+0x3a>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4630      	mov	r0, r6
 800cbae:	47c0      	blx	r8
 800cbb0:	4307      	orrs	r7, r0
 800cbb2:	3568      	adds	r5, #104	; 0x68
 800cbb4:	e7e9      	b.n	800cb8a <_fwalk_reent+0x12>

0800cbb6 <__retarget_lock_init_recursive>:
 800cbb6:	4770      	bx	lr

0800cbb8 <__retarget_lock_acquire_recursive>:
 800cbb8:	4770      	bx	lr

0800cbba <__retarget_lock_release_recursive>:
 800cbba:	4770      	bx	lr

0800cbbc <__swhatbuf_r>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	b096      	sub	sp, #88	; 0x58
 800cbc8:	4614      	mov	r4, r2
 800cbca:	461d      	mov	r5, r3
 800cbcc:	da08      	bge.n	800cbe0 <__swhatbuf_r+0x24>
 800cbce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	061a      	lsls	r2, r3, #24
 800cbd8:	d410      	bmi.n	800cbfc <__swhatbuf_r+0x40>
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	e00e      	b.n	800cbfe <__swhatbuf_r+0x42>
 800cbe0:	466a      	mov	r2, sp
 800cbe2:	f000 f903 	bl	800cdec <_fstat_r>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	dbf1      	blt.n	800cbce <__swhatbuf_r+0x12>
 800cbea:	9a01      	ldr	r2, [sp, #4]
 800cbec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbf4:	425a      	negs	r2, r3
 800cbf6:	415a      	adcs	r2, r3
 800cbf8:	602a      	str	r2, [r5, #0]
 800cbfa:	e7ee      	b.n	800cbda <__swhatbuf_r+0x1e>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	2000      	movs	r0, #0
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	b016      	add	sp, #88	; 0x58
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc08 <__smakebuf_r>:
 800cc08:	898b      	ldrh	r3, [r1, #12]
 800cc0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc0c:	079d      	lsls	r5, r3, #30
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460c      	mov	r4, r1
 800cc12:	d507      	bpl.n	800cc24 <__smakebuf_r+0x1c>
 800cc14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	6123      	str	r3, [r4, #16]
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	6163      	str	r3, [r4, #20]
 800cc20:	b002      	add	sp, #8
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	ab01      	add	r3, sp, #4
 800cc26:	466a      	mov	r2, sp
 800cc28:	f7ff ffc8 	bl	800cbbc <__swhatbuf_r>
 800cc2c:	9900      	ldr	r1, [sp, #0]
 800cc2e:	4605      	mov	r5, r0
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff f957 	bl	800bee4 <_malloc_r>
 800cc36:	b948      	cbnz	r0, 800cc4c <__smakebuf_r+0x44>
 800cc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d4ef      	bmi.n	800cc20 <__smakebuf_r+0x18>
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	f043 0302 	orr.w	r3, r3, #2
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	e7e3      	b.n	800cc14 <__smakebuf_r+0xc>
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <__smakebuf_r+0x7c>)
 800cc4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	9b00      	ldr	r3, [sp, #0]
 800cc5c:	6163      	str	r3, [r4, #20]
 800cc5e:	9b01      	ldr	r3, [sp, #4]
 800cc60:	6120      	str	r0, [r4, #16]
 800cc62:	b15b      	cbz	r3, 800cc7c <__smakebuf_r+0x74>
 800cc64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f000 f8d1 	bl	800ce10 <_isatty_r>
 800cc6e:	b128      	cbz	r0, 800cc7c <__smakebuf_r+0x74>
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	89a0      	ldrh	r0, [r4, #12]
 800cc7e:	4305      	orrs	r5, r0
 800cc80:	81a5      	strh	r5, [r4, #12]
 800cc82:	e7cd      	b.n	800cc20 <__smakebuf_r+0x18>
 800cc84:	0800ca15 	.word	0x0800ca15

0800cc88 <_malloc_usable_size_r>:
 800cc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc8c:	1f18      	subs	r0, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfbc      	itt	lt
 800cc92:	580b      	ldrlt	r3, [r1, r0]
 800cc94:	18c0      	addlt	r0, r0, r3
 800cc96:	4770      	bx	lr

0800cc98 <_raise_r>:
 800cc98:	291f      	cmp	r1, #31
 800cc9a:	b538      	push	{r3, r4, r5, lr}
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	460d      	mov	r5, r1
 800cca0:	d904      	bls.n	800ccac <_raise_r+0x14>
 800cca2:	2316      	movs	r3, #22
 800cca4:	6003      	str	r3, [r0, #0]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccae:	b112      	cbz	r2, 800ccb6 <_raise_r+0x1e>
 800ccb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccb4:	b94b      	cbnz	r3, 800ccca <_raise_r+0x32>
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 f830 	bl	800cd1c <_getpid_r>
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccc6:	f000 b817 	b.w	800ccf8 <_kill_r>
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d00a      	beq.n	800cce4 <_raise_r+0x4c>
 800ccce:	1c59      	adds	r1, r3, #1
 800ccd0:	d103      	bne.n	800ccda <_raise_r+0x42>
 800ccd2:	2316      	movs	r3, #22
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	2001      	movs	r0, #1
 800ccd8:	e7e7      	b.n	800ccaa <_raise_r+0x12>
 800ccda:	2400      	movs	r4, #0
 800ccdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cce0:	4628      	mov	r0, r5
 800cce2:	4798      	blx	r3
 800cce4:	2000      	movs	r0, #0
 800cce6:	e7e0      	b.n	800ccaa <_raise_r+0x12>

0800cce8 <raise>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <raise+0xc>)
 800ccea:	4601      	mov	r1, r0
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f7ff bfd3 	b.w	800cc98 <_raise_r>
 800ccf2:	bf00      	nop
 800ccf4:	20000024 	.word	0x20000024

0800ccf8 <_kill_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	; (800cd18 <_kill_r+0x20>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	4611      	mov	r1, r2
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	f7f5 fac3 	bl	8002290 <_kill>
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	d102      	bne.n	800cd14 <_kill_r+0x1c>
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	b103      	cbz	r3, 800cd14 <_kill_r+0x1c>
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	20002648 	.word	0x20002648

0800cd1c <_getpid_r>:
 800cd1c:	f7f5 bab0 	b.w	8002280 <_getpid>

0800cd20 <__sread>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd28:	f000 f894 	bl	800ce54 <_read_r>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	bfab      	itete	ge
 800cd30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd32:	89a3      	ldrhlt	r3, [r4, #12]
 800cd34:	181b      	addge	r3, r3, r0
 800cd36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd3a:	bfac      	ite	ge
 800cd3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd3e:	81a3      	strhlt	r3, [r4, #12]
 800cd40:	bd10      	pop	{r4, pc}

0800cd42 <__swrite>:
 800cd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	461f      	mov	r7, r3
 800cd48:	898b      	ldrh	r3, [r1, #12]
 800cd4a:	05db      	lsls	r3, r3, #23
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	4616      	mov	r6, r2
 800cd52:	d505      	bpl.n	800cd60 <__swrite+0x1e>
 800cd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd58:	2302      	movs	r3, #2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f000 f868 	bl	800ce30 <_lseek_r>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd76:	f000 b817 	b.w	800cda8 <_write_r>

0800cd7a <__sseek>:
 800cd7a:	b510      	push	{r4, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd82:	f000 f855 	bl	800ce30 <_lseek_r>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	bf15      	itete	ne
 800cd8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd96:	81a3      	strheq	r3, [r4, #12]
 800cd98:	bf18      	it	ne
 800cd9a:	81a3      	strhne	r3, [r4, #12]
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <__sclose>:
 800cd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda2:	f000 b813 	b.w	800cdcc <_close_r>
	...

0800cda8 <_write_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	; (800cdc8 <_write_r+0x20>)
 800cdac:	4604      	mov	r4, r0
 800cdae:	4608      	mov	r0, r1
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	602a      	str	r2, [r5, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f7f5 faa1 	bl	80022fe <_write>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_write_r+0x1e>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_write_r+0x1e>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20002648 	.word	0x20002648

0800cdcc <_close_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_close_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f5 faad 	bl	8002336 <_close>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_close_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_close_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	20002648 	.word	0x20002648

0800cdec <_fstat_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d07      	ldr	r5, [pc, #28]	; (800ce0c <_fstat_r+0x20>)
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	f7f5 faa8 	bl	800234e <_fstat>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	d102      	bne.n	800ce08 <_fstat_r+0x1c>
 800ce02:	682b      	ldr	r3, [r5, #0]
 800ce04:	b103      	cbz	r3, 800ce08 <_fstat_r+0x1c>
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20002648 	.word	0x20002648

0800ce10 <_isatty_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d06      	ldr	r5, [pc, #24]	; (800ce2c <_isatty_r+0x1c>)
 800ce14:	2300      	movs	r3, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	4608      	mov	r0, r1
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	f7f5 faa7 	bl	800236e <_isatty>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	d102      	bne.n	800ce2a <_isatty_r+0x1a>
 800ce24:	682b      	ldr	r3, [r5, #0]
 800ce26:	b103      	cbz	r3, 800ce2a <_isatty_r+0x1a>
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	20002648 	.word	0x20002648

0800ce30 <_lseek_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	; (800ce50 <_lseek_r+0x20>)
 800ce34:	4604      	mov	r4, r0
 800ce36:	4608      	mov	r0, r1
 800ce38:	4611      	mov	r1, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	602a      	str	r2, [r5, #0]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f7f5 faa0 	bl	8002384 <_lseek>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_lseek_r+0x1e>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_lseek_r+0x1e>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	20002648 	.word	0x20002648

0800ce54 <_read_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d07      	ldr	r5, [pc, #28]	; (800ce74 <_read_r+0x20>)
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	2200      	movs	r2, #0
 800ce60:	602a      	str	r2, [r5, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	f7f5 fa2e 	bl	80022c4 <_read>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_read_r+0x1e>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_read_r+0x1e>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	20002648 	.word	0x20002648

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
