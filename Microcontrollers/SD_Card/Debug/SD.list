
SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d74  08006d74  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000084  08006e00  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08006e00  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001192a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002389  00000000  00000000  000319de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00033d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e9e  00000000  00000000  00035d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144af  00000000  00000000  00039bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c26  00000000  00000000  0004e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000decd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a9c  00000000  00000000  000ded24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069b0 	.word	0x080069b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080069b0 	.word	0x080069b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	int i=0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000bac:	e002      	b.n	8000bb4 <bufsize+0x14>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f6      	bne.n	8000bae <bufsize+0xe>
	return i;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <clear_buffer>:

void clear_buffer (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	e007      	b.n	8000bec <clear_buffer+0x1c>
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <clear_buffer+0x30>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3301      	adds	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf0:	ddf4      	ble.n	8000bdc <clear_buffer+0xc>
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20000648 	.word	0x20000648

08000c04 <send_uart>:

void send_uart (char *string)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fae7 	bl	80001e0 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <send_uart+0x2c>)
 8000c22:	f001 ffae 	bl	8002b82 <HAL_UART_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000188 	.word	0x20000188

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fccc 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f980 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 fae8 	bl	8001214 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c44:	f000 f9e6 	bl	8001014 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c48:	f000 faba 	bl	80011c0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c4c:	f002 fb0e 	bl	800326c <MX_FATFS_Init>
  MX_TIM1_Init();
 8000c50:	f000 fa16 	bl	8001080 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c54:	f000 fa66 	bl	8001124 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (500);
 8000c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5c:	f000 fd2c 	bl	80016b8 <HAL_Delay>

   fresult = f_mount(&fs, "/", 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	4999      	ldr	r1, [pc, #612]	; (8000ec8 <main+0x294>)
 8000c64:	4899      	ldr	r0, [pc, #612]	; (8000ecc <main+0x298>)
 8000c66:	f004 f8b1 	bl	8004dcc <f_mount>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b98      	ldr	r3, [pc, #608]	; (8000ed0 <main+0x29c>)
 8000c70:	701a      	strb	r2, [r3, #0]
   	if (fresult != FR_OK)
 8000c72:	4b97      	ldr	r3, [pc, #604]	; (8000ed0 <main+0x29c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <main+0x4e>
   		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000c7a:	4896      	ldr	r0, [pc, #600]	; (8000ed4 <main+0x2a0>)
 8000c7c:	f7ff ffc2 	bl	8000c04 <send_uart>
 8000c80:	e002      	b.n	8000c88 <main+0x54>
   	else
   		send_uart("SD CARD mounted successfully...\n\n");
 8000c82:	4895      	ldr	r0, [pc, #596]	; (8000ed8 <main+0x2a4>)
 8000c84:	f7ff ffbe 	bl	8000c04 <send_uart>


   	/*************** Card capacity details ********************/

   	  	/* Check free space */
   	  	f_getfree("", &fre_clust, &pfs);
 8000c88:	4a94      	ldr	r2, [pc, #592]	; (8000edc <main+0x2a8>)
 8000c8a:	4995      	ldr	r1, [pc, #596]	; (8000ee0 <main+0x2ac>)
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <main+0x2b0>)
 8000c8e:	f005 f806 	bl	8005c9e <f_getfree>

   	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000c92:	4b92      	ldr	r3, [pc, #584]	; (8000edc <main+0x2a8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	3b02      	subs	r3, #2
 8000c9a:	4a90      	ldr	r2, [pc, #576]	; (8000edc <main+0x2a8>)
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	8952      	ldrh	r2, [r2, #10]
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd5f 	bl	8000768 <__aeabi_ui2d>
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	4b8e      	ldr	r3, [pc, #568]	; (8000ee8 <main+0x2b4>)
 8000cb0:	f7ff faee 	bl	8000290 <__aeabi_dmul>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff fdce 	bl	800085c <__aeabi_d2uiz>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a8a      	ldr	r2, [pc, #552]	; (8000eec <main+0x2b8>)
 8000cc4:	6013      	str	r3, [r2, #0]
   	  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8000cc6:	4b89      	ldr	r3, [pc, #548]	; (8000eec <main+0x2b8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4988      	ldr	r1, [pc, #544]	; (8000ef0 <main+0x2bc>)
 8000cce:	4889      	ldr	r0, [pc, #548]	; (8000ef4 <main+0x2c0>)
 8000cd0:	f005 fa0e 	bl	80060f0 <siprintf>
   	  	send_uart(buffer);
 8000cd4:	4887      	ldr	r0, [pc, #540]	; (8000ef4 <main+0x2c0>)
 8000cd6:	f7ff ff95 	bl	8000c04 <send_uart>
   	  	clear_buffer();
 8000cda:	f7ff ff79 	bl	8000bd0 <clear_buffer>
   	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000cde:	4b7f      	ldr	r3, [pc, #508]	; (8000edc <main+0x2a8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	895b      	ldrh	r3, [r3, #10]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <main+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd3a 	bl	8000768 <__aeabi_ui2d>
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <main+0x2b4>)
 8000cfa:	f7ff fac9 	bl	8000290 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fda9 	bl	800085c <__aeabi_d2uiz>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a7a      	ldr	r2, [pc, #488]	; (8000ef8 <main+0x2c4>)
 8000d0e:	6013      	str	r3, [r2, #0]
   	  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8000d10:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <main+0x2c4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4979      	ldr	r1, [pc, #484]	; (8000efc <main+0x2c8>)
 8000d18:	4876      	ldr	r0, [pc, #472]	; (8000ef4 <main+0x2c0>)
 8000d1a:	f005 f9e9 	bl	80060f0 <siprintf>
   	  	send_uart(buffer);
 8000d1e:	4875      	ldr	r0, [pc, #468]	; (8000ef4 <main+0x2c0>)
 8000d20:	f7ff ff70 	bl	8000c04 <send_uart>
   	  	clear_buffer();
 8000d24:	f7ff ff54 	bl	8000bd0 <clear_buffer>


   	  	/************* The following operation is using PUTS and GETS *********************/

   	  	/* Open file to write/ create a file if it doesn't exist */
   	      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000d28:	2213      	movs	r2, #19
 8000d2a:	4975      	ldr	r1, [pc, #468]	; (8000f00 <main+0x2cc>)
 8000d2c:	4875      	ldr	r0, [pc, #468]	; (8000f04 <main+0x2d0>)
 8000d2e:	f004 f893 	bl	8004e58 <f_open>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <main+0x29c>)
 8000d38:	701a      	strb	r2, [r3, #0]

   	  	/* Writing text */
   	  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 8000d3a:	4972      	ldr	r1, [pc, #456]	; (8000f04 <main+0x2d0>)
 8000d3c:	4872      	ldr	r0, [pc, #456]	; (8000f08 <main+0x2d4>)
 8000d3e:	f005 f917 	bl	8005f70 <f_puts>

   	  	/* Close file */
   	  	fresult = f_close(&fil);
 8000d42:	4870      	ldr	r0, [pc, #448]	; (8000f04 <main+0x2d0>)
 8000d44:	f004 fd78 	bl	8005838 <f_close>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b60      	ldr	r3, [pc, #384]	; (8000ed0 <main+0x29c>)
 8000d4e:	701a      	strb	r2, [r3, #0]

   	  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8000d50:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <main+0x29c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <main+0x12a>
 8000d58:	486c      	ldr	r0, [pc, #432]	; (8000f0c <main+0x2d8>)
 8000d5a:	f7ff ff53 	bl	8000c04 <send_uart>

   	  	/* Open file to read */
   	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4967      	ldr	r1, [pc, #412]	; (8000f00 <main+0x2cc>)
 8000d62:	4868      	ldr	r0, [pc, #416]	; (8000f04 <main+0x2d0>)
 8000d64:	f004 f878 	bl	8004e58 <f_open>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <main+0x29c>)
 8000d6e:	701a      	strb	r2, [r3, #0]

   	  	/* Read string from the file */
   	  	f_gets(buffer, f_size(&fil), &fil);
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <main+0x2d0>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a63      	ldr	r2, [pc, #396]	; (8000f04 <main+0x2d0>)
 8000d76:	4619      	mov	r1, r3
 8000d78:	485e      	ldr	r0, [pc, #376]	; (8000ef4 <main+0x2c0>)
 8000d7a:	f005 f845 	bl	8005e08 <f_gets>

   	  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8000d7e:	4864      	ldr	r0, [pc, #400]	; (8000f10 <main+0x2dc>)
 8000d80:	f7ff ff40 	bl	8000c04 <send_uart>
   	  	send_uart(buffer);
 8000d84:	485b      	ldr	r0, [pc, #364]	; (8000ef4 <main+0x2c0>)
 8000d86:	f7ff ff3d 	bl	8000c04 <send_uart>
   	  	send_uart("\n\n");
 8000d8a:	4862      	ldr	r0, [pc, #392]	; (8000f14 <main+0x2e0>)
 8000d8c:	f7ff ff3a 	bl	8000c04 <send_uart>

   	  	/* Close file */
   	  	f_close(&fil);
 8000d90:	485c      	ldr	r0, [pc, #368]	; (8000f04 <main+0x2d0>)
 8000d92:	f004 fd51 	bl	8005838 <f_close>

   	  	clear_buffer();
 8000d96:	f7ff ff1b 	bl	8000bd0 <clear_buffer>


   	  	/**************** The following operation is using f_write and f_read **************************/

   	  	/* Create second file with read write access and open it */
   	  	fresult = f_open(&fil, "data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	495e      	ldr	r1, [pc, #376]	; (8000f18 <main+0x2e4>)
 8000d9e:	4859      	ldr	r0, [pc, #356]	; (8000f04 <main+0x2d0>)
 8000da0:	f004 f85a 	bl	8004e58 <f_open>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <main+0x29c>)
 8000daa:	701a      	strb	r2, [r3, #0]

   	  	/* Writing text */
   	  	strcpy (buffer, "This is data.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8000dac:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <main+0x2c0>)
 8000dae:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <main+0x2e8>)
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	2356      	movs	r3, #86	; 0x56
 8000db6:	461a      	mov	r2, r3
 8000db8:	f005 f984 	bl	80060c4 <memcpy>

   	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8000dbc:	484d      	ldr	r0, [pc, #308]	; (8000ef4 <main+0x2c0>)
 8000dbe:	f7ff feef 	bl	8000ba0 <bufsize>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <main+0x2ec>)
 8000dc8:	494a      	ldr	r1, [pc, #296]	; (8000ef4 <main+0x2c0>)
 8000dca:	484e      	ldr	r0, [pc, #312]	; (8000f04 <main+0x2d0>)
 8000dcc:	f004 fb41 	bl	8005452 <f_write>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <main+0x29c>)
 8000dd6:	701a      	strb	r2, [r3, #0]

   	  	send_uart ("data.txt created and data is written\n");
 8000dd8:	4852      	ldr	r0, [pc, #328]	; (8000f24 <main+0x2f0>)
 8000dda:	f7ff ff13 	bl	8000c04 <send_uart>

   	  	/* Close file */
   	  	f_close(&fil);
 8000dde:	4849      	ldr	r0, [pc, #292]	; (8000f04 <main+0x2d0>)
 8000de0:	f004 fd2a 	bl	8005838 <f_close>



   	  	// clearing buffer to show that result obtained is from the file
   	  	clear_buffer();
 8000de4:	f7ff fef4 	bl	8000bd0 <clear_buffer>

   	  	/* Open second file to read */
   	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8000de8:	2201      	movs	r2, #1
 8000dea:	494f      	ldr	r1, [pc, #316]	; (8000f28 <main+0x2f4>)
 8000dec:	4845      	ldr	r0, [pc, #276]	; (8000f04 <main+0x2d0>)
 8000dee:	f004 f833 	bl	8004e58 <f_open>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <main+0x29c>)
 8000df8:	701a      	strb	r2, [r3, #0]
   	  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <main+0x29c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <main+0x1d4>
 8000e02:	484a      	ldr	r0, [pc, #296]	; (8000f2c <main+0x2f8>)
 8000e04:	f7ff fefe 	bl	8000c04 <send_uart>

   	  	/* Read data from the file
   	  	 * Please see the function details for the arguments */
   	  	f_read (&fil, buffer, f_size(&fil), &br);
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <main+0x2d0>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <main+0x2fc>)
 8000e0e:	4939      	ldr	r1, [pc, #228]	; (8000ef4 <main+0x2c0>)
 8000e10:	483c      	ldr	r0, [pc, #240]	; (8000f04 <main+0x2d0>)
 8000e12:	f004 f9df 	bl	80051d4 <f_read>
   	  	send_uart(buffer);
 8000e16:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <main+0x2c0>)
 8000e18:	f7ff fef4 	bl	8000c04 <send_uart>
   	  	send_uart("\n\n");
 8000e1c:	483d      	ldr	r0, [pc, #244]	; (8000f14 <main+0x2e0>)
 8000e1e:	f7ff fef1 	bl	8000c04 <send_uart>

   	  	/* Close file */
   	  	f_close(&fil);
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <main+0x2d0>)
 8000e24:	f004 fd08 	bl	8005838 <f_close>

   	  	clear_buffer();
 8000e28:	f7ff fed2 	bl	8000bd0 <clear_buffer>


   	  	/*********************UPDATING an existing file ***************************/

   	  	/* Open the file with write access */
   	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	493e      	ldr	r1, [pc, #248]	; (8000f28 <main+0x2f4>)
 8000e30:	4834      	ldr	r0, [pc, #208]	; (8000f04 <main+0x2d0>)
 8000e32:	f004 f811 	bl	8004e58 <f_open>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <main+0x29c>)
 8000e3c:	701a      	strb	r2, [r3, #0]

   	  	/* Move to offset to the end of the file */
   	  	fresult = f_lseek(&fil, f_size(&fil));
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <main+0x2d0>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	4619      	mov	r1, r3
 8000e44:	482f      	ldr	r0, [pc, #188]	; (8000f04 <main+0x2d0>)
 8000e46:	f004 fd21 	bl	800588c <f_lseek>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <main+0x29c>)
 8000e50:	701a      	strb	r2, [r3, #0]

   	  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <main+0x29c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <main+0x22c>
 8000e5a:	4836      	ldr	r0, [pc, #216]	; (8000f34 <main+0x300>)
 8000e5c:	f7ff fed2 	bl	8000c04 <send_uart>

   	  	/* write the string to the file */
   	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8000e60:	4928      	ldr	r1, [pc, #160]	; (8000f04 <main+0x2d0>)
 8000e62:	4835      	ldr	r0, [pc, #212]	; (8000f38 <main+0x304>)
 8000e64:	f005 f884 	bl	8005f70 <f_puts>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <main+0x29c>)
 8000e6e:	701a      	strb	r2, [r3, #0]

   	  	f_close (&fil);
 8000e70:	4824      	ldr	r0, [pc, #144]	; (8000f04 <main+0x2d0>)
 8000e72:	f004 fce1 	bl	8005838 <f_close>

   	  	clear_buffer();
 8000e76:	f7ff feab 	bl	8000bd0 <clear_buffer>

   	  	/* Open to read the file */
   	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	492a      	ldr	r1, [pc, #168]	; (8000f28 <main+0x2f4>)
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <main+0x2d0>)
 8000e80:	f003 ffea 	bl	8004e58 <f_open>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <main+0x29c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

   	  	/* Read string from the file */
   	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <main+0x2d0>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <main+0x2fc>)
 8000e92:	4918      	ldr	r1, [pc, #96]	; (8000ef4 <main+0x2c0>)
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <main+0x2d0>)
 8000e96:	f004 f99d 	bl	80051d4 <f_read>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <main+0x29c>)
 8000ea0:	701a      	strb	r2, [r3, #0]
   	  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <main+0x29c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <main+0x27c>
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <main+0x308>)
 8000eac:	f7ff feaa 	bl	8000c04 <send_uart>
   	  	send_uart(buffer);
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <main+0x2c0>)
 8000eb2:	f7ff fea7 	bl	8000c04 <send_uart>
   	  	send_uart("\n\n");
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <main+0x2e0>)
 8000eb8:	f7ff fea4 	bl	8000c04 <send_uart>

   	  	/* Close file */
   	  	f_close(&fil);
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <main+0x2d0>)
 8000ebe:	f004 fcbb 	bl	8005838 <f_close>

   	  	clear_buffer();
 8000ec2:	f7ff fe85 	bl	8000bd0 <clear_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <main+0x292>
 8000ec8:	080069c8 	.word	0x080069c8
 8000ecc:	200001cc 	.word	0x200001cc
 8000ed0:	2000062c 	.word	0x2000062c
 8000ed4:	080069cc 	.word	0x080069cc
 8000ed8:	080069f0 	.word	0x080069f0
 8000edc:	20000638 	.word	0x20000638
 8000ee0:	2000063c 	.word	0x2000063c
 8000ee4:	08006a14 	.word	0x08006a14
 8000ee8:	3fe00000 	.word	0x3fe00000
 8000eec:	20000640 	.word	0x20000640
 8000ef0:	08006a18 	.word	0x08006a18
 8000ef4:	20000648 	.word	0x20000648
 8000ef8:	20000644 	.word	0x20000644
 8000efc:	08006a34 	.word	0x08006a34
 8000f00:	08006a50 	.word	0x08006a50
 8000f04:	200003fc 	.word	0x200003fc
 8000f08:	08006a5c 	.word	0x08006a5c
 8000f0c:	08006aa4 	.word	0x08006aa4
 8000f10:	08006ad0 	.word	0x08006ad0
 8000f14:	08006b10 	.word	0x08006b10
 8000f18:	08006b14 	.word	0x08006b14
 8000f1c:	08006b20 	.word	0x08006b20
 8000f20:	20000634 	.word	0x20000634
 8000f24:	08006b78 	.word	0x08006b78
 8000f28:	08006ba0 	.word	0x08006ba0
 8000f2c:	08006bac 	.word	0x08006bac
 8000f30:	20000630 	.word	0x20000630
 8000f34:	08006bdc 	.word	0x08006bdc
 8000f38:	08006bfc 	.word	0x08006bfc
 8000f3c:	08006c30 	.word	0x08006c30

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 f8c6 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fb8:	2354      	movs	r3, #84	; 0x54
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fe1d 	bl	8001c08 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd4:	f000 f96e 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 f87f 	bl	80020f8 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001000:	f000 f958 	bl	80012b4 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_SPI1_Init+0x64>)
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <MX_SPI1_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_SPI1_Init+0x64>)
 8001048:	2220      	movs	r2, #32
 800104a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_SPI1_Init+0x64>)
 8001060:	220a      	movs	r2, #10
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_SPI1_Init+0x64>)
 8001066:	f001 fa27 	bl	80024b8 <HAL_SPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001070:	f000 f920 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000a0 	.word	0x200000a0
 800107c:	40013000 	.word	0x40013000

08001080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_TIM1_Init+0x9c>)
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <MX_TIM1_Init+0xa0>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_TIM1_Init+0x9c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_TIM1_Init+0x9c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_TIM1_Init+0x9c>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_TIM1_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_TIM1_Init+0x9c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_TIM1_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <MX_TIM1_Init+0x9c>)
 80010cc:	f001 fa7d 	bl	80025ca <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010d6:	f000 f8ed 	bl	80012b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010de:	2310      	movs	r3, #16
 80010e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_TIM1_Init+0x9c>)
 80010ea:	f001 fabd 	bl	8002668 <HAL_TIM_SlaveConfigSynchro>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010f4:	f000 f8de 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_TIM1_Init+0x9c>)
 8001106:	f001 fc81 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001110:	f000 f8d0 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000f8 	.word	0x200000f8
 8001120:	40010000 	.word	0x40010000

08001124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_TIM2_Init+0x98>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM2_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_TIM2_Init+0x98>)
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_TIM2_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_TIM2_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_TIM2_Init+0x98>)
 800116c:	f001 fa2d 	bl	80025ca <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001176:	f000 f89d 	bl	80012b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_TIM2_Init+0x98>)
 800118a:	f001 fa6d 	bl	8002668 <HAL_TIM_SlaveConfigSynchro>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001194:	f000 f88e 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM2_Init+0x98>)
 80011a6:	f001 fc31 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011b0:	f000 f880 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000140 	.word	0x20000140

080011c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f001 fc76 	bl	8002ae8 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f857 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000188 	.word	0x20000188
 8001210:	40011000 	.word	0x40011000

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_GPIO_Init+0x98>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_GPIO_Init+0x98>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_GPIO_Init+0x98>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_GPIO_Init+0x98>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_GPIO_Init+0x98>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_GPIO_Init+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <MX_GPIO_Init+0x98>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_GPIO_Init+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2101      	movs	r1, #1
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_GPIO_Init+0x9c>)
 8001284:	f000 fca6 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001288:	2301      	movs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_GPIO_Init+0x9c>)
 80012a0:	f000 fb14 	bl	80018cc <HAL_GPIO_Init>

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020400 	.word	0x40020400

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x88>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800136a:	23e0      	movs	r3, #224	; 0xe0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137a:	2305      	movs	r3, #5
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_SPI_MspInit+0x8c>)
 8001386:	f000 faa1 	bl	80018cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40013000 	.word	0x40013000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a15      	ldr	r2, [pc, #84]	; (8001404 <HAL_TIM_Base_MspInit+0x64>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10e      	bne.n	80013d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ce:	e012      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d10d      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_TIM_Base_MspInit+0x68>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40010000 	.word	0x40010000
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x84>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12c      	bne.n	8001488 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_UART_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001478:	2307      	movs	r3, #7
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001484:	f000 fa22 	bl	80018cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40011000 	.word	0x40011000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f8c6 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f004 fda6 	bl	8006070 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20010000 	.word	0x20010000
 8001550:	00000400 	.word	0x00000400
 8001554:	200006c8 	.word	0x200006c8
 8001558:	20000720 	.word	0x20000720

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ffd7 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f004 fd65 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff fb3f 	bl	8000c34 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80015c4:	08006d7c 	.word	0x08006d7c
  ldr r2, =_sbss
 80015c8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80015cc:	2000071c 	.word	0x2000071c

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f931 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fe5a 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f93b 	bl	80018b2 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f911 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	200006cc 	.word	0x200006cc

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200006cc 	.word	0x200006cc

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff47 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff5c 	bl	8001748 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffb0 	bl	8001820 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e159      	b.n	8001b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8148 	bne.w	8001b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d005      	beq.n	800191e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191a:	2b02      	cmp	r3, #2
 800191c:	d130      	bne.n	8001980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b03      	cmp	r3, #3
 800198a:	d017      	beq.n	80019bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d123      	bne.n	8001a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	08da      	lsrs	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3208      	adds	r2, #8
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a2 	beq.w	8001b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_GPIO_Init+0x2e8>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_GPIO_Init+0x2e8>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6e:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x2ec>)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x202>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <HAL_GPIO_Init+0x2f4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x1fe>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a47      	ldr	r2, [pc, #284]	; (8001bc4 <HAL_GPIO_Init+0x2f8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x1fa>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a46      	ldr	r2, [pc, #280]	; (8001bc8 <HAL_GPIO_Init+0x2fc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x1f6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <HAL_GPIO_Init+0x300>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x1f2>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x204>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x204>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x204>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x204>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x204>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae0:	4935      	ldr	r1, [pc, #212]	; (8001bb8 <HAL_GPIO_Init+0x2ec>)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b66:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b90:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	f67f aea2 	bls.w	80018e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e267      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d00c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e242      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b69      	ldr	r3, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a68      	ldr	r2, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcee 	bl	80016a0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcea 	bl	80016a0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e207      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fcda 	bl	80016a0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fcd6 	bl	80016a0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1f3      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c7      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4937      	ldr	r1, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fc8f 	bl	80016a0 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff fc8b 	bl	80016a0 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a8      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4925      	ldr	r1, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x244>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc6e 	bl	80016a0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc6a 	bl	80016a0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e187      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc4e 	bl	80016a0 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc4a 	bl	80016a0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e167      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x248>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fc37 	bl	80016a0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff fc33 	bl	80016a0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e150      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ea      	bne.n	8001e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8097 	beq.w	8001f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a7c      	ldr	r2, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b77      	ldr	r3, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b74      	ldr	r3, [pc, #464]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a73      	ldr	r2, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbf3 	bl	80016a0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fbef 	bl	80016a0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e10c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x474>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2ea>
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x30c>
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0x324>
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff fbb4 	bl	80016a0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fbb0 	bl	80016a0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0cb      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ee      	beq.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fb9e 	bl	80016a0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7ff fb9a 	bl	80016a0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b5      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a38      	ldr	r2, [pc, #224]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a1 	beq.w	80020e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d05c      	beq.n	800206c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d141      	bne.n	800203e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fb6e 	bl	80016a0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fb6a 	bl	80016a0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e087      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb43 	bl	80016a0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fb3f 	bl	80016a0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e05c      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x416>
 800203c:	e054      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fb2c 	bl	80016a0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fb28 	bl	80016a0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e045      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x470>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e038      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d121      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0cc      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d90c      	bls.n	8002134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d044      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7ff fa5a 	bl	80016a0 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7ff fa56 	bl	80016a0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f9ba 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08006ca0 	.word	0x08006ca0
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b090      	sub	sp, #64	; 0x40
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80a1 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e09b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022fc:	e09b      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002302:	e098      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	627a      	str	r2, [r7, #36]	; 0x24
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800232c:	2100      	movs	r1, #0
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002330:	fb03 f201 	mul.w	r2, r3, r1
 8002334:	2300      	movs	r3, #0
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	4413      	add	r3, r2
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 800233e:	fba0 1202 	umull	r1, r2, r0, r2
 8002342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002344:	460a      	mov	r2, r1
 8002346:	62ba      	str	r2, [r7, #40]	; 0x28
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	4413      	add	r3, r2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	2200      	movs	r2, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	61fa      	str	r2, [r7, #28]
 8002356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800235e:	f7fe fa9d 	bl	800089c <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4613      	mov	r3, r2
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236a:	e053      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800237e:	f04f 0b00 	mov.w	fp, #0
 8002382:	4652      	mov	r2, sl
 8002384:	465b      	mov	r3, fp
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ebb2 080a 	subs.w	r8, r2, sl
 800239e:	eb63 090b 	sbc.w	r9, r3, fp
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023b6:	ebb2 0408 	subs.w	r4, r2, r8
 80023ba:	eb63 0509 	sbc.w	r5, r3, r9
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	00eb      	lsls	r3, r5, #3
 80023c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023cc:	00e2      	lsls	r2, r4, #3
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
 80023d2:	eb14 030a 	adds.w	r3, r4, sl
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	eb45 030b 	adc.w	r3, r5, fp
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ea:	4629      	mov	r1, r5
 80023ec:	028b      	lsls	r3, r1, #10
 80023ee:	4621      	mov	r1, r4
 80023f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f4:	4621      	mov	r1, r4
 80023f6:	028a      	lsls	r2, r1, #10
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	2200      	movs	r2, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	f7fe fa48 	bl	800089c <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002438:	4618      	mov	r0, r3
 800243a:	3740      	adds	r7, #64	; 0x40
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	017d7840 	.word	0x017d7840

08002450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a9b      	lsrs	r3, r3, #10
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08006cb0 	.word	0x08006cb0

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002494:	f7ff ffdc 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08006cb0 	.word	0x08006cb0

080024b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07b      	b.n	80025c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024da:	d009      	beq.n	80024f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe ff00 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	ea42 0103 	orr.w	r1, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0104 	and.w	r1, r3, #4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0210 	and.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e041      	b.n	8002660 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe fed5 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f000 f86f 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_TIM_SlaveConfigSynchro+0x18>
 800267c:	2302      	movs	r3, #2
 800267e:	e031      	b.n	80026e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8aa 	bl	80027ec <TIM_SlaveTimer_SetConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e018      	b.n	80026e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00f      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01b      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d017      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <TIM_Base_SetConfig+0xf4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <TIM_Base_SetConfig+0xf8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <TIM_Base_SetConfig+0xfc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	615a      	str	r2, [r3, #20]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800

080027ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 0307 	bic.w	r3, r3, #7
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b70      	cmp	r3, #112	; 0x70
 8002834:	d01a      	beq.n	800286c <TIM_SlaveTimer_SetConfig+0x80>
 8002836:	2b70      	cmp	r3, #112	; 0x70
 8002838:	d860      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 800283a:	2b60      	cmp	r3, #96	; 0x60
 800283c:	d054      	beq.n	80028e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800283e:	2b60      	cmp	r3, #96	; 0x60
 8002840:	d85c      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 8002842:	2b50      	cmp	r3, #80	; 0x50
 8002844:	d046      	beq.n	80028d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8002846:	2b50      	cmp	r3, #80	; 0x50
 8002848:	d858      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d019      	beq.n	8002882 <TIM_SlaveTimer_SetConfig+0x96>
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d854      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 8002852:	2b30      	cmp	r3, #48	; 0x30
 8002854:	d055      	beq.n	8002902 <TIM_SlaveTimer_SetConfig+0x116>
 8002856:	2b30      	cmp	r3, #48	; 0x30
 8002858:	d850      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 800285a:	2b20      	cmp	r3, #32
 800285c:	d051      	beq.n	8002902 <TIM_SlaveTimer_SetConfig+0x116>
 800285e:	2b20      	cmp	r3, #32
 8002860:	d84c      	bhi.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d04d      	beq.n	8002902 <TIM_SlaveTimer_SetConfig+0x116>
 8002866:	2b10      	cmp	r3, #16
 8002868:	d04b      	beq.n	8002902 <TIM_SlaveTimer_SetConfig+0x116>
 800286a:	e047      	b.n	80028fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68d9      	ldr	r1, [r3, #12]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f000 f8a6 	bl	80029cc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002880:	e040      	b.n	8002904 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d101      	bne.n	800288e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e03b      	b.n	8002906 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
      break;
 80028d2:	e017      	b.n	8002904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f000 f814 	bl	800290e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80028e6:	e00d      	b.n	8002904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f000 f839 	bl	800296c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80028fa:	e003      	b.n	8002904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002900:	e000      	b.n	8002904 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002902:	bf00      	nop
  }

  return status;
 8002904:	7dfb      	ldrb	r3, [r7, #23]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800290e:	b480      	push	{r7}
 8002910:	b087      	sub	sp, #28
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 0201 	bic.w	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 030a 	bic.w	r3, r3, #10
 800294a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 0210 	bic.w	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	021a      	lsls	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e050      	b.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d018      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d013      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10c      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40014000 	.word	0x40014000

08002ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e03f      	b.n	8002b7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fc7c 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f929 	bl	8002d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d17c      	bne.n	8002c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_UART_Transmit+0x2c>
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e075      	b.n	8002c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_UART_Transmit+0x3e>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e06e      	b.n	8002c9e <HAL_UART_Transmit+0x11c>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	; 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe fd63 	bl	80016a0 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf0:	d108      	bne.n	8002c04 <HAL_UART_Transmit+0x82>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e003      	b.n	8002c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c14:	e02a      	b.n	8002c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f840 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e036      	b.n	8002c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e007      	b.n	8002c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1cf      	bne.n	8002c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f810 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e006      	b.n	8002c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b090      	sub	sp, #64	; 0x40
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	e050      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d04c      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cc6:	f7fe fceb 	bl	80016a0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d241      	bcs.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf6:	637a      	str	r2, [r7, #52]	; 0x34
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e5      	bne.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d2a:	623a      	str	r2, [r7, #32]
 8002d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	69f9      	ldr	r1, [r7, #28]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e5      	bne.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e00f      	b.n	8002d7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d09f      	beq.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3740      	adds	r7, #64	; 0x40
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b0c0      	sub	sp, #256	; 0x100
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	68d9      	ldr	r1, [r3, #12]
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	ea40 0301 	orr.w	r3, r0, r1
 8002dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dea:	430b      	orrs	r3, r1
 8002dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	6999      	ldr	r1, [r3, #24]
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	ea40 0301 	orr.w	r3, r0, r1
 8002e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <UART_SetConfig+0x2cc>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d005      	beq.n	8002e24 <UART_SetConfig+0xa0>
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b8d      	ldr	r3, [pc, #564]	; (8003054 <UART_SetConfig+0x2d0>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d104      	bne.n	8002e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7ff fb34 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8002e28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e2c:	e003      	b.n	8002e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7ff fb1b 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8002e32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e40:	f040 810c 	bne.w	800305c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e66:	4621      	mov	r1, r4
 8002e68:	eb12 0801 	adds.w	r8, r2, r1
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb43 0901 	adc.w	r9, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb18 0303 	adds.w	r3, r8, r3
 8002e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e94:	462b      	mov	r3, r5
 8002e96:	eb49 0303 	adc.w	r3, r9, r3
 8002e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	18db      	adds	r3, r3, r3
 8002eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb8:	4613      	mov	r3, r2
 8002eba:	eb42 0303 	adc.w	r3, r2, r3
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8002ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ec8:	f7fd fce8 	bl	800089c <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4b61      	ldr	r3, [pc, #388]	; (8003058 <UART_SetConfig+0x2d4>)
 8002ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	011c      	lsls	r4, r3, #4
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	1891      	adds	r1, r2, r2
 8002ef2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ef4:	415b      	adcs	r3, r3
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002efc:	4641      	mov	r1, r8
 8002efe:	eb12 0a01 	adds.w	sl, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0b01 	adc.w	fp, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	469b      	mov	fp, r3
 8002f20:	4643      	mov	r3, r8
 8002f22:	eb1a 0303 	adds.w	r3, sl, r3
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	18db      	adds	r3, r3, r3
 8002f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4e:	4613      	mov	r3, r2
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
 8002f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f5e:	f7fd fc9d 	bl	800089c <__aeabi_uldivmod>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <UART_SetConfig+0x2d4>)
 8002f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2264      	movs	r2, #100	; 0x64
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	1acb      	subs	r3, r1, r3
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <UART_SetConfig+0x2d4>)
 8002f80:	fba3 2302 	umull	r2, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f8c:	441c      	add	r4, r3
 8002f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	1891      	adds	r1, r2, r2
 8002fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fa8:	415b      	adcs	r3, r3
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	1851      	adds	r1, r2, r1
 8002fb4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	414b      	adcs	r3, r1
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fc8:	4659      	mov	r1, fp
 8002fca:	00cb      	lsls	r3, r1, #3
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	00ca      	lsls	r2, r1, #3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4642      	mov	r2, r8
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800301a:	f7fd fc3f 	bl	800089c <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <UART_SetConfig+0x2d4>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	; 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3332      	adds	r3, #50	; 0x32
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <UART_SetConfig+0x2d4>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800304c:	e105      	b.n	800325a <UART_SetConfig+0x4d6>
 800304e:	bf00      	nop
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003066:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800306a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800306e:	4642      	mov	r2, r8
 8003070:	464b      	mov	r3, r9
 8003072:	1891      	adds	r1, r2, r2
 8003074:	6239      	str	r1, [r7, #32]
 8003076:	415b      	adcs	r3, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800307e:	4641      	mov	r1, r8
 8003080:	1854      	adds	r4, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0501 	adc.w	r5, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	00eb      	lsls	r3, r5, #3
 8003092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003096:	00e2      	lsls	r2, r4, #3
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4643      	mov	r3, r8
 800309e:	18e3      	adds	r3, r4, r3
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a4:	464b      	mov	r3, r9
 80030a6:	eb45 0303 	adc.w	r3, r5, r3
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ca:	4629      	mov	r1, r5
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4621      	mov	r1, r4
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030dc:	f7fd fbde 	bl	800089c <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <UART_SetConfig+0x4e4>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011c      	lsls	r4, r3, #4
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	61b9      	str	r1, [r7, #24]
 8003108:	415b      	adcs	r3, r3
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6139      	str	r1, [r7, #16]
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	67bb      	str	r3, [r7, #120]	; 0x78
 800315a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003168:	4649      	mov	r1, r9
 800316a:	008b      	lsls	r3, r1, #2
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003172:	4641      	mov	r1, r8
 8003174:	008a      	lsls	r2, r1, #2
 8003176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800317a:	f7fd fb8f 	bl	800089c <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <UART_SetConfig+0x4e4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <UART_SetConfig+0x4e4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a2:	441c      	add	r4, r3
 80031a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a8:	2200      	movs	r2, #0
 80031aa:	673b      	str	r3, [r7, #112]	; 0x70
 80031ac:	677a      	str	r2, [r7, #116]	; 0x74
 80031ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031b2:	4642      	mov	r2, r8
 80031b4:	464b      	mov	r3, r9
 80031b6:	1891      	adds	r1, r2, r2
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	415b      	adcs	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c2:	4641      	mov	r1, r8
 80031c4:	1851      	adds	r1, r2, r1
 80031c6:	6039      	str	r1, [r7, #0]
 80031c8:	4649      	mov	r1, r9
 80031ca:	414b      	adcs	r3, r1
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031da:	4659      	mov	r1, fp
 80031dc:	00cb      	lsls	r3, r1, #3
 80031de:	4651      	mov	r1, sl
 80031e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e4:	4651      	mov	r1, sl
 80031e6:	00ca      	lsls	r2, r1, #3
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	4603      	mov	r3, r0
 80031ee:	4642      	mov	r2, r8
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f4:	464b      	mov	r3, r9
 80031f6:	460a      	mov	r2, r1
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	663b      	str	r3, [r7, #96]	; 0x60
 8003208:	667a      	str	r2, [r7, #100]	; 0x64
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003216:	4649      	mov	r1, r9
 8003218:	008b      	lsls	r3, r1, #2
 800321a:	4641      	mov	r1, r8
 800321c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003220:	4641      	mov	r1, r8
 8003222:	008a      	lsls	r2, r1, #2
 8003224:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003228:	f7fd fb38 	bl	800089c <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <UART_SetConfig+0x4e4>)
 8003232:	fba3 1302 	umull	r1, r3, r3, r2
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2164      	movs	r1, #100	; 0x64
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	3332      	adds	r3, #50	; 0x32
 8003244:	4a08      	ldr	r2, [pc, #32]	; (8003268 <UART_SetConfig+0x4e4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4422      	add	r2, r4
 8003258:	609a      	str	r2, [r3, #8]
}
 800325a:	bf00      	nop
 800325c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003270:	4904      	ldr	r1, [pc, #16]	; (8003284 <MX_FATFS_Init+0x18>)
 8003272:	4805      	ldr	r0, [pc, #20]	; (8003288 <MX_FATFS_Init+0x1c>)
 8003274:	f002 feec 	bl	8006050 <FATFS_LinkDriver>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <MX_FATFS_Init+0x20>)
 800327e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200006d4 	.word	0x200006d4
 8003288:	2000000c 	.word	0x2000000c
 800328c:	200006d0 	.word	0x200006d0

08003290 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003294:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <USER_initialize+0x24>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <USER_initialize+0x24>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000009 	.word	0x20000009

080032c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <USER_status+0x24>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <USER_status+0x24>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000009 	.word	0x20000009

080032f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003300:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800331e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	603a      	str	r2, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
 8003338:	460b      	mov	r3, r1
 800333a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
    return res;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <disk_status+0x30>)
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	4905      	ldr	r1, [pc, #20]	; (8003380 <disk_status+0x30>)
 800336a:	440a      	add	r2, r1
 800336c:	7a12      	ldrb	r2, [r2, #8]
 800336e:	4610      	mov	r0, r2
 8003370:	4798      	blx	r3
 8003372:	4603      	mov	r3, r0
 8003374:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000700 	.word	0x20000700

08003384 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <disk_initialize+0x48>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <disk_initialize+0x48>)
 80033a0:	2101      	movs	r1, #1
 80033a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <disk_initialize+0x48>)
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	79fa      	ldrb	r2, [r7, #7]
 80033b2:	4906      	ldr	r1, [pc, #24]	; (80033cc <disk_initialize+0x48>)
 80033b4:	440a      	add	r2, r1
 80033b6:	7a12      	ldrb	r2, [r2, #8]
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
 80033bc:	4603      	mov	r3, r0
 80033be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000700 	.word	0x20000700

080033d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <disk_read+0x3c>)
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	689c      	ldr	r4, [r3, #8]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <disk_read+0x3c>)
 80033f0:	4413      	add	r3, r2
 80033f2:	7a18      	ldrb	r0, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	47a0      	blx	r4
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	20000700 	.word	0x20000700

08003410 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <disk_write+0x3c>)
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68dc      	ldr	r4, [r3, #12]
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <disk_write+0x3c>)
 8003430:	4413      	add	r3, r2
 8003432:	7a18      	ldrb	r0, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	47a0      	blx	r4
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
}
 8003442:	4618      	mov	r0, r3
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	bf00      	nop
 800344c:	20000700 	.word	0x20000700

08003450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <disk_ioctl+0x38>)
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	79fa      	ldrb	r2, [r7, #7]
 800346e:	4906      	ldr	r1, [pc, #24]	; (8003488 <disk_ioctl+0x38>)
 8003470:	440a      	add	r2, r1
 8003472:	7a10      	ldrb	r0, [r2, #8]
 8003474:	79b9      	ldrb	r1, [r7, #6]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4798      	blx	r3
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
  return res;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000700 	.word	0x20000700

0800348c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800349c:	89fb      	ldrh	r3, [r7, #14]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034ae:	89fb      	ldrh	r3, [r7, #14]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3303      	adds	r3, #3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	3202      	adds	r2, #2
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	3201      	adds	r2, #1
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	887a      	ldrh	r2, [r7, #2]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	1c53      	adds	r3, r2, #1
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6179      	str	r1, [r7, #20]
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3b01      	subs	r3, #1
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f1      	bne.n	80035aa <mem_cpy+0x1a>
	}
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035d2:	b480      	push	{r7}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	617a      	str	r2, [r7, #20]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f3      	bne.n	80035e2 <mem_set+0x10>
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	61fa      	str	r2, [r7, #28]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	61ba      	str	r2, [r7, #24]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	1acb      	subs	r3, r1, r3
 8003634:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3b01      	subs	r3, #1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <mem_cmp+0x40>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0eb      	beq.n	8003620 <mem_cmp+0x18>

	return r;
 8003648:	697b      	ldr	r3, [r7, #20]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003660:	e002      	b.n	8003668 <chk_chr+0x12>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3301      	adds	r3, #1
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <chk_chr+0x26>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4293      	cmp	r3, r2
 800367a:	d1f2      	bne.n	8003662 <chk_chr+0xc>
	return *str;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e029      	b.n	80036f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <chk_lock+0xb4>)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <chk_lock+0xb4>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d116      	bne.n	80036ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036c0:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <chk_lock+0xb4>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d10c      	bne.n	80036ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036d4:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <chk_lock+0xb4>)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4413      	add	r3, r2
 80036dc:	3308      	adds	r3, #8
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d102      	bne.n	80036ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036e8:	e007      	b.n	80036fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d9d2      	bls.n	80036a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d109      	bne.n	8003714 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <chk_lock+0x80>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d101      	bne.n	8003710 <chk_lock+0x84>
 800370c:	2300      	movs	r3, #0
 800370e:	e010      	b.n	8003732 <chk_lock+0xa6>
 8003710:	2312      	movs	r3, #18
 8003712:	e00e      	b.n	8003732 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <chk_lock+0xa0>
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <chk_lock+0xb4>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4413      	add	r3, r2
 8003722:	330c      	adds	r3, #12
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d101      	bne.n	8003730 <chk_lock+0xa4>
 800372c:	2310      	movs	r3, #16
 800372e:	e000      	b.n	8003732 <chk_lock+0xa6>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200006e0 	.word	0x200006e0

08003744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	e002      	b.n	8003756 <enq_lock+0x12>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d806      	bhi.n	800376a <enq_lock+0x26>
 800375c:	4a09      	ldr	r2, [pc, #36]	; (8003784 <enq_lock+0x40>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f2      	bne.n	8003750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b02      	cmp	r3, #2
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200006e0 	.word	0x200006e0

08003788 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e01f      	b.n	80037d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003798:	4a41      	ldr	r2, [pc, #260]	; (80038a0 <inc_lock+0x118>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	4413      	add	r3, r2
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d113      	bne.n	80037d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037aa:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <inc_lock+0x118>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d109      	bne.n	80037d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037be:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <inc_lock+0x118>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	3308      	adds	r3, #8
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d006      	beq.n	80037e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3301      	adds	r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d9dc      	bls.n	8003798 <inc_lock+0x10>
 80037de:	e000      	b.n	80037e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80037e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d132      	bne.n	800384e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e002      	b.n	80037f4 <inc_lock+0x6c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d806      	bhi.n	8003808 <inc_lock+0x80>
 80037fa:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <inc_lock+0x118>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f2      	bne.n	80037ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d101      	bne.n	8003812 <inc_lock+0x8a>
 800380e:	2300      	movs	r3, #0
 8003810:	e040      	b.n	8003894 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4922      	ldr	r1, [pc, #136]	; (80038a0 <inc_lock+0x118>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	440b      	add	r3, r1
 800381e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	491e      	ldr	r1, [pc, #120]	; (80038a0 <inc_lock+0x118>)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	440b      	add	r3, r1
 800382c:	3304      	adds	r3, #4
 800382e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	491a      	ldr	r1, [pc, #104]	; (80038a0 <inc_lock+0x118>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	440b      	add	r3, r1
 800383c:	3308      	adds	r3, #8
 800383e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <inc_lock+0x118>)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	330c      	adds	r3, #12
 800384a:	2200      	movs	r2, #0
 800384c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <inc_lock+0xe0>
 8003854:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <inc_lock+0x118>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	4413      	add	r3, r2
 800385c:	330c      	adds	r3, #12
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <inc_lock+0xe0>
 8003864:	2300      	movs	r3, #0
 8003866:	e015      	b.n	8003894 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d108      	bne.n	8003880 <inc_lock+0xf8>
 800386e:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <inc_lock+0x118>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	4413      	add	r3, r2
 8003876:	330c      	adds	r3, #12
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	e001      	b.n	8003884 <inc_lock+0xfc>
 8003880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <inc_lock+0x118>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	440b      	add	r3, r1
 800388c:	330c      	adds	r3, #12
 800388e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3301      	adds	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	200006e0 	.word	0x200006e0

080038a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d825      	bhi.n	8003904 <dec_lock+0x60>
		n = Files[i].ctr;
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <dec_lock+0x74>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	330c      	adds	r3, #12
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038cc:	d101      	bne.n	80038d2 <dec_lock+0x2e>
 80038ce:	2300      	movs	r3, #0
 80038d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <dec_lock+0x3a>
 80038d8:	89fb      	ldrh	r3, [r7, #14]
 80038da:	3b01      	subs	r3, #1
 80038dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <dec_lock+0x74>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	4413      	add	r3, r2
 80038e6:	330c      	adds	r3, #12
 80038e8:	89fa      	ldrh	r2, [r7, #14]
 80038ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <dec_lock+0x5a>
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <dec_lock+0x74>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	737b      	strb	r3, [r7, #13]
 8003902:	e001      	b.n	8003908 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003904:	2302      	movs	r3, #2
 8003906:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003908:	7b7b      	ldrb	r3, [r7, #13]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	200006e0 	.word	0x200006e0

0800391c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e010      	b.n	800394c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800392a:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <clear_lock+0x44>)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4413      	add	r3, r2
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d105      	bne.n	8003946 <clear_lock+0x2a>
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <clear_lock+0x44>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4413      	add	r3, r2
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d9eb      	bls.n	800392a <clear_lock+0xe>
	}
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	200006e0 	.word	0x200006e0

08003964 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	78db      	ldrb	r3, [r3, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d034      	beq.n	80039e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7858      	ldrb	r0, [r3, #1]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003988:	2301      	movs	r3, #1
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	f7ff fd40 	bl	8003410 <disk_write>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e022      	b.n	80039e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d217      	bcs.n	80039e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e010      	b.n	80039dc <sync_window+0x78>
					wsect += fs->fsize;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4413      	add	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7858      	ldrb	r0, [r3, #1]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039ce:	2301      	movs	r3, #1
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	f7ff fd1d 	bl	8003410 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3b01      	subs	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d8eb      	bhi.n	80039ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d01b      	beq.n	8003a3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ffad 	bl	8003964 <sync_window>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d113      	bne.n	8003a3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7858      	ldrb	r0, [r3, #1]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a1e:	2301      	movs	r3, #1
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	f7ff fcd5 	bl	80033d0 <disk_read>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff87 	bl	8003964 <sync_window>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d158      	bne.n	8003b12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d148      	bne.n	8003afa <sync_fs+0xb2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d144      	bne.n	8003afa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3330      	adds	r3, #48	; 0x30
 8003a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fda9 	bl	80035d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3330      	adds	r3, #48	; 0x30
 8003a84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a88:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fd38 	bl	8003502 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	4921      	ldr	r1, [pc, #132]	; (8003b1c <sync_fs+0xd4>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fd4d 	bl	8003538 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3330      	adds	r3, #48	; 0x30
 8003aa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003aa6:	491e      	ldr	r1, [pc, #120]	; (8003b20 <sync_fs+0xd8>)
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd45 	bl	8003538 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3330      	adds	r3, #48	; 0x30
 8003ab2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7ff fd3b 	bl	8003538 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3330      	adds	r3, #48	; 0x30
 8003ac6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f7ff fd31 	bl	8003538 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7858      	ldrb	r0, [r3, #1]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	2301      	movs	r3, #1
 8003af0:	f7ff fc8e 	bl	8003410 <disk_write>
			fs->fsi_flag = 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	785b      	ldrb	r3, [r3, #1]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fca4 	bl	8003450 <disk_ioctl>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <sync_fs+0xca>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	41615252 	.word	0x41615252
 8003b20:	61417272 	.word	0x61417272

08003b24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3b02      	subs	r3, #2
 8003b32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	3b02      	subs	r3, #2
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d301      	bcc.n	8003b44 <clust2sect+0x20>
 8003b40:	2300      	movs	r3, #0
 8003b42:	e008      	b.n	8003b56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	895b      	ldrh	r3, [r3, #10]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	fb03 f202 	mul.w	r2, r3, r2
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	4413      	add	r3, r2
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d904      	bls.n	8003b82 <get_fat+0x20>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e08f      	b.n	8003ca8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d062      	beq.n	8003c5c <get_fat+0xfa>
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	dc7c      	bgt.n	8003c94 <get_fat+0x132>
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d002      	beq.n	8003ba4 <get_fat+0x42>
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d042      	beq.n	8003c28 <get_fat+0xc6>
 8003ba2:	e077      	b.n	8003c94 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0a5b      	lsrs	r3, r3, #9
 8003bba:	4413      	add	r3, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6938      	ldr	r0, [r7, #16]
 8003bc0:	f7ff ff14 	bl	80039ec <move_window>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d167      	bne.n	8003c9a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	60fa      	str	r2, [r7, #12]
 8003bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0a5b      	lsrs	r3, r3, #9
 8003be6:	4413      	add	r3, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	f7ff fefe 	bl	80039ec <move_window>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d153      	bne.n	8003c9e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <get_fat+0xbc>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	e002      	b.n	8003c24 <get_fat+0xc2>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	617b      	str	r3, [r7, #20]
			break;
 8003c26:	e03f      	b.n	8003ca8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	4413      	add	r3, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6938      	ldr	r0, [r7, #16]
 8003c36:	f7ff fed9 	bl	80039ec <move_window>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d130      	bne.n	8003ca2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c4e:	4413      	add	r3, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fc1b 	bl	800348c <ld_word>
 8003c56:	4603      	mov	r3, r0
 8003c58:	617b      	str	r3, [r7, #20]
			break;
 8003c5a:	e025      	b.n	8003ca8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	09db      	lsrs	r3, r3, #7
 8003c64:	4413      	add	r3, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6938      	ldr	r0, [r7, #16]
 8003c6a:	f7ff febf 	bl	80039ec <move_window>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c82:	4413      	add	r3, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fc19 	bl	80034bc <ld_dword>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c90:	617b      	str	r3, [r7, #20]
			break;
 8003c92:	e009      	b.n	8003ca8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e006      	b.n	8003ca8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c9a:	bf00      	nop
 8003c9c:	e004      	b.n	8003ca8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ca6:	bf00      	nop
		}
	}

	return val;
 8003ca8:	697b      	ldr	r3, [r7, #20]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003cb2:	b590      	push	{r4, r7, lr}
 8003cb4:	b089      	sub	sp, #36	; 0x24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f240 80d2 	bls.w	8003e6e <put_fat+0x1bc>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f080 80cc 	bcs.w	8003e6e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f000 8096 	beq.w	8003e0c <put_fat+0x15a>
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	f300 80cd 	bgt.w	8003e80 <put_fat+0x1ce>
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d002      	beq.n	8003cf0 <put_fat+0x3e>
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d06e      	beq.n	8003dcc <put_fat+0x11a>
 8003cee:	e0c7      	b.n	8003e80 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	4413      	add	r3, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fe6e 	bl	80039ec <move_window>
 8003d10:	4603      	mov	r3, r0
 8003d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d14:	7ffb      	ldrb	r3, [r7, #31]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 80ab 	bne.w	8003e72 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	1c59      	adds	r1, r3, #1
 8003d26:	61b9      	str	r1, [r7, #24]
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <put_fat+0xa4>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	b25a      	sxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e001      	b.n	8003d5a <put_fat+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	0a5b      	lsrs	r3, r3, #9
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff fe3b 	bl	80039ec <move_window>
 8003d76:	4603      	mov	r3, r0
 8003d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d17a      	bne.n	8003e76 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	4413      	add	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <put_fat+0xf0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e00e      	b.n	8003dc0 <put_fat+0x10e>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	f023 030f 	bic.w	r3, r3, #15
 8003dac:	b25a      	sxtb	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	70da      	strb	r2, [r3, #3]
			break;
 8003dca:	e059      	b.n	8003e80 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fe07 	bl	80039ec <move_window>
 8003dde:	4603      	mov	r3, r0
 8003de0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d148      	bne.n	8003e7a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003df6:	4413      	add	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fb7f 	bl	8003502 <st_word>
			fs->wflag = 1;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	70da      	strb	r2, [r3, #3]
			break;
 8003e0a:	e039      	b.n	8003e80 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	09db      	lsrs	r3, r3, #7
 8003e14:	4413      	add	r3, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fde7 	bl	80039ec <move_window>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d12a      	bne.n	8003e7e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fb3c 	bl	80034bc <ld_dword>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e4a:	4323      	orrs	r3, r4
 8003e4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e5c:	4413      	add	r3, r2
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fb69 	bl	8003538 <st_dword>
			fs->wflag = 1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	70da      	strb	r2, [r3, #3]
			break;
 8003e6c:	e008      	b.n	8003e80 <put_fat+0x1ce>
		}
	}
 8003e6e:	bf00      	nop
 8003e70:	e006      	b.n	8003e80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e7e:	bf00      	nop
	return res;
 8003e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}

08003e8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b088      	sub	sp, #32
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d904      	bls.n	8003eb0 <remove_chain+0x26>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d301      	bcc.n	8003eb4 <remove_chain+0x2a>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e04b      	b.n	8003f4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f7ff fef6 	bl	8003cb2 <put_fat>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <remove_chain+0x4a>
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	e03b      	b.n	8003f4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fe43 	bl	8003b62 <get_fat>
 8003edc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d031      	beq.n	8003f48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <remove_chain+0x64>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e02e      	b.n	8003f4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d101      	bne.n	8003efa <remove_chain+0x70>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e028      	b.n	8003f4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003efa:	2200      	movs	r2, #0
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	69b8      	ldr	r0, [r7, #24]
 8003f00:	f7ff fed7 	bl	8003cb2 <put_fat>
 8003f04:	4603      	mov	r3, r0
 8003f06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <remove_chain+0x88>
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	e01c      	b.n	8003f4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d20b      	bcs.n	8003f38 <remove_chain+0xae>
			fs->free_clst++;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3c6      	bcc.n	8003ed4 <remove_chain+0x4a>
 8003f46:	e000      	b.n	8003f4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003f48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <create_chain+0x2c>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d31b      	bcc.n	8003fb8 <create_chain+0x64>
 8003f80:	2301      	movs	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e018      	b.n	8003fb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fdea 	bl	8003b62 <get_fat>
 8003f8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d801      	bhi.n	8003f9a <create_chain+0x46>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e070      	b.n	800407c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d101      	bne.n	8003fa6 <create_chain+0x52>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	e06a      	b.n	800407c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d201      	bcs.n	8003fb4 <create_chain+0x60>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e063      	b.n	800407c <create_chain+0x128>
		scl = clst;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d307      	bcc.n	8003fdc <create_chain+0x88>
				ncl = 2;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d901      	bls.n	8003fdc <create_chain+0x88>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e04f      	b.n	800407c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003fdc:	69f9      	ldr	r1, [r7, #28]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fdbf 	bl	8003b62 <get_fat>
 8003fe4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <create_chain+0xa6>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d101      	bne.n	8003ffe <create_chain+0xaa>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	e03e      	b.n	800407c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	429a      	cmp	r2, r3
 8004004:	d1da      	bne.n	8003fbc <create_chain+0x68>
 8004006:	2300      	movs	r3, #0
 8004008:	e038      	b.n	800407c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800400a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	69f9      	ldr	r1, [r7, #28]
 8004012:	6938      	ldr	r0, [r7, #16]
 8004014:	f7ff fe4d 	bl	8003cb2 <put_fat>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <create_chain+0xe2>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6938      	ldr	r0, [r7, #16]
 800402e:	f7ff fe40 	bl	8003cb2 <put_fat>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d116      	bne.n	800406a <create_chain+0x116>
		fs->last_clst = ncl;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	3b02      	subs	r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d804      	bhi.n	800405a <create_chain+0x106>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	1e5a      	subs	r2, r3, #1
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	711a      	strb	r2, [r3, #4]
 8004068:	e007      	b.n	800407a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <create_chain+0x122>
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	e000      	b.n	8004078 <create_chain+0x124>
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	3304      	adds	r3, #4
 800409a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	8952      	ldrh	r2, [r2, #10]
 80040a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	613a      	str	r2, [r7, #16]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <clmt_clust+0x3a>
 80040ba:	2300      	movs	r3, #0
 80040bc:	e010      	b.n	80040e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d307      	bcc.n	80040d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3304      	adds	r3, #4
 80040d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040d4:	e7e9      	b.n	80040aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80040d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004102:	d204      	bcs.n	800410e <dir_sdi+0x22>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <dir_sdi+0x26>
		return FR_INT_ERR;
 800410e:	2302      	movs	r3, #2
 8004110:	e063      	b.n	80041da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <dir_sdi+0x46>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d902      	bls.n	8004132 <dir_sdi+0x46>
		clst = fs->dirbase;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10c      	bne.n	8004152 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	8912      	ldrh	r2, [r2, #8]
 8004140:	4293      	cmp	r3, r2
 8004142:	d301      	bcc.n	8004148 <dir_sdi+0x5c>
 8004144:	2302      	movs	r3, #2
 8004146:	e048      	b.n	80041da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	61da      	str	r2, [r3, #28]
 8004150:	e029      	b.n	80041a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	895b      	ldrh	r3, [r3, #10]
 8004156:	025b      	lsls	r3, r3, #9
 8004158:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800415a:	e019      	b.n	8004190 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fcfe 	bl	8003b62 <get_fat>
 8004166:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d101      	bne.n	8004174 <dir_sdi+0x88>
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d904      	bls.n	8004184 <dir_sdi+0x98>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	d301      	bcc.n	8004188 <dir_sdi+0x9c>
 8004184:	2302      	movs	r3, #2
 8004186:	e028      	b.n	80041da <dir_sdi+0xee>
			ofs -= csz;
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d2e1      	bcs.n	800415c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	6938      	ldr	r0, [r7, #16]
 800419c:	f7ff fcc2 	bl	8003b24 <clust2sect>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <dir_sdi+0xcc>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e010      	b.n	80041da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	0a5b      	lsrs	r3, r3, #9
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	3320      	adds	r3, #32
 80041f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <dir_next+0x28>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004208:	d301      	bcc.n	800420e <dir_next+0x2c>
 800420a:	2304      	movs	r3, #4
 800420c:	e0aa      	b.n	8004364 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8098 	bne.w	800434a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	8912      	ldrh	r2, [r2, #8]
 8004234:	4293      	cmp	r3, r2
 8004236:	f0c0 8088 	bcc.w	800434a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	61da      	str	r2, [r3, #28]
 8004240:	2304      	movs	r3, #4
 8004242:	e08f      	b.n	8004364 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	8952      	ldrh	r2, [r2, #10]
 800424c:	3a01      	subs	r2, #1
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d17a      	bne.n	800434a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f7ff fc80 	bl	8003b62 <get_fat>
 8004262:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d801      	bhi.n	800426e <dir_next+0x8c>
 800426a:	2302      	movs	r3, #2
 800426c:	e07a      	b.n	8004364 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d101      	bne.n	800427a <dir_next+0x98>
 8004276:	2301      	movs	r3, #1
 8004278:	e074      	b.n	8004364 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	d358      	bcc.n	8004336 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	61da      	str	r2, [r3, #28]
 8004290:	2304      	movs	r3, #4
 8004292:	e067      	b.n	8004364 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7ff fe59 	bl	8003f54 <create_chain>
 80042a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <dir_next+0xcc>
 80042aa:	2307      	movs	r3, #7
 80042ac:	e05a      	b.n	8004364 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <dir_next+0xd6>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e055      	b.n	8004364 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d101      	bne.n	80042c4 <dir_next+0xe2>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e04f      	b.n	8004364 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fb4d 	bl	8003964 <sync_window>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <dir_next+0xf2>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e047      	b.n	8004364 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3330      	adds	r3, #48	; 0x30
 80042d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f977 	bl	80035d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff fc1a 	bl	8003b24 <clust2sect>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f6:	e012      	b.n	800431e <dir_next+0x13c>
						fs->wflag = 1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff fb30 	bl	8003964 <sync_window>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <dir_next+0x12c>
 800430a:	2301      	movs	r3, #1
 800430c:	e02a      	b.n	8004364 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3301      	adds	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	895b      	ldrh	r3, [r3, #10]
 8004322:	461a      	mov	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4293      	cmp	r3, r2
 8004328:	d3e6      	bcc.n	80042f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff fbf0 	bl	8003b24 <clust2sect>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800437c:	2100      	movs	r1, #0
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff feb4 	bl	80040ec <dir_sdi>
 8004384:	4603      	mov	r3, r0
 8004386:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d12b      	bne.n	80043e6 <dir_alloc+0x7a>
		n = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	4619      	mov	r1, r3
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fb27 	bl	80039ec <move_window>
 800439e:	4603      	mov	r3, r0
 80043a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2be5      	cmp	r3, #229	; 0xe5
 80043b0:	d004      	beq.n	80043bc <dir_alloc+0x50>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	3301      	adds	r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d102      	bne.n	80043d0 <dir_alloc+0x64>
 80043ca:	e00c      	b.n	80043e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80043d0:	2101      	movs	r1, #1
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff05 	bl	80041e2 <dir_next>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0d7      	beq.n	8004392 <dir_alloc+0x26>
 80043e2:	e000      	b.n	80043e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80043e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d101      	bne.n	80043f0 <dir_alloc+0x84>
 80043ec:	2307      	movs	r3, #7
 80043ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	331a      	adds	r3, #26
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff f83f 	bl	800348c <ld_word>
 800440e:	4603      	mov	r3, r0
 8004410:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d109      	bne.n	800442e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f834 	bl	800348c <ld_word>
 8004424:	4603      	mov	r3, r0
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	331a      	adds	r3, #26
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	b292      	uxth	r2, r2
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f857 	bl	8003502 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d109      	bne.n	8004470 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f103 0214 	add.w	r2, r3, #20
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	b29b      	uxth	r3, r3
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7ff f849 	bl	8003502 <st_word>
	}
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fe2f 	bl	80040ec <dir_sdi>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <dir_find+0x24>
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	e03e      	b.n	800451a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4619      	mov	r1, r3
 80044a2:	6938      	ldr	r0, [r7, #16]
 80044a4:	f7ff faa2 	bl	80039ec <move_window>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d12f      	bne.n	8004512 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <dir_find+0x4e>
 80044c0:	2304      	movs	r3, #4
 80044c2:	75fb      	strb	r3, [r7, #23]
 80044c4:	e028      	b.n	8004518 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	330b      	adds	r3, #11
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	330b      	adds	r3, #11
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <dir_find+0x86>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a18      	ldr	r0, [r3, #32]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	220b      	movs	r2, #11
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7ff f888 	bl	8003608 <mem_cmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fe6e 	bl	80041e2 <dir_next>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0c5      	beq.n	800449c <dir_find+0x24>
 8004510:	e002      	b.n	8004518 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004516:	bf00      	nop

	return res;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004530:	2101      	movs	r1, #1
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff1a 	bl	800436c <dir_alloc>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11c      	bne.n	800457c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4619      	mov	r1, r3
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f7ff fa4f 	bl	80039ec <move_window>
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d111      	bne.n	800457c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2220      	movs	r2, #32
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f836 	bl	80035d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a18      	ldr	r0, [r3, #32]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3324      	adds	r3, #36	; 0x24
 800456e:	220b      	movs	r2, #11
 8004570:	4619      	mov	r1, r3
 8004572:	f7ff f80d 	bl	8003590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2201      	movs	r2, #1
 800457a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800459e:	220b      	movs	r2, #11
 80045a0:	2120      	movs	r1, #32
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f7ff f815 	bl	80035d2 <mem_set>
	si = i = 0; ni = 8;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	2308      	movs	r3, #8
 80045b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	61fa      	str	r2, [r7, #28]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80045c2:	7efb      	ldrb	r3, [r7, #27]
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d94e      	bls.n	8004666 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80045c8:	7efb      	ldrb	r3, [r7, #27]
 80045ca:	2b2f      	cmp	r3, #47	; 0x2f
 80045cc:	d006      	beq.n	80045dc <create_name+0x54>
 80045ce:	7efb      	ldrb	r3, [r7, #27]
 80045d0:	2b5c      	cmp	r3, #92	; 0x5c
 80045d2:	d110      	bne.n	80045f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80045d4:	e002      	b.n	80045dc <create_name+0x54>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b2f      	cmp	r3, #47	; 0x2f
 80045e6:	d0f6      	beq.n	80045d6 <create_name+0x4e>
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b5c      	cmp	r3, #92	; 0x5c
 80045f2:	d0f0      	beq.n	80045d6 <create_name+0x4e>
			break;
 80045f4:	e038      	b.n	8004668 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80045f6:	7efb      	ldrb	r3, [r7, #27]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d003      	beq.n	8004604 <create_name+0x7c>
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d30c      	bcc.n	800461e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b0b      	cmp	r3, #11
 8004608:	d002      	beq.n	8004610 <create_name+0x88>
 800460a:	7efb      	ldrb	r3, [r7, #27]
 800460c:	2b2e      	cmp	r3, #46	; 0x2e
 800460e:	d001      	beq.n	8004614 <create_name+0x8c>
 8004610:	2306      	movs	r3, #6
 8004612:	e044      	b.n	800469e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004614:	2308      	movs	r3, #8
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	230b      	movs	r3, #11
 800461a:	617b      	str	r3, [r7, #20]
			continue;
 800461c:	e022      	b.n	8004664 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800461e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004622:	2b00      	cmp	r3, #0
 8004624:	da04      	bge.n	8004630 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004626:	7efb      	ldrb	r3, [r7, #27]
 8004628:	3b80      	subs	r3, #128	; 0x80
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <create_name+0x120>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004630:	7efb      	ldrb	r3, [r7, #27]
 8004632:	4619      	mov	r1, r3
 8004634:	481d      	ldr	r0, [pc, #116]	; (80046ac <create_name+0x124>)
 8004636:	f7ff f80e 	bl	8003656 <chk_chr>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <create_name+0xbc>
 8004640:	2306      	movs	r3, #6
 8004642:	e02c      	b.n	800469e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004644:	7efb      	ldrb	r3, [r7, #27]
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d905      	bls.n	8004656 <create_name+0xce>
 800464a:	7efb      	ldrb	r3, [r7, #27]
 800464c:	2b7a      	cmp	r3, #122	; 0x7a
 800464e:	d802      	bhi.n	8004656 <create_name+0xce>
 8004650:	7efb      	ldrb	r3, [r7, #27]
 8004652:	3b20      	subs	r3, #32
 8004654:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	613a      	str	r2, [r7, #16]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4413      	add	r3, r2
 8004660:	7efa      	ldrb	r2, [r7, #27]
 8004662:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004664:	e7a6      	b.n	80045b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004666:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	441a      	add	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <create_name+0xf4>
 8004678:	2306      	movs	r3, #6
 800467a:	e010      	b.n	800469e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2be5      	cmp	r3, #229	; 0xe5
 8004682:	d102      	bne.n	800468a <create_name+0x102>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2205      	movs	r2, #5
 8004688:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800468a:	7efb      	ldrb	r3, [r7, #27]
 800468c:	2b20      	cmp	r3, #32
 800468e:	d801      	bhi.n	8004694 <create_name+0x10c>
 8004690:	2204      	movs	r2, #4
 8004692:	e000      	b.n	8004696 <create_name+0x10e>
 8004694:	2200      	movs	r2, #0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	330b      	adds	r3, #11
 800469a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800469c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	08006cb8 	.word	0x08006cb8
 80046ac:	08006c5c 	.word	0x08006c5c

080046b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80046c4:	e002      	b.n	80046cc <follow_path+0x1c>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b2f      	cmp	r3, #47	; 0x2f
 80046d2:	d0f8      	beq.n	80046c6 <follow_path+0x16>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b5c      	cmp	r3, #92	; 0x5c
 80046da:	d0f4      	beq.n	80046c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b1f      	cmp	r3, #31
 80046e8:	d80a      	bhi.n	8004700 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80046f2:	2100      	movs	r1, #0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fcf9 	bl	80040ec <dir_sdi>
 80046fa:	4603      	mov	r3, r0
 80046fc:	75fb      	strb	r3, [r7, #23]
 80046fe:	e043      	b.n	8004788 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004700:	463b      	mov	r3, r7
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff3f 	bl	8004588 <create_name>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d134      	bne.n	800477e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff feaf 	bl	8004478 <dir_find>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004724:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d127      	bne.n	8004782 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d122      	bne.n	8004782 <follow_path+0xd2>
 800473c:	2305      	movs	r3, #5
 800473e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004740:	e01f      	b.n	8004782 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11c      	bne.n	8004786 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	799b      	ldrb	r3, [r3, #6]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004758:	2305      	movs	r3, #5
 800475a:	75fb      	strb	r3, [r7, #23]
 800475c:	e014      	b.n	8004788 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	4413      	add	r3, r2
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fe42 	bl	80043fa <ld_clust>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800477c:	e7c0      	b.n	8004700 <follow_path+0x50>
			if (res != FR_OK) break;
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <follow_path+0xd8>
				break;
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004786:	bf00      	nop
			}
		}
	}

	return res;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d031      	beq.n	800480c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e002      	b.n	80047b6 <get_ldnumber+0x24>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3301      	adds	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d903      	bls.n	80047c6 <get_ldnumber+0x34>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b3a      	cmp	r3, #58	; 0x3a
 80047c4:	d1f4      	bne.n	80047b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b3a      	cmp	r3, #58	; 0x3a
 80047cc:	d11c      	bne.n	8004808 <get_ldnumber+0x76>
			tp = *path;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	60fa      	str	r2, [r7, #12]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	3b30      	subs	r3, #48	; 0x30
 80047de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b09      	cmp	r3, #9
 80047e4:	d80e      	bhi.n	8004804 <get_ldnumber+0x72>
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10a      	bne.n	8004804 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d107      	bne.n	8004804 <get_ldnumber+0x72>
					vol = (int)i;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e002      	b.n	800480e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800480c:	693b      	ldr	r3, [r7, #16]
}
 800480e:	4618      	mov	r0, r3
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	70da      	strb	r2, [r3, #3]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff f8d8 	bl	80039ec <move_window>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <check_fs+0x2a>
 8004842:	2304      	movs	r3, #4
 8004844:	e038      	b.n	80048b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3330      	adds	r3, #48	; 0x30
 800484a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fe1c 	bl	800348c <ld_word>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <check_fs+0x48>
 8004860:	2303      	movs	r3, #3
 8004862:	e029      	b.n	80048b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800486a:	2be9      	cmp	r3, #233	; 0xe9
 800486c:	d009      	beq.n	8004882 <check_fs+0x66>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004874:	2beb      	cmp	r3, #235	; 0xeb
 8004876:	d11e      	bne.n	80048b6 <check_fs+0x9a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800487e:	2b90      	cmp	r3, #144	; 0x90
 8004880:	d119      	bne.n	80048b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3330      	adds	r3, #48	; 0x30
 8004886:	3336      	adds	r3, #54	; 0x36
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fe17 	bl	80034bc <ld_dword>
 800488e:	4603      	mov	r3, r0
 8004890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <check_fs+0xa4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <check_fs+0x82>
 800489a:	2300      	movs	r3, #0
 800489c:	e00c      	b.n	80048b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3330      	adds	r3, #48	; 0x30
 80048a2:	3352      	adds	r3, #82	; 0x52
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fe09 	bl	80034bc <ld_dword>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4a05      	ldr	r2, [pc, #20]	; (80048c4 <check_fs+0xa8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <check_fs+0x9a>
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80048b6:	2302      	movs	r3, #2
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	00544146 	.word	0x00544146
 80048c4:	33544146 	.word	0x33544146

080048c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b096      	sub	sp, #88	; 0x58
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff ff58 	bl	8004792 <get_ldnumber>
 80048e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da01      	bge.n	80048ee <find_volume+0x26>
 80048ea:	230b      	movs	r3, #11
 80048ec:	e22d      	b.n	8004d4a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80048ee:	4aa1      	ldr	r2, [pc, #644]	; (8004b74 <find_volume+0x2ac>)
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <find_volume+0x3a>
 80048fe:	230c      	movs	r3, #12
 8004900:	e223      	b.n	8004d4a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004906:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fd17 	bl	8003350 <disk_status>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10c      	bne.n	800494e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <find_volume+0x82>
 800493a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004946:	230a      	movs	r3, #10
 8004948:	e1ff      	b.n	8004d4a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800494a:	2300      	movs	r3, #0
 800494c:	e1fd      	b.n	8004d4a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fd0f 	bl	8003384 <disk_initialize>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800496c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004978:	2303      	movs	r3, #3
 800497a:	e1e6      	b.n	8004d4a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <find_volume+0xca>
 8004982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800498e:	230a      	movs	r3, #10
 8004990:	e1db      	b.n	8004d4a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800499a:	f7ff ff3f 	bl	800481c <check_fs>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80049a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d149      	bne.n	8004a40 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049ac:	2300      	movs	r3, #0
 80049ae:	643b      	str	r3, [r7, #64]	; 0x40
 80049b0:	e01e      	b.n	80049f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80049c0:	4413      	add	r3, r2
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	3304      	adds	r3, #4
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <find_volume+0x114>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	3308      	adds	r3, #8
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fd72 	bl	80034bc <ld_dword>
 80049d8:	4602      	mov	r2, r0
 80049da:	e000      	b.n	80049de <find_volume+0x116>
 80049dc:	2200      	movs	r2, #0
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	3358      	adds	r3, #88	; 0x58
 80049e4:	443b      	add	r3, r7
 80049e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ec:	3301      	adds	r3, #1
 80049ee:	643b      	str	r3, [r7, #64]	; 0x40
 80049f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d9dd      	bls.n	80049b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80049f6:	2300      	movs	r3, #0
 80049f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80049fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <find_volume+0x13e>
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	3b01      	subs	r3, #1
 8004a04:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	3358      	adds	r3, #88	; 0x58
 8004a0c:	443b      	add	r3, r7
 8004a0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <find_volume+0x15e>
 8004a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a1e:	f7ff fefd 	bl	800481c <check_fs>
 8004a22:	4603      	mov	r3, r0
 8004a24:	e000      	b.n	8004a28 <find_volume+0x160>
 8004a26:	2303      	movs	r3, #3
 8004a28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d905      	bls.n	8004a40 <find_volume+0x178>
 8004a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a36:	3301      	adds	r3, #1
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d9e2      	bls.n	8004a06 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d101      	bne.n	8004a4c <find_volume+0x184>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e17e      	b.n	8004d4a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d901      	bls.n	8004a58 <find_volume+0x190>
 8004a54:	230d      	movs	r3, #13
 8004a56:	e178      	b.n	8004d4a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	3330      	adds	r3, #48	; 0x30
 8004a5c:	330b      	adds	r3, #11
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fd14 	bl	800348c <ld_word>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6a:	d001      	beq.n	8004a70 <find_volume+0x1a8>
 8004a6c:	230d      	movs	r3, #13
 8004a6e:	e16c      	b.n	8004d4a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	3330      	adds	r3, #48	; 0x30
 8004a74:	3316      	adds	r3, #22
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fd08 	bl	800348c <ld_word>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <find_volume+0x1cc>
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	3330      	adds	r3, #48	; 0x30
 8004a8a:	3324      	adds	r3, #36	; 0x24
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fd15 	bl	80034bc <ld_dword>
 8004a92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a98:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d005      	beq.n	8004ab8 <find_volume+0x1f0>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	789b      	ldrb	r3, [r3, #2]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d001      	beq.n	8004ab8 <find_volume+0x1f0>
 8004ab4:	230d      	movs	r3, #13
 8004ab6:	e148      	b.n	8004d4a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	789b      	ldrb	r3, [r3, #2]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	895b      	ldrh	r3, [r3, #10]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <find_volume+0x224>
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	895b      	ldrh	r3, [r3, #10]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	895b      	ldrh	r3, [r3, #10]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <find_volume+0x228>
 8004aec:	230d      	movs	r3, #13
 8004aee:	e12c      	b.n	8004d4a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	3311      	adds	r3, #17
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fcc8 	bl	800348c <ld_word>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	891b      	ldrh	r3, [r3, #8]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <find_volume+0x24e>
 8004b12:	230d      	movs	r3, #13
 8004b14:	e119      	b.n	8004d4a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	3330      	adds	r3, #48	; 0x30
 8004b1a:	3313      	adds	r3, #19
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe fcb5 	bl	800348c <ld_word>
 8004b22:	4603      	mov	r3, r0
 8004b24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <find_volume+0x272>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	3330      	adds	r3, #48	; 0x30
 8004b30:	3320      	adds	r3, #32
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fcc2 	bl	80034bc <ld_dword>
 8004b38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	3330      	adds	r3, #48	; 0x30
 8004b3e:	330e      	adds	r3, #14
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fca3 	bl	800348c <ld_word>
 8004b46:	4603      	mov	r3, r0
 8004b48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <find_volume+0x28c>
 8004b50:	230d      	movs	r3, #13
 8004b52:	e0fa      	b.n	8004d4a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	4413      	add	r3, r2
 8004b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b5c:	8912      	ldrh	r2, [r2, #8]
 8004b5e:	0912      	lsrs	r2, r2, #4
 8004b60:	b292      	uxth	r2, r2
 8004b62:	4413      	add	r3, r2
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d204      	bcs.n	8004b78 <find_volume+0x2b0>
 8004b6e:	230d      	movs	r3, #13
 8004b70:	e0eb      	b.n	8004d4a <find_volume+0x482>
 8004b72:	bf00      	nop
 8004b74:	200006d8 	.word	0x200006d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b80:	8952      	ldrh	r2, [r2, #10]
 8004b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <find_volume+0x2ca>
 8004b8e:	230d      	movs	r3, #13
 8004b90:	e0db      	b.n	8004d4a <find_volume+0x482>
		fmt = FS_FAT32;
 8004b92:	2303      	movs	r3, #3
 8004b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <find_volume+0x2e0>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d802      	bhi.n	8004bb8 <find_volume+0x2f0>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bc4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004bc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	441a      	add	r2, r3
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004bd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	441a      	add	r2, r3
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d11e      	bne.n	8004c20 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	3330      	adds	r3, #48	; 0x30
 8004be6:	332a      	adds	r3, #42	; 0x2a
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fc4f 	bl	800348c <ld_word>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <find_volume+0x330>
 8004bf4:	230d      	movs	r3, #13
 8004bf6:	e0a8      	b.n	8004d4a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	891b      	ldrh	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <find_volume+0x33c>
 8004c00:	230d      	movs	r3, #13
 8004c02:	e0a2      	b.n	8004d4a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	3330      	adds	r3, #48	; 0x30
 8004c08:	332c      	adds	r3, #44	; 0x2c
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fc56 	bl	80034bc <ld_dword>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1e:	e01f      	b.n	8004c60 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	891b      	ldrh	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <find_volume+0x364>
 8004c28:	230d      	movs	r3, #13
 8004c2a:	e08e      	b.n	8004d4a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	6a1a      	ldr	r2, [r3, #32]
 8004c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c32:	441a      	add	r2, r3
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d103      	bne.n	8004c48 <find_volume+0x380>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	e00a      	b.n	8004c5e <find_volume+0x396>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	085a      	lsrs	r2, r3, #1
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d201      	bcs.n	8004c74 <find_volume+0x3ac>
 8004c70:	230d      	movs	r3, #13
 8004c72:	e06a      	b.n	8004d4a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	611a      	str	r2, [r3, #16]
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2280      	movs	r2, #128	; 0x80
 8004c88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d149      	bne.n	8004d26 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	3330      	adds	r3, #48	; 0x30
 8004c96:	3330      	adds	r3, #48	; 0x30
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fbf7 	bl	800348c <ld_word>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d140      	bne.n	8004d26 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cac:	f7fe fe9e 	bl	80039ec <move_window>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d137      	bne.n	8004d26 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2200      	movs	r2, #0
 8004cba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	3330      	adds	r3, #48	; 0x30
 8004cc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe fbe1 	bl	800348c <ld_word>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d127      	bne.n	8004d26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	3330      	adds	r3, #48	; 0x30
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fbee 	bl	80034bc <ld_dword>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <find_volume+0x48c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d11e      	bne.n	8004d26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	3330      	adds	r3, #48	; 0x30
 8004cec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fbe3 	bl	80034bc <ld_dword>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <find_volume+0x490>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d113      	bne.n	8004d26 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	3330      	adds	r3, #48	; 0x30
 8004d02:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fbd8 	bl	80034bc <ld_dword>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	3330      	adds	r3, #48	; 0x30
 8004d16:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fbce 	bl	80034bc <ld_dword>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <find_volume+0x494>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <find_volume+0x494>)
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <find_volume+0x494>)
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d44:	f7fe fdea 	bl	800391c <clear_lock>
#endif
	return FR_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3758      	adds	r7, #88	; 0x58
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	41615252 	.word	0x41615252
 8004d58:	61417272 	.word	0x61417272
 8004d5c:	200006dc 	.word	0x200006dc

08004d60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004d6a:	2309      	movs	r3, #9
 8004d6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <validate+0x4e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <validate+0x4e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d013      	beq.n	8004dae <validate+0x4e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	889a      	ldrh	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	88db      	ldrh	r3, [r3, #6]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d10c      	bne.n	8004dae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fad8 	bl	8003350 <disk_status>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <validate+0x4e>
			res = FR_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <validate+0x5a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	e000      	b.n	8004dbc <validate+0x5c>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6013      	str	r3, [r2, #0]
	return res;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fcd5 	bl	8004792 <get_ldnumber>
 8004de8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	da01      	bge.n	8004df4 <f_mount+0x28>
 8004df0:	230b      	movs	r3, #11
 8004df2:	e02b      	b.n	8004e4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004df4:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <f_mount+0x88>)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004e04:	69b8      	ldr	r0, [r7, #24]
 8004e06:	f7fe fd89 	bl	800391c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	490d      	ldr	r1, [pc, #52]	; (8004e54 <f_mount+0x88>)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <f_mount+0x66>
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <f_mount+0x6a>
 8004e32:	2300      	movs	r3, #0
 8004e34:	e00a      	b.n	8004e4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004e36:	f107 010c 	add.w	r1, r7, #12
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fd41 	bl	80048c8 <find_volume>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200006d8 	.word	0x200006d8

08004e58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b098      	sub	sp, #96	; 0x60
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <f_open+0x18>
 8004e6c:	2309      	movs	r3, #9
 8004e6e:	e1ad      	b.n	80051cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004e78:	79fa      	ldrb	r2, [r7, #7]
 8004e7a:	f107 0110 	add.w	r1, r7, #16
 8004e7e:	f107 0308 	add.w	r3, r7, #8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fd20 	bl	80048c8 <find_volume>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 8191 	bne.w	80051ba <f_open+0x362>
		dj.obj.fs = fs;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fc03 	bl	80046b0 <follow_path>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004eb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11a      	bne.n	8004eee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004eb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da03      	bge.n	8004eca <f_open+0x72>
				res = FR_INVALID_NAME;
 8004ec2:	2306      	movs	r3, #6
 8004ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ec8:	e011      	b.n	8004eee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fbd2 	bl	800368c <chk_lock>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	f003 031c 	and.w	r3, r3, #28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d07f      	beq.n	8004ff8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d017      	beq.n	8004f30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d10e      	bne.n	8004f26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004f08:	f7fe fc1c 	bl	8003744 <enq_lock>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <f_open+0xc8>
 8004f12:	f107 0314 	add.w	r3, r7, #20
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fb03 	bl	8004522 <dir_register>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	e000      	b.n	8004f22 <f_open+0xca>
 8004f20:	2312      	movs	r3, #18
 8004f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	f043 0308 	orr.w	r3, r3, #8
 8004f2c:	71fb      	strb	r3, [r7, #7]
 8004f2e:	e010      	b.n	8004f52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004f30:	7ebb      	ldrb	r3, [r7, #26]
 8004f32:	f003 0311 	and.w	r3, r3, #17
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <f_open+0xea>
					res = FR_DENIED;
 8004f3a:	2307      	movs	r3, #7
 8004f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f40:	e007      	b.n	8004f52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <f_open+0xfa>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d168      	bne.n	800502c <f_open+0x1d4>
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d063      	beq.n	800502c <f_open+0x1d4>
				dw = GET_FATTIME();
 8004f64:	f7fe f994 	bl	8003290 <get_fattime>
 8004f68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	330e      	adds	r3, #14
 8004f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fae1 	bl	8003538 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	3316      	adds	r3, #22
 8004f7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fadb 	bl	8003538 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	330b      	adds	r3, #11
 8004f86:	2220      	movs	r2, #32
 8004f88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fa32 	bl	80043fa <ld_clust>
 8004f96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fa4a 	bl	8004438 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	331c      	adds	r3, #28
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fac4 	bl	8003538 <st_dword>
					fs->wflag = 1;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d037      	beq.n	800502c <f_open+0x1d4>
						dw = fs->winsect;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004fc2:	f107 0314 	add.w	r3, r7, #20
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe ff5d 	bl	8003e8a <remove_chain>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d126      	bne.n	800502c <f_open+0x1d4>
							res = move_window(fs, dw);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fd02 	bl	80039ec <move_window>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e019      	b.n	800502c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d115      	bne.n	800502c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005000:	7ebb      	ldrb	r3, [r7, #26]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <f_open+0x1ba>
					res = FR_NO_FILE;
 800500a:	2304      	movs	r3, #4
 800500c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005010:	e00c      	b.n	800502c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <f_open+0x1d4>
 800501c:	7ebb      	ldrb	r3, [r7, #26]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <f_open+0x1d4>
						res = FR_DENIED;
 8005026:	2307      	movs	r3, #7
 8005028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800502c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005030:	2b00      	cmp	r3, #0
 8005032:	d128      	bne.n	8005086 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005044:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800504e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fb8b 	bl	8003788 <inc_lock>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <f_open+0x22e>
 8005080:	2302      	movs	r3, #2
 8005082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 8095 	bne.w	80051ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005094:	4611      	mov	r1, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f9af 	bl	80043fa <ld_clust>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	331c      	adds	r3, #28
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fa08 	bl	80034bc <ld_dword>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	88da      	ldrh	r2, [r3, #6]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	79fa      	ldrb	r2, [r7, #7]
 80050ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3330      	adds	r3, #48	; 0x30
 80050e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fa72 	bl	80035d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d060      	beq.n	80051ba <f_open+0x362>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05c      	beq.n	80051ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	895b      	ldrh	r3, [r3, #10]
 800510c:	025b      	lsls	r3, r3, #9
 800510e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	657b      	str	r3, [r7, #84]	; 0x54
 800511c:	e016      	b.n	800514c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fd1d 	bl	8003b62 <get_fat>
 8005128:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800512a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800512c:	2b01      	cmp	r3, #1
 800512e:	d802      	bhi.n	8005136 <f_open+0x2de>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d102      	bne.n	8005144 <f_open+0x2ec>
 800513e:	2301      	movs	r3, #1
 8005140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	657b      	str	r3, [r7, #84]	; 0x54
 800514c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <f_open+0x304>
 8005154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005158:	429a      	cmp	r2, r3
 800515a:	d8e0      	bhi.n	800511e <f_open+0x2c6>
				}
				fp->clust = clst;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005160:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005166:	2b00      	cmp	r3, #0
 8005168:	d127      	bne.n	80051ba <f_open+0x362>
 800516a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	2b00      	cmp	r3, #0
 8005172:	d022      	beq.n	80051ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fcd3 	bl	8003b24 <clust2sect>
 800517e:	6478      	str	r0, [r7, #68]	; 0x44
 8005180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <f_open+0x336>
						res = FR_INT_ERR;
 8005186:	2302      	movs	r3, #2
 8005188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800518c:	e015      	b.n	80051ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800518e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005190:	0a5a      	lsrs	r2, r3, #9
 8005192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	7858      	ldrb	r0, [r3, #1]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	2301      	movs	r3, #1
 80051aa:	f7fe f911 	bl	80033d0 <disk_read>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <f_open+0x362>
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80051ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <f_open+0x370>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80051c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3760      	adds	r7, #96	; 0x60
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08e      	sub	sp, #56	; 0x38
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f107 0214 	add.w	r2, r7, #20
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fdb3 	bl	8004d60 <validate>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <f_read+0x44>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	7d5b      	ldrb	r3, [r3, #21]
 800520c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <f_read+0x4a>
 8005218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800521c:	e115      	b.n	800544a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	7d1b      	ldrb	r3, [r3, #20]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <f_read+0x5a>
 800522a:	2307      	movs	r3, #7
 800522c:	e10d      	b.n	800544a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	429a      	cmp	r2, r3
 8005240:	f240 80fe 	bls.w	8005440 <f_read+0x26c>
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005248:	e0fa      	b.n	8005440 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 80c6 	bne.w	80053e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	0a5b      	lsrs	r3, r3, #9
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	8952      	ldrh	r2, [r2, #10]
 8005262:	3a01      	subs	r2, #1
 8005264:	4013      	ands	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d12f      	bne.n	80052ce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
 800527c:	e013      	b.n	80052a6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	4619      	mov	r1, r3
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7fe fef9 	bl	8004084 <clmt_clust>
 8005292:	6338      	str	r0, [r7, #48]	; 0x30
 8005294:	e007      	b.n	80052a6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f7fe fc5f 	bl	8003b62 <get_fat>
 80052a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d804      	bhi.n	80052b6 <f_read+0xe2>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2202      	movs	r2, #2
 80052b0:	755a      	strb	r2, [r3, #21]
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0c9      	b.n	800544a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d104      	bne.n	80052c8 <f_read+0xf4>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	755a      	strb	r2, [r3, #21]
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0c0      	b.n	800544a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe fc24 	bl	8003b24 <clust2sect>
 80052dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <f_read+0x11a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2202      	movs	r2, #2
 80052e8:	755a      	strb	r2, [r3, #21]
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0ad      	b.n	800544a <f_read+0x276>
			sect += csect;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0a5b      	lsrs	r3, r3, #9
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d039      	beq.n	8005376 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	4413      	add	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	8952      	ldrh	r2, [r2, #10]
 800530c:	4293      	cmp	r3, r2
 800530e:	d905      	bls.n	800531c <f_read+0x148>
					cc = fs->csize - csect;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	895b      	ldrh	r3, [r3, #10]
 8005314:	461a      	mov	r2, r3
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	7858      	ldrb	r0, [r3, #1]
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005326:	f7fe f853 	bl	80033d0 <disk_read>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <f_read+0x166>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	755a      	strb	r2, [r3, #21]
 8005336:	2301      	movs	r3, #1
 8005338:	e087      	b.n	800544a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	7d1b      	ldrb	r3, [r3, #20]
 800533e:	b25b      	sxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	da14      	bge.n	800536e <f_read+0x19a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534e:	429a      	cmp	r2, r3
 8005350:	d90d      	bls.n	800536e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	025b      	lsls	r3, r3, #9
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	18d0      	adds	r0, r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3330      	adds	r3, #48	; 0x30
 8005364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005368:	4619      	mov	r1, r3
 800536a:	f7fe f911 	bl	8003590 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005374:	e050      	b.n	8005418 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d02e      	beq.n	80053de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	7d1b      	ldrb	r3, [r3, #20]
 8005384:	b25b      	sxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	da18      	bge.n	80053bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	7858      	ldrb	r0, [r3, #1]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	2301      	movs	r3, #1
 800539a:	f7fe f839 	bl	8003410 <disk_write>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <f_read+0x1da>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	755a      	strb	r2, [r3, #21]
 80053aa:	2301      	movs	r3, #1
 80053ac:	e04d      	b.n	800544a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	7d1b      	ldrb	r3, [r3, #20]
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	7858      	ldrb	r0, [r3, #1]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053c6:	2301      	movs	r3, #1
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	f7fe f801 	bl	80033d0 <disk_read>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <f_read+0x20a>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	755a      	strb	r2, [r3, #21]
 80053da:	2301      	movs	r3, #1
 80053dc:	e035      	b.n	800544a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80053f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d901      	bls.n	80053fe <f_read+0x22a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540c:	4413      	add	r3, r2
 800540e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005410:	4619      	mov	r1, r3
 8005412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005414:	f7fe f8bc 	bl	8003590 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	4413      	add	r3, r2
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	619a      	str	r2, [r3, #24]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	441a      	add	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f47f af01 	bne.w	800524a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3738      	adds	r7, #56	; 0x38
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b08c      	sub	sp, #48	; 0x30
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f107 0210 	add.w	r2, r7, #16
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fc74 	bl	8004d60 <validate>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800547e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005482:	2b00      	cmp	r3, #0
 8005484:	d107      	bne.n	8005496 <f_write+0x44>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	7d5b      	ldrb	r3, [r3, #21]
 800548a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800548e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <f_write+0x4a>
 8005496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800549a:	e14b      	b.n	8005734 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	7d1b      	ldrb	r3, [r3, #20]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <f_write+0x5a>
 80054a8:	2307      	movs	r3, #7
 80054aa:	e143      	b.n	8005734 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	441a      	add	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f080 812d 	bcs.w	8005718 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80054c6:	e127      	b.n	8005718 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 80e3 	bne.w	800569c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	0a5b      	lsrs	r3, r3, #9
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	8952      	ldrh	r2, [r2, #10]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d143      	bne.n	8005574 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11a      	bne.n	8005536 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe fd25 	bl	8003f54 <create_chain>
 800550a:	62b8      	str	r0, [r7, #40]	; 0x28
 800550c:	e013      	b.n	8005536 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7fe fdb1 	bl	8004084 <clmt_clust>
 8005522:	62b8      	str	r0, [r7, #40]	; 0x28
 8005524:	e007      	b.n	8005536 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7fe fd10 	bl	8003f54 <create_chain>
 8005534:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80f2 	beq.w	8005722 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	2b01      	cmp	r3, #1
 8005542:	d104      	bne.n	800554e <f_write+0xfc>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2202      	movs	r2, #2
 8005548:	755a      	strb	r2, [r3, #21]
 800554a:	2302      	movs	r3, #2
 800554c:	e0f2      	b.n	8005734 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d104      	bne.n	8005560 <f_write+0x10e>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	755a      	strb	r2, [r3, #21]
 800555c:	2301      	movs	r3, #1
 800555e:	e0e9      	b.n	8005734 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d102      	bne.n	8005574 <f_write+0x122>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005572:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	7d1b      	ldrb	r3, [r3, #20]
 8005578:	b25b      	sxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	da18      	bge.n	80055b0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	7858      	ldrb	r0, [r3, #1]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	2301      	movs	r3, #1
 800558e:	f7fd ff3f 	bl	8003410 <disk_write>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <f_write+0x150>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	755a      	strb	r2, [r3, #21]
 800559e:	2301      	movs	r3, #1
 80055a0:	e0c8      	b.n	8005734 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7d1b      	ldrb	r3, [r3, #20]
 80055a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe fab3 	bl	8003b24 <clust2sect>
 80055be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <f_write+0x17e>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2202      	movs	r2, #2
 80055ca:	755a      	strb	r2, [r3, #21]
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0b1      	b.n	8005734 <f_write+0x2e2>
			sect += csect;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d03c      	beq.n	800565e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	4413      	add	r3, r2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	8952      	ldrh	r2, [r2, #10]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d905      	bls.n	80055fe <f_write+0x1ac>
					cc = fs->csize - csect;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	895b      	ldrh	r3, [r3, #10]
 80055f6:	461a      	mov	r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	7858      	ldrb	r0, [r3, #1]
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	f7fd ff02 	bl	8003410 <disk_write>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <f_write+0x1ca>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	755a      	strb	r2, [r3, #21]
 8005618:	2301      	movs	r3, #1
 800561a:	e08b      	b.n	8005734 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	429a      	cmp	r2, r3
 8005628:	d915      	bls.n	8005656 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	025b      	lsls	r3, r3, #9
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005642:	4619      	mov	r1, r3
 8005644:	f7fd ffa4 	bl	8003590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	7d1b      	ldrb	r3, [r3, #20]
 800564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	025b      	lsls	r3, r3, #9
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800565c:	e03f      	b.n	80056de <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	d016      	beq.n	8005696 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005670:	429a      	cmp	r2, r3
 8005672:	d210      	bcs.n	8005696 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	7858      	ldrb	r0, [r3, #1]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800567e:	2301      	movs	r3, #1
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	f7fd fea5 	bl	80033d0 <disk_read>
 8005686:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	755a      	strb	r2, [r3, #21]
 8005692:	2301      	movs	r3, #1
 8005694:	e04e      	b.n	8005734 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80056aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d901      	bls.n	80056b6 <f_write+0x264>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c4:	4413      	add	r3, r2
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd ff60 	bl	8003590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	7d1b      	ldrb	r3, [r3, #20]
 80056d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	4413      	add	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf38      	it	cc
 80056fe:	461a      	movcc	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	441a      	add	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f47f aed4 	bne.w	80054c8 <f_write+0x76>
 8005720:	e000      	b.n	8005724 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005722:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	7d1b      	ldrb	r3, [r3, #20]
 8005728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3730      	adds	r7, #48	; 0x30
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fb07 	bl	8004d60 <validate>
 8005752:	4603      	mov	r3, r0
 8005754:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d168      	bne.n	800582e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7d1b      	ldrb	r3, [r3, #20]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d062      	beq.n	800582e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7d1b      	ldrb	r3, [r3, #20]
 800576c:	b25b      	sxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	da15      	bge.n	800579e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7858      	ldrb	r0, [r3, #1]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	2301      	movs	r3, #1
 8005782:	f7fd fe45 	bl	8003410 <disk_write>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <f_sync+0x54>
 800578c:	2301      	movs	r3, #1
 800578e:	e04f      	b.n	8005830 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7d1b      	ldrb	r3, [r3, #20]
 8005794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005798:	b2da      	uxtb	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800579e:	f7fd fd77 	bl	8003290 <get_fattime>
 80057a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe f91d 	bl	80039ec <move_window>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d138      	bne.n	800582e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	330b      	adds	r3, #11
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	330b      	adds	r3, #11
 80057cc:	f042 0220 	orr.w	r2, r2, #32
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	461a      	mov	r2, r3
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f7fe fe2a 	bl	8004438 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f103 021c 	add.w	r2, r3, #28
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7fd fea1 	bl	8003538 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3316      	adds	r3, #22
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fe9b 	bl	8003538 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3312      	adds	r3, #18
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f7fd fe7a 	bl	8003502 <st_word>
					fs->wflag = 1;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2201      	movs	r2, #1
 8005812:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe f916 	bl	8003a48 <sync_fs>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7d1b      	ldrb	r3, [r3, #20]
 8005824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005828:	b2da      	uxtb	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff7b 	bl	800573c <f_sync>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d118      	bne.n	8005882 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f107 0208 	add.w	r2, r7, #8
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fa81 	bl	8004d60 <validate>
 800585e:	4603      	mov	r3, r0
 8005860:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10c      	bne.n	8005882 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe f819 	bl	80038a4 <dec_lock>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b090      	sub	sp, #64	; 0x40
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f107 0208 	add.w	r2, r7, #8
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fa5e 	bl	8004d60 <validate>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80058aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <f_lseek+0x2e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7d5b      	ldrb	r3, [r3, #21]
 80058b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80058ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <f_lseek+0x3c>
 80058c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058c6:	e1e6      	b.n	8005c96 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80d1 	beq.w	8005a74 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d15a      	bne.n	8005990 <f_lseek+0x104>
			tbl = fp->cltbl;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	627a      	str	r2, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	2302      	movs	r3, #2
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d03a      	beq.n	8005970 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	2300      	movs	r3, #0
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	3302      	adds	r3, #2
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	3301      	adds	r3, #1
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe f923 	bl	8003b62 <get_fat>
 800591c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	d804      	bhi.n	800592e <f_lseek+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	755a      	strb	r2, [r3, #21]
 800592a:	2302      	movs	r3, #2
 800592c:	e1b3      	b.n	8005c96 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d104      	bne.n	8005940 <f_lseek+0xb4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	755a      	strb	r2, [r3, #21]
 800593c:	2301      	movs	r3, #1
 800593e:	e1aa      	b.n	8005c96 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005946:	429a      	cmp	r2, r3
 8005948:	d0de      	beq.n	8005908 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800594a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	429a      	cmp	r2, r3
 8005950:	d809      	bhi.n	8005966 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	627a      	str	r2, [r7, #36]	; 0x24
 8005958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	627a      	str	r2, [r7, #36]	; 0x24
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596c:	429a      	cmp	r2, r3
 800596e:	d3c4      	bcc.n	80058fa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005976:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8005978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	429a      	cmp	r2, r3
 800597e:	d803      	bhi.n	8005988 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e184      	b.n	8005c92 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005988:	2311      	movs	r3, #17
 800598a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800598e:	e180      	b.n	8005c92 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d902      	bls.n	80059a0 <f_lseek+0x114>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8172 	beq.w	8005c92 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fe fb65 	bl	8004084 <clmt_clust>
 80059ba:	4602      	mov	r2, r0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f7fe f8ab 	bl	8003b24 <clust2sect>
 80059ce:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <f_lseek+0x154>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	755a      	strb	r2, [r3, #21]
 80059dc:	2302      	movs	r3, #2
 80059de:	e15a      	b.n	8005c96 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	0a5b      	lsrs	r3, r3, #9
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	8952      	ldrh	r2, [r2, #10]
 80059ea:	3a01      	subs	r2, #1
 80059ec:	4013      	ands	r3, r2
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8148 	beq.w	8005c92 <f_lseek+0x406>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	f000 8142 	beq.w	8005c92 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7d1b      	ldrb	r3, [r3, #20]
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da18      	bge.n	8005a4a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	7858      	ldrb	r0, [r3, #1]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	2301      	movs	r3, #1
 8005a28:	f7fd fcf2 	bl	8003410 <disk_write>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <f_lseek+0x1b0>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	755a      	strb	r2, [r3, #21]
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e12c      	b.n	8005c96 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	7d1b      	ldrb	r3, [r3, #20]
 8005a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	7858      	ldrb	r0, [r3, #1]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a54:	2301      	movs	r3, #1
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	f7fd fcba 	bl	80033d0 <disk_read>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <f_lseek+0x1e0>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	755a      	strb	r2, [r3, #21]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e114      	b.n	8005c96 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	621a      	str	r2, [r3, #32]
 8005a72:	e10e      	b.n	8005c92 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d908      	bls.n	8005a90 <f_lseek+0x204>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7d1b      	ldrb	r3, [r3, #20]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80a7 	beq.w	8005bf6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	895b      	ldrh	r3, [r3, #10]
 8005aac:	025b      	lsls	r3, r3, #9
 8005aae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01b      	beq.n	8005aee <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	1e59      	subs	r1, r3, #1
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d30f      	bcc.n	8005aee <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aec:	e022      	b.n	8005b34 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d119      	bne.n	8005b2e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fa28 	bl	8003f54 <create_chain>
 8005b04:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d104      	bne.n	8005b16 <f_lseek+0x28a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	755a      	strb	r2, [r3, #21]
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0bf      	b.n	8005c96 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d104      	bne.n	8005b28 <f_lseek+0x29c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	755a      	strb	r2, [r3, #21]
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0b6      	b.n	8005c96 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b32:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d05d      	beq.n	8005bf6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8005b3a:	e03a      	b.n	8005bb2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	7d1b      	ldrb	r3, [r3, #20]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe f9f7 	bl	8003f54 <create_chain>
 8005b66:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d108      	bne.n	8005b80 <f_lseek+0x2f4>
							ofs = 0; break;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	e022      	b.n	8005bba <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fd fff2 	bl	8003b62 <get_fat>
 8005b7e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d104      	bne.n	8005b92 <f_lseek+0x306>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	755a      	strb	r2, [r3, #21]
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e081      	b.n	8005c96 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d904      	bls.n	8005ba2 <f_lseek+0x316>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d304      	bcc.n	8005bac <f_lseek+0x320>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	755a      	strb	r2, [r3, #21]
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e074      	b.n	8005c96 <f_lseek+0x40a>
					fp->clust = clst;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d8c0      	bhi.n	8005b3c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd ffa5 	bl	8003b24 <clust2sect>
 8005bda:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <f_lseek+0x360>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	755a      	strb	r2, [r3, #21]
 8005be8:	2302      	movs	r3, #2
 8005bea:	e054      	b.n	8005c96 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	0a5b      	lsrs	r3, r3, #9
 8005bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf2:	4413      	add	r3, r2
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d90a      	bls.n	8005c18 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	7d1b      	ldrb	r3, [r3, #20]
 8005c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d036      	beq.n	8005c92 <f_lseek+0x406>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d031      	beq.n	8005c92 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7d1b      	ldrb	r3, [r3, #20]
 8005c32:	b25b      	sxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da18      	bge.n	8005c6a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	7858      	ldrb	r0, [r3, #1]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	2301      	movs	r3, #1
 8005c48:	f7fd fbe2 	bl	8003410 <disk_write>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <f_lseek+0x3d0>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	755a      	strb	r2, [r3, #21]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e01c      	b.n	8005c96 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7d1b      	ldrb	r3, [r3, #20]
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	7858      	ldrb	r0, [r3, #1]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c74:	2301      	movs	r3, #1
 8005c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c78:	f7fd fbaa 	bl	80033d0 <disk_read>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <f_lseek+0x400>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	755a      	strb	r2, [r3, #21]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e004      	b.n	8005c96 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c90:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005c92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3740      	adds	r7, #64	; 0x40
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b092      	sub	sp, #72	; 0x48
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005caa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005cae:	f107 030c 	add.w	r3, r7, #12
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fe07 	bl	80048c8 <find_volume>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005cc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8099 	bne.w	8005dfc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	3b02      	subs	r3, #2
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d804      	bhi.n	8005ce8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e089      	b.n	8005dfc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d128      	bne.n	8005d46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005cfc:	f107 0314 	add.w	r3, r7, #20
 8005d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd ff2d 	bl	8003b62 <get_fat>
 8005d08:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d103      	bne.n	8005d1a <f_getfree+0x7c>
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d18:	e063      	b.n	8005de2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d103      	bne.n	8005d28 <f_getfree+0x8a>
 8005d20:	2302      	movs	r3, #2
 8005d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d26:	e05c      	b.n	8005de2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <f_getfree+0x96>
 8005d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d30:	3301      	adds	r3, #1
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	3301      	adds	r3, #1
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d3db      	bcc.n	8005cfc <f_getfree+0x5e>
 8005d44:	e04d      	b.n	8005de2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	2300      	movs	r3, #0
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d113      	bne.n	8005d88 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f7fd fe3f 	bl	80039ec <move_window>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005d74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d131      	bne.n	8005de0 <f_getfree+0x142>
							p = fs->win;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	3330      	adds	r3, #48	; 0x30
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d10f      	bne.n	8005db0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d92:	f7fd fb7b 	bl	800348c <ld_word>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <f_getfree+0x104>
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	3301      	adds	r3, #1
 8005da0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	3302      	adds	r3, #2
 8005da6:	633b      	str	r3, [r7, #48]	; 0x30
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	3b02      	subs	r3, #2
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	e010      	b.n	8005dd2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db2:	f7fd fb83 	bl	80034bc <ld_dword>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <f_getfree+0x128>
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	3304      	adds	r3, #4
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1bd      	bne.n	8005d5a <f_getfree+0xbc>
 8005dde:	e000      	b.n	8005de2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005de0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	791a      	ldrb	r2, [r3, #4]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3748      	adds	r7, #72	; 0x48
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e1c:	e01b      	b.n	8005e56 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005e1e:	f107 0310 	add.w	r3, r7, #16
 8005e22:	f107 0114 	add.w	r1, r7, #20
 8005e26:	2201      	movs	r2, #1
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff f9d3 	bl	80051d4 <f_read>
		if (rc != 1) break;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d116      	bne.n	8005e62 <f_gets+0x5a>
		c = s[0];
 8005e34:	7d3b      	ldrb	r3, [r7, #20]
 8005e36:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b0d      	cmp	r3, #13
 8005e3c:	d100      	bne.n	8005e40 <f_gets+0x38>
 8005e3e:	e00a      	b.n	8005e56 <f_gets+0x4e>
		*p++ = c;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	61ba      	str	r2, [r7, #24]
 8005e46:	7dfa      	ldrb	r2, [r7, #23]
 8005e48:	701a      	strb	r2, [r3, #0]
		n++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d007      	beq.n	8005e66 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dbde      	blt.n	8005e1e <f_gets+0x16>
 8005e60:	e002      	b.n	8005e68 <f_gets+0x60>
		if (rc != 1) break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005e66:	bf00      	nop
	}
	*p = 0;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <f_gets+0x70>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	e000      	b.n	8005e7a <f_gets+0x72>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	2b0a      	cmp	r3, #10
 8005e92:	d103      	bne.n	8005e9c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005e94:	210d      	movs	r1, #13
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fff3 	bl	8005e82 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	db25      	blt.n	8005ef4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	60fa      	str	r2, [r7, #12]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b3c      	cmp	r3, #60	; 0x3c
 8005eba:	dd12      	ble.n	8005ee2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f103 010c 	add.w	r1, r3, #12
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f107 0308 	add.w	r3, r7, #8
 8005ecc:	f7ff fac1 	bl	8005452 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d101      	bne.n	8005edc <putc_bfd+0x5a>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e001      	b.n	8005ee0 <putc_bfd+0x5e>
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
 8005ef2:	e000      	b.n	8005ef6 <putc_bfd+0x74>
	if (i < 0) return;
 8005ef4:	bf00      	nop
}
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	db16      	blt.n	8005f3a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 010c 	add.w	r1, r3, #12
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	f7ff fa97 	bl	8005452 <f_write>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d102      	bne.n	8005f3a <putc_flush+0x3e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	e001      	b.n	8005f3e <putc_flush+0x42>
	return EOF;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b096      	sub	sp, #88	; 0x58
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff ffe0 	bl	8005f46 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005f86:	e009      	b.n	8005f9c <f_puts+0x2c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff73 	bl	8005e82 <putc_bfd>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f1      	bne.n	8005f88 <f_puts+0x18>
	return putc_flush(&pb);
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff ffa7 	bl	8005efc <putc_flush>
 8005fae:	4603      	mov	r3, r0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3758      	adds	r7, #88	; 0x58
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005fd0:	7a5b      	ldrb	r3, [r3, #9]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d131      	bne.n	800603c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005fda:	7a5b      	ldrb	r3, [r3, #9]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005fe8:	7a5b      	ldrb	r3, [r3, #9]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005ff6:	4b15      	ldr	r3, [pc, #84]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8005ff8:	7a5b      	ldrb	r3, [r3, #9]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8006000:	4413      	add	r3, r2
 8006002:	79fa      	ldrb	r2, [r7, #7]
 8006004:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8006008:	7a5b      	ldrb	r3, [r3, #9]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	b2d1      	uxtb	r1, r2
 8006010:	4a0e      	ldr	r2, [pc, #56]	; (800604c <FATFS_LinkDriverEx+0x94>)
 8006012:	7251      	strb	r1, [r2, #9]
 8006014:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006016:	7dbb      	ldrb	r3, [r7, #22]
 8006018:	3330      	adds	r3, #48	; 0x30
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3301      	adds	r3, #1
 8006024:	223a      	movs	r2, #58	; 0x3a
 8006026:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3302      	adds	r3, #2
 800602c:	222f      	movs	r2, #47	; 0x2f
 800602e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3303      	adds	r3, #3
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000700 	.word	0x20000700

08006050 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ffaa 	bl	8005fb8 <FATFS_LinkDriverEx>
 8006064:	4603      	mov	r3, r0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000020 	.word	0x20000020

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 fc8e 	bl	80069b0 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	08006d74 	.word	0x08006d74
 80060b8:	08006d74 	.word	0x08006d74
 80060bc:	08006d74 	.word	0x08006d74
 80060c0:	08006d78 	.word	0x08006d78

080060c4 <memcpy>:
 80060c4:	440a      	add	r2, r1
 80060c6:	4291      	cmp	r1, r2
 80060c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060cc:	d100      	bne.n	80060d0 <memcpy+0xc>
 80060ce:	4770      	bx	lr
 80060d0:	b510      	push	{r4, lr}
 80060d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060da:	4291      	cmp	r1, r2
 80060dc:	d1f9      	bne.n	80060d2 <memcpy+0xe>
 80060de:	bd10      	pop	{r4, pc}

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <siprintf>:
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b500      	push	{lr}
 80060f4:	b09c      	sub	sp, #112	; 0x70
 80060f6:	ab1d      	add	r3, sp, #116	; 0x74
 80060f8:	9002      	str	r0, [sp, #8]
 80060fa:	9006      	str	r0, [sp, #24]
 80060fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006100:	4809      	ldr	r0, [pc, #36]	; (8006128 <siprintf+0x38>)
 8006102:	9107      	str	r1, [sp, #28]
 8006104:	9104      	str	r1, [sp, #16]
 8006106:	4909      	ldr	r1, [pc, #36]	; (800612c <siprintf+0x3c>)
 8006108:	f853 2b04 	ldr.w	r2, [r3], #4
 800610c:	9105      	str	r1, [sp, #20]
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	a902      	add	r1, sp, #8
 8006114:	f000 f868 	bl	80061e8 <_svfiprintf_r>
 8006118:	9b02      	ldr	r3, [sp, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	b01c      	add	sp, #112	; 0x70
 8006120:	f85d eb04 	ldr.w	lr, [sp], #4
 8006124:	b003      	add	sp, #12
 8006126:	4770      	bx	lr
 8006128:	20000020 	.word	0x20000020
 800612c:	ffff0208 	.word	0xffff0208

08006130 <__ssputs_r>:
 8006130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	688e      	ldr	r6, [r1, #8]
 8006136:	429e      	cmp	r6, r3
 8006138:	4682      	mov	sl, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4690      	mov	r8, r2
 800613e:	461f      	mov	r7, r3
 8006140:	d838      	bhi.n	80061b4 <__ssputs_r+0x84>
 8006142:	898a      	ldrh	r2, [r1, #12]
 8006144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006148:	d032      	beq.n	80061b0 <__ssputs_r+0x80>
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	6909      	ldr	r1, [r1, #16]
 800614e:	eba5 0901 	sub.w	r9, r5, r1
 8006152:	6965      	ldr	r5, [r4, #20]
 8006154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800615c:	3301      	adds	r3, #1
 800615e:	444b      	add	r3, r9
 8006160:	106d      	asrs	r5, r5, #1
 8006162:	429d      	cmp	r5, r3
 8006164:	bf38      	it	cc
 8006166:	461d      	movcc	r5, r3
 8006168:	0553      	lsls	r3, r2, #21
 800616a:	d531      	bpl.n	80061d0 <__ssputs_r+0xa0>
 800616c:	4629      	mov	r1, r5
 800616e:	f000 fb55 	bl	800681c <_malloc_r>
 8006172:	4606      	mov	r6, r0
 8006174:	b950      	cbnz	r0, 800618c <__ssputs_r+0x5c>
 8006176:	230c      	movs	r3, #12
 8006178:	f8ca 3000 	str.w	r3, [sl]
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	6921      	ldr	r1, [r4, #16]
 800618e:	464a      	mov	r2, r9
 8006190:	f7ff ff98 	bl	80060c4 <memcpy>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800619a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619e:	81a3      	strh	r3, [r4, #12]
 80061a0:	6126      	str	r6, [r4, #16]
 80061a2:	6165      	str	r5, [r4, #20]
 80061a4:	444e      	add	r6, r9
 80061a6:	eba5 0509 	sub.w	r5, r5, r9
 80061aa:	6026      	str	r6, [r4, #0]
 80061ac:	60a5      	str	r5, [r4, #8]
 80061ae:	463e      	mov	r6, r7
 80061b0:	42be      	cmp	r6, r7
 80061b2:	d900      	bls.n	80061b6 <__ssputs_r+0x86>
 80061b4:	463e      	mov	r6, r7
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	4632      	mov	r2, r6
 80061ba:	4641      	mov	r1, r8
 80061bc:	f000 faa8 	bl	8006710 <memmove>
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	1b9b      	subs	r3, r3, r6
 80061c4:	60a3      	str	r3, [r4, #8]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	4433      	add	r3, r6
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	2000      	movs	r0, #0
 80061ce:	e7db      	b.n	8006188 <__ssputs_r+0x58>
 80061d0:	462a      	mov	r2, r5
 80061d2:	f000 fb97 	bl	8006904 <_realloc_r>
 80061d6:	4606      	mov	r6, r0
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1e1      	bne.n	80061a0 <__ssputs_r+0x70>
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	4650      	mov	r0, sl
 80061e0:	f000 fab0 	bl	8006744 <_free_r>
 80061e4:	e7c7      	b.n	8006176 <__ssputs_r+0x46>
	...

080061e8 <_svfiprintf_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	4698      	mov	r8, r3
 80061ee:	898b      	ldrh	r3, [r1, #12]
 80061f0:	061b      	lsls	r3, r3, #24
 80061f2:	b09d      	sub	sp, #116	; 0x74
 80061f4:	4607      	mov	r7, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	d50e      	bpl.n	800621a <_svfiprintf_r+0x32>
 80061fc:	690b      	ldr	r3, [r1, #16]
 80061fe:	b963      	cbnz	r3, 800621a <_svfiprintf_r+0x32>
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	f000 fb0b 	bl	800681c <_malloc_r>
 8006206:	6028      	str	r0, [r5, #0]
 8006208:	6128      	str	r0, [r5, #16]
 800620a:	b920      	cbnz	r0, 8006216 <_svfiprintf_r+0x2e>
 800620c:	230c      	movs	r3, #12
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e0d1      	b.n	80063ba <_svfiprintf_r+0x1d2>
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	616b      	str	r3, [r5, #20]
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	; 0x24
 800621e:	2320      	movs	r3, #32
 8006220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006224:	f8cd 800c 	str.w	r8, [sp, #12]
 8006228:	2330      	movs	r3, #48	; 0x30
 800622a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063d4 <_svfiprintf_r+0x1ec>
 800622e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006232:	f04f 0901 	mov.w	r9, #1
 8006236:	4623      	mov	r3, r4
 8006238:	469a      	mov	sl, r3
 800623a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800623e:	b10a      	cbz	r2, 8006244 <_svfiprintf_r+0x5c>
 8006240:	2a25      	cmp	r2, #37	; 0x25
 8006242:	d1f9      	bne.n	8006238 <_svfiprintf_r+0x50>
 8006244:	ebba 0b04 	subs.w	fp, sl, r4
 8006248:	d00b      	beq.n	8006262 <_svfiprintf_r+0x7a>
 800624a:	465b      	mov	r3, fp
 800624c:	4622      	mov	r2, r4
 800624e:	4629      	mov	r1, r5
 8006250:	4638      	mov	r0, r7
 8006252:	f7ff ff6d 	bl	8006130 <__ssputs_r>
 8006256:	3001      	adds	r0, #1
 8006258:	f000 80aa 	beq.w	80063b0 <_svfiprintf_r+0x1c8>
 800625c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800625e:	445a      	add	r2, fp
 8006260:	9209      	str	r2, [sp, #36]	; 0x24
 8006262:	f89a 3000 	ldrb.w	r3, [sl]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80a2 	beq.w	80063b0 <_svfiprintf_r+0x1c8>
 800626c:	2300      	movs	r3, #0
 800626e:	f04f 32ff 	mov.w	r2, #4294967295
 8006272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006276:	f10a 0a01 	add.w	sl, sl, #1
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006282:	931a      	str	r3, [sp, #104]	; 0x68
 8006284:	4654      	mov	r4, sl
 8006286:	2205      	movs	r2, #5
 8006288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628c:	4851      	ldr	r0, [pc, #324]	; (80063d4 <_svfiprintf_r+0x1ec>)
 800628e:	f7f9 ffaf 	bl	80001f0 <memchr>
 8006292:	9a04      	ldr	r2, [sp, #16]
 8006294:	b9d8      	cbnz	r0, 80062ce <_svfiprintf_r+0xe6>
 8006296:	06d0      	lsls	r0, r2, #27
 8006298:	bf44      	itt	mi
 800629a:	2320      	movmi	r3, #32
 800629c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a0:	0711      	lsls	r1, r2, #28
 80062a2:	bf44      	itt	mi
 80062a4:	232b      	movmi	r3, #43	; 0x2b
 80062a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062aa:	f89a 3000 	ldrb.w	r3, [sl]
 80062ae:	2b2a      	cmp	r3, #42	; 0x2a
 80062b0:	d015      	beq.n	80062de <_svfiprintf_r+0xf6>
 80062b2:	9a07      	ldr	r2, [sp, #28]
 80062b4:	4654      	mov	r4, sl
 80062b6:	2000      	movs	r0, #0
 80062b8:	f04f 0c0a 	mov.w	ip, #10
 80062bc:	4621      	mov	r1, r4
 80062be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c2:	3b30      	subs	r3, #48	; 0x30
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d94e      	bls.n	8006366 <_svfiprintf_r+0x17e>
 80062c8:	b1b0      	cbz	r0, 80062f8 <_svfiprintf_r+0x110>
 80062ca:	9207      	str	r2, [sp, #28]
 80062cc:	e014      	b.n	80062f8 <_svfiprintf_r+0x110>
 80062ce:	eba0 0308 	sub.w	r3, r0, r8
 80062d2:	fa09 f303 	lsl.w	r3, r9, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	46a2      	mov	sl, r4
 80062dc:	e7d2      	b.n	8006284 <_svfiprintf_r+0x9c>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	1d19      	adds	r1, r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfbb      	ittet	lt
 80062ea:	425b      	neglt	r3, r3
 80062ec:	f042 0202 	orrlt.w	r2, r2, #2
 80062f0:	9307      	strge	r3, [sp, #28]
 80062f2:	9307      	strlt	r3, [sp, #28]
 80062f4:	bfb8      	it	lt
 80062f6:	9204      	strlt	r2, [sp, #16]
 80062f8:	7823      	ldrb	r3, [r4, #0]
 80062fa:	2b2e      	cmp	r3, #46	; 0x2e
 80062fc:	d10c      	bne.n	8006318 <_svfiprintf_r+0x130>
 80062fe:	7863      	ldrb	r3, [r4, #1]
 8006300:	2b2a      	cmp	r3, #42	; 0x2a
 8006302:	d135      	bne.n	8006370 <_svfiprintf_r+0x188>
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	9203      	str	r2, [sp, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfb8      	it	lt
 8006310:	f04f 33ff 	movlt.w	r3, #4294967295
 8006314:	3402      	adds	r4, #2
 8006316:	9305      	str	r3, [sp, #20]
 8006318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063e4 <_svfiprintf_r+0x1fc>
 800631c:	7821      	ldrb	r1, [r4, #0]
 800631e:	2203      	movs	r2, #3
 8006320:	4650      	mov	r0, sl
 8006322:	f7f9 ff65 	bl	80001f0 <memchr>
 8006326:	b140      	cbz	r0, 800633a <_svfiprintf_r+0x152>
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	eba0 000a 	sub.w	r0, r0, sl
 800632e:	fa03 f000 	lsl.w	r0, r3, r0
 8006332:	9b04      	ldr	r3, [sp, #16]
 8006334:	4303      	orrs	r3, r0
 8006336:	3401      	adds	r4, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800633e:	4826      	ldr	r0, [pc, #152]	; (80063d8 <_svfiprintf_r+0x1f0>)
 8006340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006344:	2206      	movs	r2, #6
 8006346:	f7f9 ff53 	bl	80001f0 <memchr>
 800634a:	2800      	cmp	r0, #0
 800634c:	d038      	beq.n	80063c0 <_svfiprintf_r+0x1d8>
 800634e:	4b23      	ldr	r3, [pc, #140]	; (80063dc <_svfiprintf_r+0x1f4>)
 8006350:	bb1b      	cbnz	r3, 800639a <_svfiprintf_r+0x1b2>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	3307      	adds	r3, #7
 8006356:	f023 0307 	bic.w	r3, r3, #7
 800635a:	3308      	adds	r3, #8
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006360:	4433      	add	r3, r6
 8006362:	9309      	str	r3, [sp, #36]	; 0x24
 8006364:	e767      	b.n	8006236 <_svfiprintf_r+0x4e>
 8006366:	fb0c 3202 	mla	r2, ip, r2, r3
 800636a:	460c      	mov	r4, r1
 800636c:	2001      	movs	r0, #1
 800636e:	e7a5      	b.n	80062bc <_svfiprintf_r+0xd4>
 8006370:	2300      	movs	r3, #0
 8006372:	3401      	adds	r4, #1
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	4619      	mov	r1, r3
 8006378:	f04f 0c0a 	mov.w	ip, #10
 800637c:	4620      	mov	r0, r4
 800637e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006382:	3a30      	subs	r2, #48	; 0x30
 8006384:	2a09      	cmp	r2, #9
 8006386:	d903      	bls.n	8006390 <_svfiprintf_r+0x1a8>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0c5      	beq.n	8006318 <_svfiprintf_r+0x130>
 800638c:	9105      	str	r1, [sp, #20]
 800638e:	e7c3      	b.n	8006318 <_svfiprintf_r+0x130>
 8006390:	fb0c 2101 	mla	r1, ip, r1, r2
 8006394:	4604      	mov	r4, r0
 8006396:	2301      	movs	r3, #1
 8006398:	e7f0      	b.n	800637c <_svfiprintf_r+0x194>
 800639a:	ab03      	add	r3, sp, #12
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	462a      	mov	r2, r5
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <_svfiprintf_r+0x1f8>)
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	4638      	mov	r0, r7
 80063a6:	f3af 8000 	nop.w
 80063aa:	1c42      	adds	r2, r0, #1
 80063ac:	4606      	mov	r6, r0
 80063ae:	d1d6      	bne.n	800635e <_svfiprintf_r+0x176>
 80063b0:	89ab      	ldrh	r3, [r5, #12]
 80063b2:	065b      	lsls	r3, r3, #25
 80063b4:	f53f af2c 	bmi.w	8006210 <_svfiprintf_r+0x28>
 80063b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ba:	b01d      	add	sp, #116	; 0x74
 80063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c0:	ab03      	add	r3, sp, #12
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	462a      	mov	r2, r5
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <_svfiprintf_r+0x1f8>)
 80063c8:	a904      	add	r1, sp, #16
 80063ca:	4638      	mov	r0, r7
 80063cc:	f000 f87a 	bl	80064c4 <_printf_i>
 80063d0:	e7eb      	b.n	80063aa <_svfiprintf_r+0x1c2>
 80063d2:	bf00      	nop
 80063d4:	08006d38 	.word	0x08006d38
 80063d8:	08006d42 	.word	0x08006d42
 80063dc:	00000000 	.word	0x00000000
 80063e0:	08006131 	.word	0x08006131
 80063e4:	08006d3e 	.word	0x08006d3e

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006434:	1e13      	subs	r3, r2, #0
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	68e5      	ldr	r5, [r4, #12]
 8006452:	6832      	ldr	r2, [r6, #0]
 8006454:	f003 0306 	and.w	r3, r3, #6
 8006458:	2b04      	cmp	r3, #4
 800645a:	bf08      	it	eq
 800645c:	1aad      	subeq	r5, r5, r2
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	; 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064cc:	2f78      	cmp	r7, #120	; 0x78
 80064ce:	4691      	mov	r9, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	469a      	mov	sl, r3
 80064d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d8 	beq.w	8006696 <_printf_i+0x1d2>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80a3 	beq.w	8006632 <_printf_i+0x16e>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	; (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	0800667d 	.word	0x0800667d
 8006534:	080065a1 	.word	0x080065a1
 8006538:	0800665f 	.word	0x0800665f
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	0800669f 	.word	0x0800669f
 8006548:	080064ed 	.word	0x080064ed
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006667 	.word	0x08006667
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e0a3      	b.n	80066b8 <_printf_i+0x1f4>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	6829      	ldr	r1, [r5, #0]
 8006574:	0606      	lsls	r6, r0, #24
 8006576:	f101 0304 	add.w	r3, r1, #4
 800657a:	d50a      	bpl.n	8006592 <_printf_i+0xce>
 800657c:	680e      	ldr	r6, [r1, #0]
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	2e00      	cmp	r6, #0
 8006582:	da03      	bge.n	800658c <_printf_i+0xc8>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	4276      	negs	r6, r6
 8006588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658c:	485e      	ldr	r0, [pc, #376]	; (8006708 <_printf_i+0x244>)
 800658e:	230a      	movs	r3, #10
 8006590:	e019      	b.n	80065c6 <_printf_i+0x102>
 8006592:	680e      	ldr	r6, [r1, #0]
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800659a:	bf18      	it	ne
 800659c:	b236      	sxthne	r6, r6
 800659e:	e7ef      	b.n	8006580 <_printf_i+0xbc>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	1d19      	adds	r1, r3, #4
 80065a6:	6029      	str	r1, [r5, #0]
 80065a8:	0601      	lsls	r1, r0, #24
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0xec>
 80065ac:	681e      	ldr	r6, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0xf2>
 80065b0:	0646      	lsls	r6, r0, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0xe8>
 80065b4:	881e      	ldrh	r6, [r3, #0]
 80065b6:	4854      	ldr	r0, [pc, #336]	; (8006708 <_printf_i+0x244>)
 80065b8:	2f6f      	cmp	r7, #111	; 0x6f
 80065ba:	bf0c      	ite	eq
 80065bc:	2308      	moveq	r3, #8
 80065be:	230a      	movne	r3, #10
 80065c0:	2100      	movs	r1, #0
 80065c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c6:	6865      	ldr	r5, [r4, #4]
 80065c8:	60a5      	str	r5, [r4, #8]
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	bfa2      	ittt	ge
 80065ce:	6821      	ldrge	r1, [r4, #0]
 80065d0:	f021 0104 	bicge.w	r1, r1, #4
 80065d4:	6021      	strge	r1, [r4, #0]
 80065d6:	b90e      	cbnz	r6, 80065dc <_printf_i+0x118>
 80065d8:	2d00      	cmp	r5, #0
 80065da:	d04d      	beq.n	8006678 <_printf_i+0x1b4>
 80065dc:	4615      	mov	r5, r2
 80065de:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e2:	fb03 6711 	mls	r7, r3, r1, r6
 80065e6:	5dc7      	ldrb	r7, [r0, r7]
 80065e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ec:	4637      	mov	r7, r6
 80065ee:	42bb      	cmp	r3, r7
 80065f0:	460e      	mov	r6, r1
 80065f2:	d9f4      	bls.n	80065de <_printf_i+0x11a>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d10b      	bne.n	8006610 <_printf_i+0x14c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07de      	lsls	r6, r3, #31
 80065fc:	d508      	bpl.n	8006610 <_printf_i+0x14c>
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	4299      	cmp	r1, r3
 8006604:	bfde      	ittt	le
 8006606:	2330      	movle	r3, #48	; 0x30
 8006608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800660c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006610:	1b52      	subs	r2, r2, r5
 8006612:	6122      	str	r2, [r4, #16]
 8006614:	f8cd a000 	str.w	sl, [sp]
 8006618:	464b      	mov	r3, r9
 800661a:	aa03      	add	r2, sp, #12
 800661c:	4621      	mov	r1, r4
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff fee2 	bl	80063e8 <_printf_common>
 8006624:	3001      	adds	r0, #1
 8006626:	d14c      	bne.n	80066c2 <_printf_i+0x1fe>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b004      	add	sp, #16
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	4835      	ldr	r0, [pc, #212]	; (8006708 <_printf_i+0x244>)
 8006634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006638:	6829      	ldr	r1, [r5, #0]
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006640:	6029      	str	r1, [r5, #0]
 8006642:	061d      	lsls	r5, r3, #24
 8006644:	d514      	bpl.n	8006670 <_printf_i+0x1ac>
 8006646:	07df      	lsls	r7, r3, #31
 8006648:	bf44      	itt	mi
 800664a:	f043 0320 	orrmi.w	r3, r3, #32
 800664e:	6023      	strmi	r3, [r4, #0]
 8006650:	b91e      	cbnz	r6, 800665a <_printf_i+0x196>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f023 0320 	bic.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	2310      	movs	r3, #16
 800665c:	e7b0      	b.n	80065c0 <_printf_i+0xfc>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f043 0320 	orr.w	r3, r3, #32
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	2378      	movs	r3, #120	; 0x78
 8006668:	4828      	ldr	r0, [pc, #160]	; (800670c <_printf_i+0x248>)
 800666a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666e:	e7e3      	b.n	8006638 <_printf_i+0x174>
 8006670:	0659      	lsls	r1, r3, #25
 8006672:	bf48      	it	mi
 8006674:	b2b6      	uxthmi	r6, r6
 8006676:	e7e6      	b.n	8006646 <_printf_i+0x182>
 8006678:	4615      	mov	r5, r2
 800667a:	e7bb      	b.n	80065f4 <_printf_i+0x130>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	6826      	ldr	r6, [r4, #0]
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	1d18      	adds	r0, r3, #4
 8006684:	6028      	str	r0, [r5, #0]
 8006686:	0635      	lsls	r5, r6, #24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	d501      	bpl.n	8006690 <_printf_i+0x1cc>
 800668c:	6019      	str	r1, [r3, #0]
 800668e:	e002      	b.n	8006696 <_printf_i+0x1d2>
 8006690:	0670      	lsls	r0, r6, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0x1c8>
 8006694:	8019      	strh	r1, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	4615      	mov	r5, r2
 800669c:	e7ba      	b.n	8006614 <_printf_i+0x150>
 800669e:	682b      	ldr	r3, [r5, #0]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	2100      	movs	r1, #0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 fda0 	bl	80001f0 <memchr>
 80066b0:	b108      	cbz	r0, 80066b6 <_printf_i+0x1f2>
 80066b2:	1b40      	subs	r0, r0, r5
 80066b4:	6060      	str	r0, [r4, #4]
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c0:	e7a8      	b.n	8006614 <_printf_i+0x150>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d0ab      	beq.n	8006628 <_printf_i+0x164>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	d413      	bmi.n	80066fe <_printf_i+0x23a>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e7a4      	b.n	800662c <_printf_i+0x168>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4632      	mov	r2, r6
 80066e6:	4649      	mov	r1, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	47d0      	blx	sl
 80066ec:	3001      	adds	r0, #1
 80066ee:	d09b      	beq.n	8006628 <_printf_i+0x164>
 80066f0:	3501      	adds	r5, #1
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	9903      	ldr	r1, [sp, #12]
 80066f6:	1a5b      	subs	r3, r3, r1
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dcf2      	bgt.n	80066e2 <_printf_i+0x21e>
 80066fc:	e7eb      	b.n	80066d6 <_printf_i+0x212>
 80066fe:	2500      	movs	r5, #0
 8006700:	f104 0619 	add.w	r6, r4, #25
 8006704:	e7f5      	b.n	80066f2 <_printf_i+0x22e>
 8006706:	bf00      	nop
 8006708:	08006d49 	.word	0x08006d49
 800670c:	08006d5a 	.word	0x08006d5a

08006710 <memmove>:
 8006710:	4288      	cmp	r0, r1
 8006712:	b510      	push	{r4, lr}
 8006714:	eb01 0402 	add.w	r4, r1, r2
 8006718:	d902      	bls.n	8006720 <memmove+0x10>
 800671a:	4284      	cmp	r4, r0
 800671c:	4623      	mov	r3, r4
 800671e:	d807      	bhi.n	8006730 <memmove+0x20>
 8006720:	1e43      	subs	r3, r0, #1
 8006722:	42a1      	cmp	r1, r4
 8006724:	d008      	beq.n	8006738 <memmove+0x28>
 8006726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800672a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800672e:	e7f8      	b.n	8006722 <memmove+0x12>
 8006730:	4402      	add	r2, r0
 8006732:	4601      	mov	r1, r0
 8006734:	428a      	cmp	r2, r1
 8006736:	d100      	bne.n	800673a <memmove+0x2a>
 8006738:	bd10      	pop	{r4, pc}
 800673a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800673e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006742:	e7f7      	b.n	8006734 <memmove+0x24>

08006744 <_free_r>:
 8006744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006746:	2900      	cmp	r1, #0
 8006748:	d044      	beq.n	80067d4 <_free_r+0x90>
 800674a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674e:	9001      	str	r0, [sp, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f1a1 0404 	sub.w	r4, r1, #4
 8006756:	bfb8      	it	lt
 8006758:	18e4      	addlt	r4, r4, r3
 800675a:	f000 f913 	bl	8006984 <__malloc_lock>
 800675e:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <_free_r+0x94>)
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	b933      	cbnz	r3, 8006774 <_free_r+0x30>
 8006766:	6063      	str	r3, [r4, #4]
 8006768:	6014      	str	r4, [r2, #0]
 800676a:	b003      	add	sp, #12
 800676c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006770:	f000 b90e 	b.w	8006990 <__malloc_unlock>
 8006774:	42a3      	cmp	r3, r4
 8006776:	d908      	bls.n	800678a <_free_r+0x46>
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1961      	adds	r1, r4, r5
 800677c:	428b      	cmp	r3, r1
 800677e:	bf01      	itttt	eq
 8006780:	6819      	ldreq	r1, [r3, #0]
 8006782:	685b      	ldreq	r3, [r3, #4]
 8006784:	1949      	addeq	r1, r1, r5
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	e7ed      	b.n	8006766 <_free_r+0x22>
 800678a:	461a      	mov	r2, r3
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	b10b      	cbz	r3, 8006794 <_free_r+0x50>
 8006790:	42a3      	cmp	r3, r4
 8006792:	d9fa      	bls.n	800678a <_free_r+0x46>
 8006794:	6811      	ldr	r1, [r2, #0]
 8006796:	1855      	adds	r5, r2, r1
 8006798:	42a5      	cmp	r5, r4
 800679a:	d10b      	bne.n	80067b4 <_free_r+0x70>
 800679c:	6824      	ldr	r4, [r4, #0]
 800679e:	4421      	add	r1, r4
 80067a0:	1854      	adds	r4, r2, r1
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	d1e0      	bne.n	800676a <_free_r+0x26>
 80067a8:	681c      	ldr	r4, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	6053      	str	r3, [r2, #4]
 80067ae:	4421      	add	r1, r4
 80067b0:	6011      	str	r1, [r2, #0]
 80067b2:	e7da      	b.n	800676a <_free_r+0x26>
 80067b4:	d902      	bls.n	80067bc <_free_r+0x78>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6003      	str	r3, [r0, #0]
 80067ba:	e7d6      	b.n	800676a <_free_r+0x26>
 80067bc:	6825      	ldr	r5, [r4, #0]
 80067be:	1961      	adds	r1, r4, r5
 80067c0:	428b      	cmp	r3, r1
 80067c2:	bf04      	itt	eq
 80067c4:	6819      	ldreq	r1, [r3, #0]
 80067c6:	685b      	ldreq	r3, [r3, #4]
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	bf04      	itt	eq
 80067cc:	1949      	addeq	r1, r1, r5
 80067ce:	6021      	streq	r1, [r4, #0]
 80067d0:	6054      	str	r4, [r2, #4]
 80067d2:	e7ca      	b.n	800676a <_free_r+0x26>
 80067d4:	b003      	add	sp, #12
 80067d6:	bd30      	pop	{r4, r5, pc}
 80067d8:	2000070c 	.word	0x2000070c

080067dc <sbrk_aligned>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4e0e      	ldr	r6, [pc, #56]	; (8006818 <sbrk_aligned+0x3c>)
 80067e0:	460c      	mov	r4, r1
 80067e2:	6831      	ldr	r1, [r6, #0]
 80067e4:	4605      	mov	r5, r0
 80067e6:	b911      	cbnz	r1, 80067ee <sbrk_aligned+0x12>
 80067e8:	f000 f8bc 	bl	8006964 <_sbrk_r>
 80067ec:	6030      	str	r0, [r6, #0]
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 f8b7 	bl	8006964 <_sbrk_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d00a      	beq.n	8006810 <sbrk_aligned+0x34>
 80067fa:	1cc4      	adds	r4, r0, #3
 80067fc:	f024 0403 	bic.w	r4, r4, #3
 8006800:	42a0      	cmp	r0, r4
 8006802:	d007      	beq.n	8006814 <sbrk_aligned+0x38>
 8006804:	1a21      	subs	r1, r4, r0
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f8ac 	bl	8006964 <_sbrk_r>
 800680c:	3001      	adds	r0, #1
 800680e:	d101      	bne.n	8006814 <sbrk_aligned+0x38>
 8006810:	f04f 34ff 	mov.w	r4, #4294967295
 8006814:	4620      	mov	r0, r4
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	20000710 	.word	0x20000710

0800681c <_malloc_r>:
 800681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	1ccd      	adds	r5, r1, #3
 8006822:	f025 0503 	bic.w	r5, r5, #3
 8006826:	3508      	adds	r5, #8
 8006828:	2d0c      	cmp	r5, #12
 800682a:	bf38      	it	cc
 800682c:	250c      	movcc	r5, #12
 800682e:	2d00      	cmp	r5, #0
 8006830:	4607      	mov	r7, r0
 8006832:	db01      	blt.n	8006838 <_malloc_r+0x1c>
 8006834:	42a9      	cmp	r1, r5
 8006836:	d905      	bls.n	8006844 <_malloc_r+0x28>
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	2600      	movs	r6, #0
 800683e:	4630      	mov	r0, r6
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006844:	4e2e      	ldr	r6, [pc, #184]	; (8006900 <_malloc_r+0xe4>)
 8006846:	f000 f89d 	bl	8006984 <__malloc_lock>
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	461c      	mov	r4, r3
 800684e:	bb34      	cbnz	r4, 800689e <_malloc_r+0x82>
 8006850:	4629      	mov	r1, r5
 8006852:	4638      	mov	r0, r7
 8006854:	f7ff ffc2 	bl	80067dc <sbrk_aligned>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	4604      	mov	r4, r0
 800685c:	d14d      	bne.n	80068fa <_malloc_r+0xde>
 800685e:	6834      	ldr	r4, [r6, #0]
 8006860:	4626      	mov	r6, r4
 8006862:	2e00      	cmp	r6, #0
 8006864:	d140      	bne.n	80068e8 <_malloc_r+0xcc>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	4631      	mov	r1, r6
 800686a:	4638      	mov	r0, r7
 800686c:	eb04 0803 	add.w	r8, r4, r3
 8006870:	f000 f878 	bl	8006964 <_sbrk_r>
 8006874:	4580      	cmp	r8, r0
 8006876:	d13a      	bne.n	80068ee <_malloc_r+0xd2>
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	3503      	adds	r5, #3
 800687c:	1a6d      	subs	r5, r5, r1
 800687e:	f025 0503 	bic.w	r5, r5, #3
 8006882:	3508      	adds	r5, #8
 8006884:	2d0c      	cmp	r5, #12
 8006886:	bf38      	it	cc
 8006888:	250c      	movcc	r5, #12
 800688a:	4629      	mov	r1, r5
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff ffa5 	bl	80067dc <sbrk_aligned>
 8006892:	3001      	adds	r0, #1
 8006894:	d02b      	beq.n	80068ee <_malloc_r+0xd2>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	442b      	add	r3, r5
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	e00e      	b.n	80068bc <_malloc_r+0xa0>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	1b52      	subs	r2, r2, r5
 80068a2:	d41e      	bmi.n	80068e2 <_malloc_r+0xc6>
 80068a4:	2a0b      	cmp	r2, #11
 80068a6:	d916      	bls.n	80068d6 <_malloc_r+0xba>
 80068a8:	1961      	adds	r1, r4, r5
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	6025      	str	r5, [r4, #0]
 80068ae:	bf18      	it	ne
 80068b0:	6059      	strne	r1, [r3, #4]
 80068b2:	6863      	ldr	r3, [r4, #4]
 80068b4:	bf08      	it	eq
 80068b6:	6031      	streq	r1, [r6, #0]
 80068b8:	5162      	str	r2, [r4, r5]
 80068ba:	604b      	str	r3, [r1, #4]
 80068bc:	4638      	mov	r0, r7
 80068be:	f104 060b 	add.w	r6, r4, #11
 80068c2:	f000 f865 	bl	8006990 <__malloc_unlock>
 80068c6:	f026 0607 	bic.w	r6, r6, #7
 80068ca:	1d23      	adds	r3, r4, #4
 80068cc:	1af2      	subs	r2, r6, r3
 80068ce:	d0b6      	beq.n	800683e <_malloc_r+0x22>
 80068d0:	1b9b      	subs	r3, r3, r6
 80068d2:	50a3      	str	r3, [r4, r2]
 80068d4:	e7b3      	b.n	800683e <_malloc_r+0x22>
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	42a3      	cmp	r3, r4
 80068da:	bf0c      	ite	eq
 80068dc:	6032      	streq	r2, [r6, #0]
 80068de:	605a      	strne	r2, [r3, #4]
 80068e0:	e7ec      	b.n	80068bc <_malloc_r+0xa0>
 80068e2:	4623      	mov	r3, r4
 80068e4:	6864      	ldr	r4, [r4, #4]
 80068e6:	e7b2      	b.n	800684e <_malloc_r+0x32>
 80068e8:	4634      	mov	r4, r6
 80068ea:	6876      	ldr	r6, [r6, #4]
 80068ec:	e7b9      	b.n	8006862 <_malloc_r+0x46>
 80068ee:	230c      	movs	r3, #12
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4638      	mov	r0, r7
 80068f4:	f000 f84c 	bl	8006990 <__malloc_unlock>
 80068f8:	e7a1      	b.n	800683e <_malloc_r+0x22>
 80068fa:	6025      	str	r5, [r4, #0]
 80068fc:	e7de      	b.n	80068bc <_malloc_r+0xa0>
 80068fe:	bf00      	nop
 8006900:	2000070c 	.word	0x2000070c

08006904 <_realloc_r>:
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	4680      	mov	r8, r0
 800690a:	4614      	mov	r4, r2
 800690c:	460e      	mov	r6, r1
 800690e:	b921      	cbnz	r1, 800691a <_realloc_r+0x16>
 8006910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	4611      	mov	r1, r2
 8006916:	f7ff bf81 	b.w	800681c <_malloc_r>
 800691a:	b92a      	cbnz	r2, 8006928 <_realloc_r+0x24>
 800691c:	f7ff ff12 	bl	8006744 <_free_r>
 8006920:	4625      	mov	r5, r4
 8006922:	4628      	mov	r0, r5
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	f000 f838 	bl	800699c <_malloc_usable_size_r>
 800692c:	4284      	cmp	r4, r0
 800692e:	4607      	mov	r7, r0
 8006930:	d802      	bhi.n	8006938 <_realloc_r+0x34>
 8006932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006936:	d812      	bhi.n	800695e <_realloc_r+0x5a>
 8006938:	4621      	mov	r1, r4
 800693a:	4640      	mov	r0, r8
 800693c:	f7ff ff6e 	bl	800681c <_malloc_r>
 8006940:	4605      	mov	r5, r0
 8006942:	2800      	cmp	r0, #0
 8006944:	d0ed      	beq.n	8006922 <_realloc_r+0x1e>
 8006946:	42bc      	cmp	r4, r7
 8006948:	4622      	mov	r2, r4
 800694a:	4631      	mov	r1, r6
 800694c:	bf28      	it	cs
 800694e:	463a      	movcs	r2, r7
 8006950:	f7ff fbb8 	bl	80060c4 <memcpy>
 8006954:	4631      	mov	r1, r6
 8006956:	4640      	mov	r0, r8
 8006958:	f7ff fef4 	bl	8006744 <_free_r>
 800695c:	e7e1      	b.n	8006922 <_realloc_r+0x1e>
 800695e:	4635      	mov	r5, r6
 8006960:	e7df      	b.n	8006922 <_realloc_r+0x1e>
	...

08006964 <_sbrk_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d06      	ldr	r5, [pc, #24]	; (8006980 <_sbrk_r+0x1c>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	f7fa fdbe 	bl	80014f0 <_sbrk>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_sbrk_r+0x1a>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_sbrk_r+0x1a>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20000714 	.word	0x20000714

08006984 <__malloc_lock>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__malloc_lock+0x8>)
 8006986:	f000 b811 	b.w	80069ac <__retarget_lock_acquire_recursive>
 800698a:	bf00      	nop
 800698c:	20000718 	.word	0x20000718

08006990 <__malloc_unlock>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__malloc_unlock+0x8>)
 8006992:	f000 b80c 	b.w	80069ae <__retarget_lock_release_recursive>
 8006996:	bf00      	nop
 8006998:	20000718 	.word	0x20000718

0800699c <_malloc_usable_size_r>:
 800699c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a0:	1f18      	subs	r0, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfbc      	itt	lt
 80069a6:	580b      	ldrlt	r3, [r1, r0]
 80069a8:	18c0      	addlt	r0, r0, r3
 80069aa:	4770      	bx	lr

080069ac <__retarget_lock_acquire_recursive>:
 80069ac:	4770      	bx	lr

080069ae <__retarget_lock_release_recursive>:
 80069ae:	4770      	bx	lr

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr
