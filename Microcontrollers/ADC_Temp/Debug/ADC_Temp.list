
ADC_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  08008f70  08008f70  00018f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a19c  0800a19c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a4  0800a1a4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001e8  0800a394  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800a394  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d202  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e07  00000000  00000000  0002d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fd8  00000000  00000000  000308b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed66  00000000  00000000  00048890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009496e  00000000  00000000  000575f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebf64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  000ebfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f58 	.word	0x08008f58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008f58 	.word	0x08008f58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fe89 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f85f 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f967 	bl	80012e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101a:	f000 f8bb 	bl	8001194 <MX_ADC1_Init>
  MX_I2C1_Init();
 800101e:	f000 f90b 	bl	8001238 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001022:	f000 f937 	bl	8001294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001026:	f000 f98d 	bl	8001344 <SSD1306_Init>
  SSD1306_Clear();
 800102a:	f000 fbb0 	bl	800178e <SSD1306_Clear>
  SSD1306_GotoXY(35, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	2023      	movs	r0, #35	; 0x23
 8001032:	f000 faf1 	bl	8001618 <SSD1306_GotoXY>
  SSD1306_Puts("TEMP", &Font_11x18, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	4920      	ldr	r1, [pc, #128]	; (80010bc <main+0xb4>)
 800103a:	4821      	ldr	r0, [pc, #132]	; (80010c0 <main+0xb8>)
 800103c:	f000 fb82 	bl	8001744 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001040:	f000 fa44 	bl	80014cc <SSD1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 8001044:	481f      	ldr	r0, [pc, #124]	; (80010c4 <main+0xbc>)
 8001046:	f000 ff47 	bl	8001ed8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,20);
 800104a:	2114      	movs	r1, #20
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <main+0xbc>)
 800104e:	f000 fff7 	bl	8002040 <HAL_ADC_PollForConversion>

	  float temperature = HAL_ADC_GetValue(&hadc1);
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <main+0xbc>)
 8001054:	f001 f87f 	bl	8002156 <HAL_ADC_GetValue>
 8001058:	ee07 0a90 	vmov	s15, r0
 800105c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001060:	edc7 7a03 	vstr	s15, [r7, #12]
	  // maths here
	  char snum[10];  // Ensure the buffer is large enough to hold the formatted string
	  snprintf(snum, sizeof(snum), "%.2f ", temperature); // Format the float to a string with 2 decimal places
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fa77 	bl	8000558 <__aeabi_f2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4638      	mov	r0, r7
 8001070:	e9cd 2300 	strd	r2, r3, [sp]
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <main+0xc0>)
 8001076:	210a      	movs	r1, #10
 8001078:	f004 f948 	bl	800530c <sniprintf>

	 SSD1306_GotoXY(20, 20);
 800107c:	2114      	movs	r1, #20
 800107e:	2014      	movs	r0, #20
 8001080:	f000 faca 	bl	8001618 <SSD1306_GotoXY>
	 SSD1306_Puts (snum, &Font_11x18, 1);
 8001084:	463b      	mov	r3, r7
 8001086:	2201      	movs	r2, #1
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <main+0xb4>)
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fb5a 	bl	8001744 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 8001090:	f000 fa1c 	bl	80014cc <SSD1306_UpdateScreen>
	 HAL_UART_Transmit(&huart1, snum, 6, 1000);
 8001094:	4639      	mov	r1, r7
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	2206      	movs	r2, #6
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <main+0xc4>)
 800109e:	f002 ff0e 	bl	8003ebe <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1, "\n", 1, 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	2201      	movs	r2, #1
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <main+0xc8>)
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <main+0xc4>)
 80010ac:	f002 ff07 	bl	8003ebe <HAL_UART_Transmit>
	 HAL_Delay (500);
 80010b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b4:	f000 fea8 	bl	8001e08 <HAL_Delay>
  {
 80010b8:	e7c4      	b.n	8001044 <main+0x3c>
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000
 80010c0:	08008f70 	.word	0x08008f70
 80010c4:	20000204 	.word	0x20000204
 80010c8:	08008f78 	.word	0x08008f78
 80010cc:	200002a0 	.word	0x200002a0
 80010d0:	08008f80 	.word	0x08008f80

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	; 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fa8a 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <SystemClock_Config+0xb8>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <SystemClock_Config+0xb8>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <SystemClock_Config+0xb8>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <SystemClock_Config+0xbc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <SystemClock_Config+0xbc>)
 8001122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <SystemClock_Config+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fa13 	bl	8003574 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001154:	f000 f8f0 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fc76 	bl	8003a64 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800117e:	f000 f8db 	bl	8001338 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	; 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_ADC1_Init+0x98>)
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <MX_ADC1_Init+0x9c>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_ADC1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_ADC1_Init+0x98>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC1_Init+0x98>)
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <MX_ADC1_Init+0xa0>)
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_ADC1_Init+0x98>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC1_Init+0x98>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_ADC1_Init+0x98>)
 80011f4:	f000 fe2c 	bl	8001e50 <HAL_ADC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 f89b 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001202:	2309      	movs	r3, #9
 8001204:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_ADC1_Init+0x98>)
 8001214:	f000 ffac 	bl	8002170 <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800121e:	f000 f88b 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204
 8001230:	40012000 	.word	0x40012000
 8001234:	0f000001 	.word	0x0f000001

08001238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_I2C1_Init+0x50>)
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <MX_I2C1_Init+0x54>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_I2C1_Init+0x50>)
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <MX_I2C1_Init+0x58>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_I2C1_Init+0x50>)
 8001256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_I2C1_Init+0x50>)
 8001276:	f001 fc03 	bl	8002a80 <HAL_I2C_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001280:	f000 f85a 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000024c 	.word	0x2000024c
 800128c:	40005400 	.word	0x40005400
 8001290:	00061a80 	.word	0x00061a80

08001294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART1_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012cc:	f002 fdaa 	bl	8003e24 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d6:	f000 f82f 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002a0 	.word	0x200002a0
 80012e4:	40011000 	.word	0x40011000

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_GPIO_Init+0x4c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_GPIO_Init+0x4c>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_GPIO_Init+0x4c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_GPIO_Init+0x4c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <MX_GPIO_Init+0x4c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_GPIO_Init+0x4c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800134a:	f000 fa29 	bl	80017a0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800134e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001352:	2201      	movs	r2, #1
 8001354:	2178      	movs	r1, #120	; 0x78
 8001356:	485b      	ldr	r0, [pc, #364]	; (80014c4 <SSD1306_Init+0x180>)
 8001358:	f001 fdd4 	bl	8002f04 <HAL_I2C_IsDeviceReady>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001362:	2300      	movs	r3, #0
 8001364:	e0a9      	b.n	80014ba <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001366:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800136a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800136c:	e002      	b.n	8001374 <SSD1306_Init+0x30>
		p--;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3b01      	subs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800137a:	22ae      	movs	r2, #174	; 0xae
 800137c:	2100      	movs	r1, #0
 800137e:	2078      	movs	r0, #120	; 0x78
 8001380:	f000 fa8a 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	2078      	movs	r0, #120	; 0x78
 800138a:	f000 fa85 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800138e:	2210      	movs	r2, #16
 8001390:	2100      	movs	r1, #0
 8001392:	2078      	movs	r0, #120	; 0x78
 8001394:	f000 fa80 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001398:	22b0      	movs	r2, #176	; 0xb0
 800139a:	2100      	movs	r1, #0
 800139c:	2078      	movs	r0, #120	; 0x78
 800139e:	f000 fa7b 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013a2:	22c8      	movs	r2, #200	; 0xc8
 80013a4:	2100      	movs	r1, #0
 80013a6:	2078      	movs	r0, #120	; 0x78
 80013a8:	f000 fa76 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2078      	movs	r0, #120	; 0x78
 80013b2:	f000 fa71 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013b6:	2210      	movs	r2, #16
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fa6c 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	2100      	movs	r1, #0
 80013c4:	2078      	movs	r0, #120	; 0x78
 80013c6:	f000 fa67 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013ca:	2281      	movs	r2, #129	; 0x81
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	; 0x78
 80013d0:	f000 fa62 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	; 0x78
 80013da:	f000 fa5d 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013de:	22a1      	movs	r2, #161	; 0xa1
 80013e0:	2100      	movs	r1, #0
 80013e2:	2078      	movs	r0, #120	; 0x78
 80013e4:	f000 fa58 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013e8:	22a6      	movs	r2, #166	; 0xa6
 80013ea:	2100      	movs	r1, #0
 80013ec:	2078      	movs	r0, #120	; 0x78
 80013ee:	f000 fa53 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013f2:	22a8      	movs	r2, #168	; 0xa8
 80013f4:	2100      	movs	r1, #0
 80013f6:	2078      	movs	r0, #120	; 0x78
 80013f8:	f000 fa4e 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013fc:	223f      	movs	r2, #63	; 0x3f
 80013fe:	2100      	movs	r1, #0
 8001400:	2078      	movs	r0, #120	; 0x78
 8001402:	f000 fa49 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001406:	22a4      	movs	r2, #164	; 0xa4
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	; 0x78
 800140c:	f000 fa44 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001410:	22d3      	movs	r2, #211	; 0xd3
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	; 0x78
 8001416:	f000 fa3f 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	; 0x78
 8001420:	f000 fa3a 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001424:	22d5      	movs	r2, #213	; 0xd5
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 fa35 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800142e:	22f0      	movs	r2, #240	; 0xf0
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	; 0x78
 8001434:	f000 fa30 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001438:	22d9      	movs	r2, #217	; 0xd9
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 fa2b 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001442:	2222      	movs	r2, #34	; 0x22
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	; 0x78
 8001448:	f000 fa26 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800144c:	22da      	movs	r2, #218	; 0xda
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	; 0x78
 8001452:	f000 fa21 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001456:	2212      	movs	r2, #18
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 fa1c 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001460:	22db      	movs	r2, #219	; 0xdb
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	; 0x78
 8001466:	f000 fa17 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800146a:	2220      	movs	r2, #32
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	; 0x78
 8001470:	f000 fa12 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001474:	228d      	movs	r2, #141	; 0x8d
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f000 fa0d 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800147e:	2214      	movs	r2, #20
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	; 0x78
 8001484:	f000 fa08 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001488:	22af      	movs	r2, #175	; 0xaf
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f000 fa03 	bl	8001898 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001492:	222e      	movs	r2, #46	; 0x2e
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f000 f9fe 	bl	8001898 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f843 	bl	8001528 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80014a2:	f000 f813 	bl	80014cc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SSD1306_Init+0x184>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SSD1306_Init+0x184>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SSD1306_Init+0x184>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000024c 	.word	0x2000024c
 80014c8:	200006e4 	.word	0x200006e4

080014cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e01d      	b.n	8001514 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3b50      	subs	r3, #80	; 0x50
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 f9d8 	bl	8001898 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 f9d3 	bl	8001898 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014f2:	2210      	movs	r2, #16
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 f9ce 	bl	8001898 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	01db      	lsls	r3, r3, #7
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <SSD1306_UpdateScreen+0x58>)
 8001502:	441a      	add	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	2078      	movs	r0, #120	; 0x78
 800150a:	f000 f95f 	bl	80017cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	3301      	adds	r3, #1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b07      	cmp	r3, #7
 8001518:	d9de      	bls.n	80014d8 <SSD1306_UpdateScreen+0xc>
	}
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200002e4 	.word	0x200002e4

08001528 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <SSD1306_Fill+0x14>
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <SSD1306_Fill+0x16>
 800153c:	23ff      	movs	r3, #255	; 0xff
 800153e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001542:	4619      	mov	r1, r3
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <SSD1306_Fill+0x2c>)
 8001546:	f003 f859 	bl	80045fc <memset>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002e4 	.word	0x200002e4

08001558 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	460b      	mov	r3, r1
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	70fb      	strb	r3, [r7, #3]
	if (
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	2b7f      	cmp	r3, #127	; 0x7f
 800156e:	d848      	bhi.n	8001602 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	2b3f      	cmp	r3, #63	; 0x3f
 8001574:	d845      	bhi.n	8001602 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <SSD1306_DrawPixel+0xb8>)
 8001578:	791b      	ldrb	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d11a      	bne.n	80015c8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	b298      	uxth	r0, r3
 800159a:	4603      	mov	r3, r0
 800159c:	01db      	lsls	r3, r3, #7
 800159e:	4413      	add	r3, r2
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <SSD1306_DrawPixel+0xbc>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b259      	sxtb	r1, r3
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	4603      	mov	r3, r0
 80015bc:	01db      	lsls	r3, r3, #7
 80015be:	4413      	add	r3, r2
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <SSD1306_DrawPixel+0xbc>)
 80015c4:	54d1      	strb	r1, [r2, r3]
 80015c6:	e01d      	b.n	8001604 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	b298      	uxth	r0, r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4413      	add	r3, r2
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <SSD1306_DrawPixel+0xbc>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4013      	ands	r3, r2
 80015f0:	b259      	sxtb	r1, r3
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	4603      	mov	r3, r0
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	4413      	add	r3, r2
 80015fa:	b2c9      	uxtb	r1, r1
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SSD1306_DrawPixel+0xbc>)
 80015fe:	54d1      	strb	r1, [r2, r3]
 8001600:	e000      	b.n	8001604 <SSD1306_DrawPixel+0xac>
		return;
 8001602:	bf00      	nop
	}
}
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200006e4 	.word	0x200006e4
 8001614:	200002e4 	.word	0x200002e4

08001618 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4613      	mov	r3, r2
 8001626:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SSD1306_GotoXY+0x28>)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <SSD1306_GotoXY+0x28>)
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	8053      	strh	r3, [r2, #2]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	200006e4 	.word	0x200006e4

08001644 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <SSD1306_Putc+0xfc>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
	if (
 8001660:	2b7f      	cmp	r3, #127	; 0x7f
 8001662:	dc07      	bgt.n	8001674 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <SSD1306_Putc+0xfc>)
 8001666:	885b      	ldrh	r3, [r3, #2]
 8001668:	461a      	mov	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001670:	2b3f      	cmp	r3, #63	; 0x3f
 8001672:	dd01      	ble.n	8001678 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001674:	2300      	movs	r3, #0
 8001676:	e05e      	b.n	8001736 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e04b      	b.n	8001716 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3b20      	subs	r3, #32
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	7849      	ldrb	r1, [r1, #1]
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4619      	mov	r1, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	440b      	add	r3, r1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e030      	b.n	8001704 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d010      	beq.n	80016d4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <SSD1306_Putc+0xfc>)
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b298      	uxth	r0, r3
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <SSD1306_Putc+0xfc>)
 80016c0:	885a      	ldrh	r2, [r3, #2]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff ff43 	bl	8001558 <SSD1306_DrawPixel>
 80016d2:	e014      	b.n	80016fe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <SSD1306_Putc+0xfc>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b298      	uxth	r0, r3
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <SSD1306_Putc+0xfc>)
 80016e2:	885a      	ldrh	r2, [r3, #2]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	b299      	uxth	r1, r3
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	f7ff ff2d 	bl	8001558 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	3301      	adds	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4293      	cmp	r3, r2
 800170e:	d3c8      	bcc.n	80016a2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4293      	cmp	r3, r2
 8001720:	d3ad      	bcc.n	800167e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SSD1306_Putc+0xfc>)
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <SSD1306_Putc+0xfc>)
 8001732:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200006e4 	.word	0x200006e4

08001744 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001752:	e012      	b.n	800177a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff71 	bl	8001644 <SSD1306_Putc>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d002      	beq.n	8001774 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	e008      	b.n	8001786 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e8      	bne.n	8001754 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fec8 	bl	8001528 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001798:	f7ff fe98 	bl	80014cc <SSD1306_UpdateScreen>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <ssd1306_I2C_Init+0x28>)
 80017a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017aa:	e002      	b.n	80017b2 <ssd1306_I2C_Init+0x12>
		p--;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	0003d090 	.word	0x0003d090

080017cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b0c7      	sub	sp, #284	; 0x11c
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80017da:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80017de:	600a      	str	r2, [r1, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80017ea:	4622      	mov	r2, r4
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017f2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80017f6:	4602      	mov	r2, r0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001802:	460a      	mov	r2, r1
 8001804:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001806:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800180a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800180e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001812:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001820:	e015      	b.n	800184e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001822:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001826:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800182a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	441a      	add	r2, r3
 8001832:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001836:	3301      	adds	r3, #1
 8001838:	7811      	ldrb	r1, [r2, #0]
 800183a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800183e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001842:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001844:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001848:	3301      	adds	r3, #1
 800184a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800184e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001852:	b29b      	uxth	r3, r3
 8001854:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001858:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d8df      	bhi.n	8001822 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001866:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b299      	uxth	r1, r3
 800186e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001872:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	b29b      	uxth	r3, r3
 800187c:	f107 020c 	add.w	r2, r7, #12
 8001880:	200a      	movs	r0, #10
 8001882:	9000      	str	r0, [sp, #0]
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <ssd1306_I2C_WriteMulti+0xc8>)
 8001886:	f001 fa3f 	bl	8002d08 <HAL_I2C_Master_Transmit>
}
 800188a:	bf00      	nop
 800188c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	2000024c 	.word	0x2000024c

08001898 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af02      	add	r7, sp, #8
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	460b      	mov	r3, r1
 80018a4:	71bb      	strb	r3, [r7, #6]
 80018a6:	4613      	mov	r3, r2
 80018a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018ae:	797b      	ldrb	r3, [r7, #5]
 80018b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	230a      	movs	r3, #10
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2302      	movs	r3, #2
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <ssd1306_I2C_Write+0x38>)
 80018c2:	f001 fa21 	bl	8002d08 <HAL_I2C_Master_Transmit>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000024c 	.word	0x2000024c

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ADC_MspInit+0x7c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d127      	bne.n	8001996 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_ADC_MspInit+0x84>)
 8001992:	f000 fef1 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HAL_I2C_MspInit+0x8c>)
 8001a06:	f000 feb7 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_UART_MspInit+0x84>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12c      	bne.n	8001ab8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_UART_MspInit+0x8c>)
 8001ab4:	f000 fe60 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40011000 	.word	0x40011000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f956 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3a:	f002 fd35 	bl	80045a8 <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b62:	e7fe      	b.n	8001b62 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
  }

  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e009      	b.n	8001bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf1      	blt.n	8001bb0 <_write+0x12>
  }
  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_close>:

int _close(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_isatty>:

int _isatty(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f002 fc9a 	bl	80045a8 <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20010000 	.word	0x20010000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	200006ec 	.word	0x200006ec
 8001ca8:	20000708 	.word	0x20000708

08001cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cd6:	490e      	ldr	r1, [pc, #56]	; (8001d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cec:	4c0b      	ldr	r4, [pc, #44]	; (8001d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cfa:	f7ff ffd7 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f002 fc59 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d02:	f7ff f981 	bl	8001008 <main>
  bx  lr    
 8001d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d14:	0800a1ac 	.word	0x0800a1ac
  ldr r2, =_sbss
 8001d18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d1c:	20000704 	.word	0x20000704

08001d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC_IRQHandler>
	...

08001d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_Init+0x40>)
 8001d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_Init+0x40>)
 8001d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_Init+0x40>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 fcdf 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fdbc 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fce9 	bl	800275e <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 fcbf 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	2000000c 	.word	0x2000000c

08001dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x20>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_IncTick+0x24>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000010 	.word	0x20000010
 8001dec:	200006f0 	.word	0x200006f0

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	200006f0 	.word	0x200006f0

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff ffee 	bl	8001df0 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_Delay+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e2e:	bf00      	nop
 8001e30:	f7ff ffde 	bl	8001df0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
  {
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000010 	.word	0x20000010

08001e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e033      	b.n	8001ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fd58 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa86 	bl	80023b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ebe:	e001      	b.n	8001ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Start+0x1a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e097      	b.n	8002022 <HAL_ADC_Start+0x14a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d018      	beq.n	8001f3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_ADC_Start+0x158>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a45      	ldr	r2, [pc, #276]	; (8002034 <HAL_ADC_Start+0x15c>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9a      	lsrs	r2, r3, #18
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d15f      	bne.n	8002008 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f86:	d106      	bne.n	8001f96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f023 0206 	bic.w	r2, r3, #6
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_ADC_Start+0x160>)
 8001fa6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d129      	bne.n	8002020 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e020      	b.n	8002020 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_ADC_Start+0x164>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d11b      	bne.n	8002020 <HAL_ADC_Start+0x148>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d114      	bne.n	8002020 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e00b      	b.n	8002020 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0210 	orr.w	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	431bde83 	.word	0x431bde83
 8002038:	40012300 	.word	0x40012300
 800203c:	40012000 	.word	0x40012000

08002040 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d113      	bne.n	8002086 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d10b      	bne.n	8002086 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e063      	b.n	800214e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002086:	f7ff feb3 	bl	8001df0 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208c:	e021      	b.n	80020d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d01d      	beq.n	80020d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_ADC_PollForConversion+0x6c>
 800209c:	f7ff fea8 	bl	8001df0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d212      	bcs.n	80020d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d00b      	beq.n	80020d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f043 0204 	orr.w	r2, r3, #4
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03d      	b.n	800214e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d1d6      	bne.n	800208e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0212 	mvn.w	r2, #18
 80020e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d123      	bne.n	800214c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11f      	bne.n	800214c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e105      	b.n	8002398 <HAL_ADC_ConfigChannel+0x228>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b09      	cmp	r3, #9
 800219a:	d925      	bls.n	80021e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4403      	add	r3, r0
 80021da:	3b1e      	subs	r3, #30
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e022      	b.n	800222e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	2207      	movs	r2, #7
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4403      	add	r3, r0
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d824      	bhi.n	8002280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b05      	subs	r3, #5
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b05      	subs	r3, #5
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
 800227e:	e04c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b23      	subs	r3, #35	; 0x23
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b23      	subs	r3, #35	; 0x23
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
 80022d0:	e023      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b41      	subs	r3, #65	; 0x41
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	400a      	ands	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b41      	subs	r3, #65	; 0x41
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_ADC_ConfigChannel+0x234>)
 800231c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d109      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d105      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d123      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d003      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x1e6>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b11      	cmp	r3, #17
 8002354:	d11b      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_ADC_ConfigChannel+0x23c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_ADC_ConfigChannel+0x240>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	20000008 	.word	0x20000008
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <ADC_Init+0x1f0>)
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <ADC_Init+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800247c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e00f      	b.n	80024b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0202 	bic.w	r2, r2, #2
 80024c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	005a      	lsls	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	035a      	lsls	r2, r3, #13
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e007      	b.n	8002528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	3b01      	subs	r3, #1
 8002544:	051a      	lsls	r2, r3, #20
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256a:	025a      	lsls	r2, r3, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	029a      	lsls	r2, r3, #10
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012300 	.word	0x40012300
 80025a8:	0f000001 	.word	0x0f000001

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff47 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff5c 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffb0 	bl	80026cc <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a46      	ldr	r2, [pc, #280]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x304>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e12b      	b.n	8002cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe ff80 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f001 f976 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d807      	bhi.n	8002b04 <HAL_I2C_Init+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_I2C_Init+0x278>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e006      	b.n	8002b12 <HAL_I2C_Init+0x92>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_I2C_Init+0x27c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_I2C_Init+0x280>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <HAL_I2C_Init+0xd4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	e009      	b.n	8002b68 <HAL_I2C_Init+0xe8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_I2C_Init+0x284>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d819      	bhi.n	8002bbc <HAL_I2C_Init+0x13c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_I2C_Init+0x138>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e59      	subs	r1, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	e051      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e04f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_I2C_Init+0x168>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_I2C_Init+0x18e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x196>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_I2C_Init+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e58      	subs	r0, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6809      	ldr	r1, [r1, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6911      	ldr	r1, [r2, #16]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	000186a0 	.word	0x000186a0
 8002cf8:	001e847f 	.word	0x001e847f
 8002cfc:	003d08ff 	.word	0x003d08ff
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff f868 	bl	8001df0 <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 80e0 	bne.w	8002ef0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	4970      	ldr	r1, [pc, #448]	; (8002efc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fa92 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0d3      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x50>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0cc      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d007      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dc0:	8979      	ldrh	r1, [r7, #10]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a3a      	ldr	r2, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f9ca 	bl	8003160 <I2C_MasterRequestWrite>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08d      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dec:	e066      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fb0c 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06b      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d11b      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x188>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	6a39      	ldr	r1, [r7, #32]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fafc 	bl	8003492 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01a      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d194      	bne.n	8002dee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	00100002 	.word	0x00100002
 8002f00:	ffff0000 	.word	0xffff0000

08002f04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7fe ff6c 	bl	8001df0 <HAL_GetTick>
 8002f18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	f040 8111 	bne.w	800314e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	4988      	ldr	r1, [pc, #544]	; (8003158 <HAL_I2C_IsDeviceReady+0x254>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f994 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	e104      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2C_IsDeviceReady+0x50>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0fd      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d007      	beq.n	8002f7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2224      	movs	r2, #36	; 0x24
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a70      	ldr	r2, [pc, #448]	; (800315c <HAL_I2C_IsDeviceReady+0x258>)
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f952 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd4:	d103      	bne.n	8002fde <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0b6      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ff0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fefd 	bl	8001df0 <HAL_GetTick>
 8002ff6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003026:	e025      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003028:	f7fe fee2 	bl	8001df0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <HAL_I2C_IsDeviceReady+0x13a>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	22a0      	movs	r2, #160	; 0xa0
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2ba0      	cmp	r3, #160	; 0xa0
 800307e:	d005      	beq.n	800308c <HAL_I2C_IsDeviceReady+0x188>
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_I2C_IsDeviceReady+0x188>
 8003086:	7dbb      	ldrb	r3, [r7, #22]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0cd      	beq.n	8003028 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d129      	bne.n	80030f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	4921      	ldr	r1, [pc, #132]	; (8003158 <HAL_I2C_IsDeviceReady+0x254>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8c6 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e036      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e02c      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	490f      	ldr	r1, [pc, #60]	; (8003158 <HAL_I2C_IsDeviceReady+0x254>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8a2 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e012      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3301      	adds	r3, #1
 800312e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	f4ff af32 	bcc.w	8002f9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00100002 	.word	0x00100002
 800315c:	ffff0000 	.word	0xffff0000

08003160 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d006      	beq.n	800318a <I2C_MasterRequestWrite+0x2a>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d003      	beq.n	800318a <I2C_MasterRequestWrite+0x2a>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003188:	d108      	bne.n	800319c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e00b      	b.n	80031b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2b12      	cmp	r3, #18
 80031a2:	d107      	bne.n	80031b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f84f 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	d103      	bne.n	80031e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e035      	b.n	8003254 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f0:	d108      	bne.n	8003204 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	e01b      	b.n	800323c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003204:	897b      	ldrh	r3, [r7, #10]
 8003206:	11db      	asrs	r3, r3, #7
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0306 	and.w	r3, r3, #6
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f063 030f 	orn	r3, r3, #15
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <I2C_MasterRequestWrite+0xfc>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f875 	bl	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e010      	b.n	8003254 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <I2C_MasterRequestWrite+0x100>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f865 	bl	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	00010008 	.word	0x00010008
 8003260:	00010002 	.word	0x00010002

08003264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	e025      	b.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d021      	beq.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe fdb7 	bl	8001df0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e023      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10d      	bne.n	80032e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	e00c      	b.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	429a      	cmp	r2, r3
 8003306:	d0b6      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003320:	e051      	b.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d123      	bne.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800334a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e046      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d021      	beq.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe fd35 	bl	8001df0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d116      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e020      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10c      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e00b      	b.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d18d      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341c:	e02d      	b.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f878 	bl	8003514 <I2C_IsAcknowledgeFailed>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e02d      	b.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fcdb 	bl	8001df0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d1ca      	bne.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800349e:	e02d      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f837 	bl	8003514 <I2C_IsAcknowledgeFailed>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e02d      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d021      	beq.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fc9a 	bl	8001df0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d1ca      	bne.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d11b      	bne.n	8003564 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003534:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e267      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d075      	beq.n	800367e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d00c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d112      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b7e      	ldr	r3, [pc, #504]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05b      	beq.n	800367c <HAL_RCC_OscConfig+0x108>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d157      	bne.n	800367c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e242      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x74>
 80035da:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a75      	ldr	r2, [pc, #468]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x98>
 80035f2:	4b70      	ldr	r3, [pc, #448]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6f      	ldr	r2, [pc, #444]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6c      	ldr	r2, [pc, #432]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 800360c:	4b69      	ldr	r3, [pc, #420]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a68      	ldr	r2, [pc, #416]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a65      	ldr	r2, [pc, #404]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fbe0 	bl	8001df0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fbdc 	bl	8001df0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e207      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0xc0>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fbcc 	bl	8001df0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fbc8 	bl	8001df0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1f3      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0xe8>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1c7      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4937      	ldr	r1, [pc, #220]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e03a      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x244>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe fb81 	bl	8001df0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe fb7d 	bl	8001df0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1a8      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4925      	ldr	r1, [pc, #148]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_OscConfig+0x244>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fb60 	bl	8001df0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003734:	f7fe fb5c 	bl	8001df0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e187      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d036      	beq.n	80037cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x248>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fb40 	bl	8001df0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe fb3c 	bl	8001df0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e167      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_OscConfig+0x240>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x200>
 8003792:	e01b      	b.n	80037cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x248>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fe fb29 	bl	8001df0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	e00e      	b.n	80037c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fe fb25 	bl	8001df0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d907      	bls.n	80037c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e150      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470000 	.word	0x42470000
 80037bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	4b88      	ldr	r3, [pc, #544]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ea      	bne.n	80037a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8097 	beq.w	8003908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037de:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b77      	ldr	r3, [pc, #476]	; (80039e8 <HAL_RCC_OscConfig+0x474>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b74      	ldr	r3, [pc, #464]	; (80039e8 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a73      	ldr	r2, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x474>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fe fae5 	bl	8001df0 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe fae1 	bl	8001df0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e10c      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_OscConfig+0x474>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x2ea>
 8003850:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	e01c      	b.n	8003898 <HAL_RCC_OscConfig+0x324>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x30c>
 8003866:	4b5f      	ldr	r3, [pc, #380]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5b      	ldr	r2, [pc, #364]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x324>
 8003880:	4b58      	ldr	r3, [pc, #352]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a57      	ldr	r2, [pc, #348]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a54      	ldr	r2, [pc, #336]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0304 	bic.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe faa6 	bl	8001df0 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fe faa2 	bl	8001df0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0cb      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038be:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ee      	beq.n	80038a8 <HAL_RCC_OscConfig+0x334>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7fe fa90 	bl	8001df0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fe fa8c 	bl	8001df0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0b5      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ee      	bne.n	80038d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fc:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a1 	beq.w	8003a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003912:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b08      	cmp	r3, #8
 800391c:	d05c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d141      	bne.n	80039aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_OscConfig+0x478>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fa60 	bl	8001df0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fa5c 	bl	8001df0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e087      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	491b      	ldr	r1, [pc, #108]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x478>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe fa35 	bl	8001df0 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe fa31 	bl	8001df0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e05c      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x416>
 80039a8:	e054      	b.n	8003a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCC_OscConfig+0x478>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe fa1e 	bl	8001df0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fa1a 	bl	8001df0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e045      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x444>
 80039d6:	e03d      	b.n	8003a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e038      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40007000 	.word	0x40007000
 80039ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x4ec>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d028      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d121      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d11a      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0cc      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d90c      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b8      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d044      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d119      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e067      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4934      	ldr	r1, [pc, #208]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fe f94c 	bl	8001df0 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fe f948 	bl	8001df0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e04f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d20c      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e032      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4916      	ldr	r1, [pc, #88]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f821 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	490a      	ldr	r1, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	5ccb      	ldrb	r3, [r1, r3]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe f8ac 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023c00 	.word	0x40023c00
 8003c20:	40023800 	.word	0x40023800
 8003c24:	08009ce0 	.word	0x08009ce0
 8003c28:	20000008 	.word	0x20000008
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b090      	sub	sp, #64	; 0x40
 8003c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c40:	2300      	movs	r3, #0
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d00d      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x40>
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	f200 80a1 	bhi.w	8003d9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c62:	e09b      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c68:	e09b      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c6a:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6e:	e098      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c70:	4b4f      	ldr	r3, [pc, #316]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c7a:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	627a      	str	r2, [r7, #36]	; 0x24
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c9c:	fb03 f201 	mul.w	r2, r3, r1
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	fb00 f303 	mul.w	r3, r0, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003caa:	fba0 1202 	umull	r1, r2, r0, r2
 8003cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb6:	4413      	add	r3, r2
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	61fa      	str	r2, [r7, #28]
 8003cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cca:	f7fc ffe5 	bl	8000c98 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd6:	e053      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	2200      	movs	r2, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	617a      	str	r2, [r7, #20]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cea:	f04f 0b00 	mov.w	fp, #0
 8003cee:	4652      	mov	r2, sl
 8003cf0:	465b      	mov	r3, fp
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	0159      	lsls	r1, r3, #5
 8003cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d00:	0150      	lsls	r0, r2, #5
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	ebb2 080a 	subs.w	r8, r2, sl
 8003d0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d22:	ebb2 0408 	subs.w	r4, r2, r8
 8003d26:	eb63 0509 	sbc.w	r5, r3, r9
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	00eb      	lsls	r3, r5, #3
 8003d34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d38:	00e2      	lsls	r2, r4, #3
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	eb14 030a 	adds.w	r3, r4, sl
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	eb45 030b 	adc.w	r3, r5, fp
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d56:	4629      	mov	r1, r5
 8003d58:	028b      	lsls	r3, r1, #10
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d60:	4621      	mov	r1, r4
 8003d62:	028a      	lsls	r2, r1, #10
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	60fa      	str	r2, [r7, #12]
 8003d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d74:	f7fc ff90 	bl	8000c98 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3740      	adds	r7, #64	; 0x40
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	017d7840 	.word	0x017d7840

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd8:	f7ff fff0 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0a9b      	lsrs	r3, r3, #10
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	08009cf0 	.word	0x08009cf0

08003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e00:	f7ff ffdc 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0b5b      	lsrs	r3, r3, #13
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4903      	ldr	r1, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08009cf0 	.word	0x08009cf0

08003e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03f      	b.n	8003eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fdf6 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f929 	bl	80040c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	; 0x28
 8003ec2:	af02      	add	r7, sp, #8
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d17c      	bne.n	8003fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_Transmit+0x2c>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e075      	b.n	8003fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Transmit+0x3e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e06e      	b.n	8003fda <HAL_UART_Transmit+0x11c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2221      	movs	r2, #33	; 0x21
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f12:	f7fd ff6d 	bl	8001df0 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d108      	bne.n	8003f40 <HAL_UART_Transmit+0x82>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e003      	b.n	8003f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f50:	e02a      	b.n	8003fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f840 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e036      	b.n	8003fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3302      	adds	r3, #2
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e007      	b.n	8003f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1cf      	bne.n	8003f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f810 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b090      	sub	sp, #64	; 0x40
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	e050      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d04c      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0x30>
 8004002:	f7fd fef5 	bl	8001df0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400e:	429a      	cmp	r2, r3
 8004010:	d241      	bcs.n	8004096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004032:	637a      	str	r2, [r7, #52]	; 0x34
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	613b      	str	r3, [r7, #16]
   return(result);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004066:	623a      	str	r2, [r7, #32]
 8004068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	61bb      	str	r3, [r7, #24]
   return(result);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e00f      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d09f      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3740      	adds	r7, #64	; 0x40
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b0c0      	sub	sp, #256	; 0x100
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	ea40 0301 	orr.w	r3, r0, r1
 80040e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	431a      	orrs	r2, r3
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004118:	f021 010c 	bic.w	r1, r1, #12
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004126:	430b      	orrs	r3, r1
 8004128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	6999      	ldr	r1, [r3, #24]
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	ea40 0301 	orr.w	r3, r0, r1
 8004146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b8f      	ldr	r3, [pc, #572]	; (800438c <UART_SetConfig+0x2cc>)
 8004150:	429a      	cmp	r2, r3
 8004152:	d005      	beq.n	8004160 <UART_SetConfig+0xa0>
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <UART_SetConfig+0x2d0>)
 800415c:	429a      	cmp	r2, r3
 800415e:	d104      	bne.n	800416a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004160:	f7ff fe4c 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8004164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004168:	e003      	b.n	8004172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800416a:	f7ff fe33 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 800416e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417c:	f040 810c 	bne.w	8004398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800418a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800418e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004192:	4622      	mov	r2, r4
 8004194:	462b      	mov	r3, r5
 8004196:	1891      	adds	r1, r2, r2
 8004198:	65b9      	str	r1, [r7, #88]	; 0x58
 800419a:	415b      	adcs	r3, r3
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041a2:	4621      	mov	r1, r4
 80041a4:	eb12 0801 	adds.w	r8, r2, r1
 80041a8:	4629      	mov	r1, r5
 80041aa:	eb43 0901 	adc.w	r9, r3, r1
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c2:	4690      	mov	r8, r2
 80041c4:	4699      	mov	r9, r3
 80041c6:	4623      	mov	r3, r4
 80041c8:	eb18 0303 	adds.w	r3, r8, r3
 80041cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041d0:	462b      	mov	r3, r5
 80041d2:	eb49 0303 	adc.w	r3, r9, r3
 80041d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ee:	460b      	mov	r3, r1
 80041f0:	18db      	adds	r3, r3, r3
 80041f2:	653b      	str	r3, [r7, #80]	; 0x50
 80041f4:	4613      	mov	r3, r2
 80041f6:	eb42 0303 	adc.w	r3, r2, r3
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
 80041fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004204:	f7fc fd48 	bl	8000c98 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <UART_SetConfig+0x2d4>)
 800420e:	fba3 2302 	umull	r2, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	011c      	lsls	r4, r3, #4
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004230:	415b      	adcs	r3, r3
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004238:	4641      	mov	r1, r8
 800423a:	eb12 0a01 	adds.w	sl, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb43 0b01 	adc.w	fp, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004258:	4692      	mov	sl, r2
 800425a:	469b      	mov	fp, r3
 800425c:	4643      	mov	r3, r8
 800425e:	eb1a 0303 	adds.w	r3, sl, r3
 8004262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004266:	464b      	mov	r3, r9
 8004268:	eb4b 0303 	adc.w	r3, fp, r3
 800426c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800427c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004284:	460b      	mov	r3, r1
 8004286:	18db      	adds	r3, r3, r3
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
 800428a:	4613      	mov	r3, r2
 800428c:	eb42 0303 	adc.w	r3, r2, r3
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
 8004292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800429a:	f7fc fcfd 	bl	8000c98 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <UART_SetConfig+0x2d4>)
 80042a6:	fba3 2301 	umull	r2, r3, r3, r1
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2264      	movs	r2, #100	; 0x64
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	1acb      	subs	r3, r1, r3
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <UART_SetConfig+0x2d4>)
 80042bc:	fba3 2302 	umull	r2, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042c8:	441c      	add	r4, r3
 80042ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042e4:	415b      	adcs	r3, r3
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042ec:	4641      	mov	r1, r8
 80042ee:	1851      	adds	r1, r2, r1
 80042f0:	6339      	str	r1, [r7, #48]	; 0x30
 80042f2:	4649      	mov	r1, r9
 80042f4:	414b      	adcs	r3, r1
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004304:	4659      	mov	r1, fp
 8004306:	00cb      	lsls	r3, r1, #3
 8004308:	4651      	mov	r1, sl
 800430a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430e:	4651      	mov	r1, sl
 8004310:	00ca      	lsls	r2, r1, #3
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	4603      	mov	r3, r0
 8004318:	4642      	mov	r2, r8
 800431a:	189b      	adds	r3, r3, r2
 800431c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004320:	464b      	mov	r3, r9
 8004322:	460a      	mov	r2, r1
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800433c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004340:	460b      	mov	r3, r1
 8004342:	18db      	adds	r3, r3, r3
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
 8004346:	4613      	mov	r3, r2
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004356:	f7fc fc9f 	bl	8000c98 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <UART_SetConfig+0x2d4>)
 8004360:	fba3 1302 	umull	r1, r3, r3, r2
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	3332      	adds	r3, #50	; 0x32
 8004372:	4a08      	ldr	r2, [pc, #32]	; (8004394 <UART_SetConfig+0x2d4>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	f003 0207 	and.w	r2, r3, #7
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4422      	add	r2, r4
 8004386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004388:	e105      	b.n	8004596 <UART_SetConfig+0x4d6>
 800438a:	bf00      	nop
 800438c:	40011000 	.word	0x40011000
 8004390:	40011400 	.word	0x40011400
 8004394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439c:	2200      	movs	r2, #0
 800439e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043aa:	4642      	mov	r2, r8
 80043ac:	464b      	mov	r3, r9
 80043ae:	1891      	adds	r1, r2, r2
 80043b0:	6239      	str	r1, [r7, #32]
 80043b2:	415b      	adcs	r3, r3
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ba:	4641      	mov	r1, r8
 80043bc:	1854      	adds	r4, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb43 0501 	adc.w	r5, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	00eb      	lsls	r3, r5, #3
 80043ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d2:	00e2      	lsls	r2, r4, #3
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	18e3      	adds	r3, r4, r3
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e0:	464b      	mov	r3, r9
 80043e2:	eb45 0303 	adc.w	r3, r5, r3
 80043e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004406:	4629      	mov	r1, r5
 8004408:	008b      	lsls	r3, r1, #2
 800440a:	4621      	mov	r1, r4
 800440c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004410:	4621      	mov	r1, r4
 8004412:	008a      	lsls	r2, r1, #2
 8004414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004418:	f7fc fc3e 	bl	8000c98 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <UART_SetConfig+0x4e4>)
 8004422:	fba3 2302 	umull	r2, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	011c      	lsls	r4, r3, #4
 800442a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	61b9      	str	r1, [r7, #24]
 8004444:	415b      	adcs	r3, r3
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6139      	str	r1, [r7, #16]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004480:	464b      	mov	r3, r9
 8004482:	460a      	mov	r2, r1
 8004484:	eb42 0303 	adc.w	r3, r2, r3
 8004488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	67bb      	str	r3, [r7, #120]	; 0x78
 8004496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044a4:	4649      	mov	r1, r9
 80044a6:	008b      	lsls	r3, r1, #2
 80044a8:	4641      	mov	r1, r8
 80044aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ae:	4641      	mov	r1, r8
 80044b0:	008a      	lsls	r2, r1, #2
 80044b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044b6:	f7fc fbef 	bl	8000c98 <__aeabi_uldivmod>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <UART_SetConfig+0x4e4>)
 80044c0:	fba3 1302 	umull	r1, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	2164      	movs	r1, #100	; 0x64
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	3332      	adds	r3, #50	; 0x32
 80044d2:	4a34      	ldr	r2, [pc, #208]	; (80045a4 <UART_SetConfig+0x4e4>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044de:	441c      	add	r4, r3
 80044e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e4:	2200      	movs	r2, #0
 80044e6:	673b      	str	r3, [r7, #112]	; 0x70
 80044e8:	677a      	str	r2, [r7, #116]	; 0x74
 80044ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	1891      	adds	r1, r2, r2
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	415b      	adcs	r3, r3
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044fe:	4641      	mov	r1, r8
 8004500:	1851      	adds	r1, r2, r1
 8004502:	6039      	str	r1, [r7, #0]
 8004504:	4649      	mov	r1, r9
 8004506:	414b      	adcs	r3, r1
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004516:	4659      	mov	r1, fp
 8004518:	00cb      	lsls	r3, r1, #3
 800451a:	4651      	mov	r1, sl
 800451c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004520:	4651      	mov	r1, sl
 8004522:	00ca      	lsls	r2, r1, #3
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	4603      	mov	r3, r0
 800452a:	4642      	mov	r2, r8
 800452c:	189b      	adds	r3, r3, r2
 800452e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004530:	464b      	mov	r3, r9
 8004532:	460a      	mov	r2, r1
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	663b      	str	r3, [r7, #96]	; 0x60
 8004544:	667a      	str	r2, [r7, #100]	; 0x64
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004552:	4649      	mov	r1, r9
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	4641      	mov	r1, r8
 8004558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455c:	4641      	mov	r1, r8
 800455e:	008a      	lsls	r2, r1, #2
 8004560:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004564:	f7fc fb98 	bl	8000c98 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <UART_SetConfig+0x4e4>)
 800456e:	fba3 1302 	umull	r1, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2164      	movs	r1, #100	; 0x64
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <UART_SetConfig+0x4e4>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4422      	add	r2, r4
 8004594:	609a      	str	r2, [r3, #8]
}
 8004596:	bf00      	nop
 8004598:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a2:	bf00      	nop
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <__errno>:
 80045a8:	4b01      	ldr	r3, [pc, #4]	; (80045b0 <__errno+0x8>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000014 	.word	0x20000014

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4d0d      	ldr	r5, [pc, #52]	; (80045ec <__libc_init_array+0x38>)
 80045b8:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	2600      	movs	r6, #0
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	4d0b      	ldr	r5, [pc, #44]	; (80045f4 <__libc_init_array+0x40>)
 80045c6:	4c0c      	ldr	r4, [pc, #48]	; (80045f8 <__libc_init_array+0x44>)
 80045c8:	f004 fcc6 	bl	8008f58 <_init>
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	2600      	movs	r6, #0
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	0800a1a4 	.word	0x0800a1a4
 80045f0:	0800a1a4 	.word	0x0800a1a4
 80045f4:	0800a1a4 	.word	0x0800a1a4
 80045f8:	0800a1a8 	.word	0x0800a1a8

080045fc <memset>:
 80045fc:	4402      	add	r2, r0
 80045fe:	4603      	mov	r3, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <__cvt>:
 800460c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	ec55 4b10 	vmov	r4, r5, d0
 8004614:	2d00      	cmp	r5, #0
 8004616:	460e      	mov	r6, r1
 8004618:	4619      	mov	r1, r3
 800461a:	462b      	mov	r3, r5
 800461c:	bfbb      	ittet	lt
 800461e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004622:	461d      	movlt	r5, r3
 8004624:	2300      	movge	r3, #0
 8004626:	232d      	movlt	r3, #45	; 0x2d
 8004628:	700b      	strb	r3, [r1, #0]
 800462a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800462c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004630:	4691      	mov	r9, r2
 8004632:	f023 0820 	bic.w	r8, r3, #32
 8004636:	bfbc      	itt	lt
 8004638:	4622      	movlt	r2, r4
 800463a:	4614      	movlt	r4, r2
 800463c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004640:	d005      	beq.n	800464e <__cvt+0x42>
 8004642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004646:	d100      	bne.n	800464a <__cvt+0x3e>
 8004648:	3601      	adds	r6, #1
 800464a:	2102      	movs	r1, #2
 800464c:	e000      	b.n	8004650 <__cvt+0x44>
 800464e:	2103      	movs	r1, #3
 8004650:	ab03      	add	r3, sp, #12
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	ab02      	add	r3, sp, #8
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	ec45 4b10 	vmov	d0, r4, r5
 800465c:	4653      	mov	r3, sl
 800465e:	4632      	mov	r2, r6
 8004660:	f001 fde2 	bl	8006228 <_dtoa_r>
 8004664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004668:	4607      	mov	r7, r0
 800466a:	d102      	bne.n	8004672 <__cvt+0x66>
 800466c:	f019 0f01 	tst.w	r9, #1
 8004670:	d022      	beq.n	80046b8 <__cvt+0xac>
 8004672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004676:	eb07 0906 	add.w	r9, r7, r6
 800467a:	d110      	bne.n	800469e <__cvt+0x92>
 800467c:	783b      	ldrb	r3, [r7, #0]
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	d10a      	bne.n	8004698 <__cvt+0x8c>
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fc fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800468e:	b918      	cbnz	r0, 8004698 <__cvt+0x8c>
 8004690:	f1c6 0601 	rsb	r6, r6, #1
 8004694:	f8ca 6000 	str.w	r6, [sl]
 8004698:	f8da 3000 	ldr.w	r3, [sl]
 800469c:	4499      	add	r9, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	2300      	movs	r3, #0
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fc fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80046aa:	b108      	cbz	r0, 80046b0 <__cvt+0xa4>
 80046ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80046b0:	2230      	movs	r2, #48	; 0x30
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	454b      	cmp	r3, r9
 80046b6:	d307      	bcc.n	80046c8 <__cvt+0xbc>
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046bc:	1bdb      	subs	r3, r3, r7
 80046be:	4638      	mov	r0, r7
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	b004      	add	sp, #16
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	9103      	str	r1, [sp, #12]
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e7f0      	b.n	80046b2 <__cvt+0xa6>

080046d0 <__exponent>:
 80046d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d2:	4603      	mov	r3, r0
 80046d4:	2900      	cmp	r1, #0
 80046d6:	bfb8      	it	lt
 80046d8:	4249      	neglt	r1, r1
 80046da:	f803 2b02 	strb.w	r2, [r3], #2
 80046de:	bfb4      	ite	lt
 80046e0:	222d      	movlt	r2, #45	; 0x2d
 80046e2:	222b      	movge	r2, #43	; 0x2b
 80046e4:	2909      	cmp	r1, #9
 80046e6:	7042      	strb	r2, [r0, #1]
 80046e8:	dd2a      	ble.n	8004740 <__exponent+0x70>
 80046ea:	f10d 0407 	add.w	r4, sp, #7
 80046ee:	46a4      	mov	ip, r4
 80046f0:	270a      	movs	r7, #10
 80046f2:	46a6      	mov	lr, r4
 80046f4:	460a      	mov	r2, r1
 80046f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80046fa:	fb07 1516 	mls	r5, r7, r6, r1
 80046fe:	3530      	adds	r5, #48	; 0x30
 8004700:	2a63      	cmp	r2, #99	; 0x63
 8004702:	f104 34ff 	add.w	r4, r4, #4294967295
 8004706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800470a:	4631      	mov	r1, r6
 800470c:	dcf1      	bgt.n	80046f2 <__exponent+0x22>
 800470e:	3130      	adds	r1, #48	; 0x30
 8004710:	f1ae 0502 	sub.w	r5, lr, #2
 8004714:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004718:	1c44      	adds	r4, r0, #1
 800471a:	4629      	mov	r1, r5
 800471c:	4561      	cmp	r1, ip
 800471e:	d30a      	bcc.n	8004736 <__exponent+0x66>
 8004720:	f10d 0209 	add.w	r2, sp, #9
 8004724:	eba2 020e 	sub.w	r2, r2, lr
 8004728:	4565      	cmp	r5, ip
 800472a:	bf88      	it	hi
 800472c:	2200      	movhi	r2, #0
 800472e:	4413      	add	r3, r2
 8004730:	1a18      	subs	r0, r3, r0
 8004732:	b003      	add	sp, #12
 8004734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800473a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800473e:	e7ed      	b.n	800471c <__exponent+0x4c>
 8004740:	2330      	movs	r3, #48	; 0x30
 8004742:	3130      	adds	r1, #48	; 0x30
 8004744:	7083      	strb	r3, [r0, #2]
 8004746:	70c1      	strb	r1, [r0, #3]
 8004748:	1d03      	adds	r3, r0, #4
 800474a:	e7f1      	b.n	8004730 <__exponent+0x60>

0800474c <_printf_float>:
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	ed2d 8b02 	vpush	{d8}
 8004754:	b08d      	sub	sp, #52	; 0x34
 8004756:	460c      	mov	r4, r1
 8004758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800475c:	4616      	mov	r6, r2
 800475e:	461f      	mov	r7, r3
 8004760:	4605      	mov	r5, r0
 8004762:	f002 febf 	bl	80074e4 <_localeconv_r>
 8004766:	f8d0 a000 	ldr.w	sl, [r0]
 800476a:	4650      	mov	r0, sl
 800476c:	f7fb fd38 	bl	80001e0 <strlen>
 8004770:	2300      	movs	r3, #0
 8004772:	930a      	str	r3, [sp, #40]	; 0x28
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	f8d8 3000 	ldr.w	r3, [r8]
 800477c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004780:	3307      	adds	r3, #7
 8004782:	f023 0307 	bic.w	r3, r3, #7
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	f8c8 2000 	str.w	r2, [r8]
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004796:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800479a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80047a4:	ee08 0a10 	vmov	s16, r0
 80047a8:	4b9f      	ldr	r3, [pc, #636]	; (8004a28 <_printf_float+0x2dc>)
 80047aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295
 80047b2:	f7fc f9c3 	bl	8000b3c <__aeabi_dcmpun>
 80047b6:	bb88      	cbnz	r0, 800481c <_printf_float+0xd0>
 80047b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047bc:	4b9a      	ldr	r3, [pc, #616]	; (8004a28 <_printf_float+0x2dc>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	f7fc f99d 	bl	8000b00 <__aeabi_dcmple>
 80047c6:	bb48      	cbnz	r0, 800481c <_printf_float+0xd0>
 80047c8:	2200      	movs	r2, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	4640      	mov	r0, r8
 80047ce:	4649      	mov	r1, r9
 80047d0:	f7fc f98c 	bl	8000aec <__aeabi_dcmplt>
 80047d4:	b110      	cbz	r0, 80047dc <_printf_float+0x90>
 80047d6:	232d      	movs	r3, #45	; 0x2d
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	4b93      	ldr	r3, [pc, #588]	; (8004a2c <_printf_float+0x2e0>)
 80047de:	4894      	ldr	r0, [pc, #592]	; (8004a30 <_printf_float+0x2e4>)
 80047e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047e4:	bf94      	ite	ls
 80047e6:	4698      	movls	r8, r3
 80047e8:	4680      	movhi	r8, r0
 80047ea:	2303      	movs	r3, #3
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	9b05      	ldr	r3, [sp, #20]
 80047f0:	f023 0204 	bic.w	r2, r3, #4
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	f04f 0900 	mov.w	r9, #0
 80047fa:	9700      	str	r7, [sp, #0]
 80047fc:	4633      	mov	r3, r6
 80047fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004800:	4621      	mov	r1, r4
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f9d8 	bl	8004bb8 <_printf_common>
 8004808:	3001      	adds	r0, #1
 800480a:	f040 8090 	bne.w	800492e <_printf_float+0x1e2>
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
 8004812:	b00d      	add	sp, #52	; 0x34
 8004814:	ecbd 8b02 	vpop	{d8}
 8004818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fc f98a 	bl	8000b3c <__aeabi_dcmpun>
 8004828:	b140      	cbz	r0, 800483c <_printf_float+0xf0>
 800482a:	464b      	mov	r3, r9
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfbc      	itt	lt
 8004830:	232d      	movlt	r3, #45	; 0x2d
 8004832:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004836:	487f      	ldr	r0, [pc, #508]	; (8004a34 <_printf_float+0x2e8>)
 8004838:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <_printf_float+0x2ec>)
 800483a:	e7d1      	b.n	80047e0 <_printf_float+0x94>
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004842:	9206      	str	r2, [sp, #24]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	d13f      	bne.n	80048c8 <_printf_float+0x17c>
 8004848:	2306      	movs	r3, #6
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	9b05      	ldr	r3, [sp, #20]
 800484e:	6861      	ldr	r1, [r4, #4]
 8004850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004854:	2300      	movs	r3, #0
 8004856:	9303      	str	r3, [sp, #12]
 8004858:	ab0a      	add	r3, sp, #40	; 0x28
 800485a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800485e:	ab09      	add	r3, sp, #36	; 0x24
 8004860:	ec49 8b10 	vmov	d0, r8, r9
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800486c:	4628      	mov	r0, r5
 800486e:	f7ff fecd 	bl	800460c <__cvt>
 8004872:	9b06      	ldr	r3, [sp, #24]
 8004874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004876:	2b47      	cmp	r3, #71	; 0x47
 8004878:	4680      	mov	r8, r0
 800487a:	d108      	bne.n	800488e <_printf_float+0x142>
 800487c:	1cc8      	adds	r0, r1, #3
 800487e:	db02      	blt.n	8004886 <_printf_float+0x13a>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	4299      	cmp	r1, r3
 8004884:	dd41      	ble.n	800490a <_printf_float+0x1be>
 8004886:	f1ab 0b02 	sub.w	fp, fp, #2
 800488a:	fa5f fb8b 	uxtb.w	fp, fp
 800488e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004892:	d820      	bhi.n	80048d6 <_printf_float+0x18a>
 8004894:	3901      	subs	r1, #1
 8004896:	465a      	mov	r2, fp
 8004898:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800489c:	9109      	str	r1, [sp, #36]	; 0x24
 800489e:	f7ff ff17 	bl	80046d0 <__exponent>
 80048a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048a4:	1813      	adds	r3, r2, r0
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	4681      	mov	r9, r0
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	dc02      	bgt.n	80048b4 <_printf_float+0x168>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	07d2      	lsls	r2, r2, #31
 80048b2:	d501      	bpl.n	80048b8 <_printf_float+0x16c>
 80048b4:	3301      	adds	r3, #1
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d09c      	beq.n	80047fa <_printf_float+0xae>
 80048c0:	232d      	movs	r3, #45	; 0x2d
 80048c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c6:	e798      	b.n	80047fa <_printf_float+0xae>
 80048c8:	9a06      	ldr	r2, [sp, #24]
 80048ca:	2a47      	cmp	r2, #71	; 0x47
 80048cc:	d1be      	bne.n	800484c <_printf_float+0x100>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1bc      	bne.n	800484c <_printf_float+0x100>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e7b9      	b.n	800484a <_printf_float+0xfe>
 80048d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048da:	d118      	bne.n	800490e <_printf_float+0x1c2>
 80048dc:	2900      	cmp	r1, #0
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	dd0b      	ble.n	80048fa <_printf_float+0x1ae>
 80048e2:	6121      	str	r1, [r4, #16]
 80048e4:	b913      	cbnz	r3, 80048ec <_printf_float+0x1a0>
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	07d0      	lsls	r0, r2, #31
 80048ea:	d502      	bpl.n	80048f2 <_printf_float+0x1a6>
 80048ec:	3301      	adds	r3, #1
 80048ee:	440b      	add	r3, r1
 80048f0:	6123      	str	r3, [r4, #16]
 80048f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048f4:	f04f 0900 	mov.w	r9, #0
 80048f8:	e7de      	b.n	80048b8 <_printf_float+0x16c>
 80048fa:	b913      	cbnz	r3, 8004902 <_printf_float+0x1b6>
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	07d2      	lsls	r2, r2, #31
 8004900:	d501      	bpl.n	8004906 <_printf_float+0x1ba>
 8004902:	3302      	adds	r3, #2
 8004904:	e7f4      	b.n	80048f0 <_printf_float+0x1a4>
 8004906:	2301      	movs	r3, #1
 8004908:	e7f2      	b.n	80048f0 <_printf_float+0x1a4>
 800490a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800490e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004910:	4299      	cmp	r1, r3
 8004912:	db05      	blt.n	8004920 <_printf_float+0x1d4>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	6121      	str	r1, [r4, #16]
 8004918:	07d8      	lsls	r0, r3, #31
 800491a:	d5ea      	bpl.n	80048f2 <_printf_float+0x1a6>
 800491c:	1c4b      	adds	r3, r1, #1
 800491e:	e7e7      	b.n	80048f0 <_printf_float+0x1a4>
 8004920:	2900      	cmp	r1, #0
 8004922:	bfd4      	ite	le
 8004924:	f1c1 0202 	rsble	r2, r1, #2
 8004928:	2201      	movgt	r2, #1
 800492a:	4413      	add	r3, r2
 800492c:	e7e0      	b.n	80048f0 <_printf_float+0x1a4>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	055a      	lsls	r2, r3, #21
 8004932:	d407      	bmi.n	8004944 <_printf_float+0x1f8>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	4642      	mov	r2, r8
 8004938:	4631      	mov	r1, r6
 800493a:	4628      	mov	r0, r5
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d12c      	bne.n	800499c <_printf_float+0x250>
 8004942:	e764      	b.n	800480e <_printf_float+0xc2>
 8004944:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004948:	f240 80e0 	bls.w	8004b0c <_printf_float+0x3c0>
 800494c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004950:	2200      	movs	r2, #0
 8004952:	2300      	movs	r3, #0
 8004954:	f7fc f8c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004958:	2800      	cmp	r0, #0
 800495a:	d034      	beq.n	80049c6 <_printf_float+0x27a>
 800495c:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <_printf_float+0x2f0>)
 800495e:	2301      	movs	r3, #1
 8004960:	4631      	mov	r1, r6
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	f43f af51 	beq.w	800480e <_printf_float+0xc2>
 800496c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004970:	429a      	cmp	r2, r3
 8004972:	db02      	blt.n	800497a <_printf_float+0x22e>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	07d8      	lsls	r0, r3, #31
 8004978:	d510      	bpl.n	800499c <_printf_float+0x250>
 800497a:	ee18 3a10 	vmov	r3, s16
 800497e:	4652      	mov	r2, sl
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	f43f af41 	beq.w	800480e <_printf_float+0xc2>
 800498c:	f04f 0800 	mov.w	r8, #0
 8004990:	f104 091a 	add.w	r9, r4, #26
 8004994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004996:	3b01      	subs	r3, #1
 8004998:	4543      	cmp	r3, r8
 800499a:	dc09      	bgt.n	80049b0 <_printf_float+0x264>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	079b      	lsls	r3, r3, #30
 80049a0:	f100 8105 	bmi.w	8004bae <_printf_float+0x462>
 80049a4:	68e0      	ldr	r0, [r4, #12]
 80049a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a8:	4298      	cmp	r0, r3
 80049aa:	bfb8      	it	lt
 80049ac:	4618      	movlt	r0, r3
 80049ae:	e730      	b.n	8004812 <_printf_float+0xc6>
 80049b0:	2301      	movs	r3, #1
 80049b2:	464a      	mov	r2, r9
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f af27 	beq.w	800480e <_printf_float+0xc2>
 80049c0:	f108 0801 	add.w	r8, r8, #1
 80049c4:	e7e6      	b.n	8004994 <_printf_float+0x248>
 80049c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	dc39      	bgt.n	8004a40 <_printf_float+0x2f4>
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <_printf_float+0x2f0>)
 80049ce:	2301      	movs	r3, #1
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f af19 	beq.w	800480e <_printf_float+0xc2>
 80049dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d102      	bne.n	80049ea <_printf_float+0x29e>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07d9      	lsls	r1, r3, #31
 80049e8:	d5d8      	bpl.n	800499c <_printf_float+0x250>
 80049ea:	ee18 3a10 	vmov	r3, s16
 80049ee:	4652      	mov	r2, sl
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f af09 	beq.w	800480e <_printf_float+0xc2>
 80049fc:	f04f 0900 	mov.w	r9, #0
 8004a00:	f104 0a1a 	add.w	sl, r4, #26
 8004a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a06:	425b      	negs	r3, r3
 8004a08:	454b      	cmp	r3, r9
 8004a0a:	dc01      	bgt.n	8004a10 <_printf_float+0x2c4>
 8004a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0e:	e792      	b.n	8004936 <_printf_float+0x1ea>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4652      	mov	r2, sl
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f aef7 	beq.w	800480e <_printf_float+0xc2>
 8004a20:	f109 0901 	add.w	r9, r9, #1
 8004a24:	e7ee      	b.n	8004a04 <_printf_float+0x2b8>
 8004a26:	bf00      	nop
 8004a28:	7fefffff 	.word	0x7fefffff
 8004a2c:	08009cfc 	.word	0x08009cfc
 8004a30:	08009d00 	.word	0x08009d00
 8004a34:	08009d08 	.word	0x08009d08
 8004a38:	08009d04 	.word	0x08009d04
 8004a3c:	08009d0c 	.word	0x08009d0c
 8004a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bfa8      	it	ge
 8004a48:	461a      	movge	r2, r3
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	4691      	mov	r9, r2
 8004a4e:	dc37      	bgt.n	8004ac0 <_printf_float+0x374>
 8004a50:	f04f 0b00 	mov.w	fp, #0
 8004a54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a58:	f104 021a 	add.w	r2, r4, #26
 8004a5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a5e:	9305      	str	r3, [sp, #20]
 8004a60:	eba3 0309 	sub.w	r3, r3, r9
 8004a64:	455b      	cmp	r3, fp
 8004a66:	dc33      	bgt.n	8004ad0 <_printf_float+0x384>
 8004a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	db3b      	blt.n	8004ae8 <_printf_float+0x39c>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	07da      	lsls	r2, r3, #31
 8004a74:	d438      	bmi.n	8004ae8 <_printf_float+0x39c>
 8004a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a78:	9a05      	ldr	r2, [sp, #20]
 8004a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a7c:	1a9a      	subs	r2, r3, r2
 8004a7e:	eba3 0901 	sub.w	r9, r3, r1
 8004a82:	4591      	cmp	r9, r2
 8004a84:	bfa8      	it	ge
 8004a86:	4691      	movge	r9, r2
 8004a88:	f1b9 0f00 	cmp.w	r9, #0
 8004a8c:	dc35      	bgt.n	8004afa <_printf_float+0x3ae>
 8004a8e:	f04f 0800 	mov.w	r8, #0
 8004a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a96:	f104 0a1a 	add.w	sl, r4, #26
 8004a9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	eba3 0309 	sub.w	r3, r3, r9
 8004aa4:	4543      	cmp	r3, r8
 8004aa6:	f77f af79 	ble.w	800499c <_printf_float+0x250>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4652      	mov	r2, sl
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f aeaa 	beq.w	800480e <_printf_float+0xc2>
 8004aba:	f108 0801 	add.w	r8, r8, #1
 8004abe:	e7ec      	b.n	8004a9a <_printf_float+0x34e>
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	d1c0      	bne.n	8004a50 <_printf_float+0x304>
 8004ace:	e69e      	b.n	800480e <_printf_float+0xc2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	9205      	str	r2, [sp, #20]
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f ae97 	beq.w	800480e <_printf_float+0xc2>
 8004ae0:	9a05      	ldr	r2, [sp, #20]
 8004ae2:	f10b 0b01 	add.w	fp, fp, #1
 8004ae6:	e7b9      	b.n	8004a5c <_printf_float+0x310>
 8004ae8:	ee18 3a10 	vmov	r3, s16
 8004aec:	4652      	mov	r2, sl
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	d1be      	bne.n	8004a76 <_printf_float+0x32a>
 8004af8:	e689      	b.n	800480e <_printf_float+0xc2>
 8004afa:	9a05      	ldr	r2, [sp, #20]
 8004afc:	464b      	mov	r3, r9
 8004afe:	4442      	add	r2, r8
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	d1c1      	bne.n	8004a8e <_printf_float+0x342>
 8004b0a:	e680      	b.n	800480e <_printf_float+0xc2>
 8004b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	dc01      	bgt.n	8004b16 <_printf_float+0x3ca>
 8004b12:	07db      	lsls	r3, r3, #31
 8004b14:	d538      	bpl.n	8004b88 <_printf_float+0x43c>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4642      	mov	r2, r8
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f ae74 	beq.w	800480e <_printf_float+0xc2>
 8004b26:	ee18 3a10 	vmov	r3, s16
 8004b2a:	4652      	mov	r2, sl
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f ae6b 	beq.w	800480e <_printf_float+0xc2>
 8004b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f7fb ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b44:	b9d8      	cbnz	r0, 8004b7e <_printf_float+0x432>
 8004b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b48:	f108 0201 	add.w	r2, r8, #1
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	d10e      	bne.n	8004b76 <_printf_float+0x42a>
 8004b58:	e659      	b.n	800480e <_printf_float+0xc2>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae52 	beq.w	800480e <_printf_float+0xc2>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4543      	cmp	r3, r8
 8004b74:	dcf1      	bgt.n	8004b5a <_printf_float+0x40e>
 8004b76:	464b      	mov	r3, r9
 8004b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b7c:	e6dc      	b.n	8004938 <_printf_float+0x1ec>
 8004b7e:	f04f 0800 	mov.w	r8, #0
 8004b82:	f104 0a1a 	add.w	sl, r4, #26
 8004b86:	e7f2      	b.n	8004b6e <_printf_float+0x422>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	e7df      	b.n	8004b4e <_printf_float+0x402>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	464a      	mov	r2, r9
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae38 	beq.w	800480e <_printf_float+0xc2>
 8004b9e:	f108 0801 	add.w	r8, r8, #1
 8004ba2:	68e3      	ldr	r3, [r4, #12]
 8004ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	4543      	cmp	r3, r8
 8004baa:	dcf0      	bgt.n	8004b8e <_printf_float+0x442>
 8004bac:	e6fa      	b.n	80049a4 <_printf_float+0x258>
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	f104 0919 	add.w	r9, r4, #25
 8004bb6:	e7f4      	b.n	8004ba2 <_printf_float+0x456>

08004bb8 <_printf_common>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	4699      	mov	r9, r3
 8004bc0:	688a      	ldr	r2, [r1, #8]
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bfb8      	it	lt
 8004bcc:	4613      	movlt	r3, r2
 8004bce:	6033      	str	r3, [r6, #0]
 8004bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	b10a      	cbz	r2, 8004bde <_printf_common+0x26>
 8004bda:	3301      	adds	r3, #1
 8004bdc:	6033      	str	r3, [r6, #0]
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	0699      	lsls	r1, r3, #26
 8004be2:	bf42      	ittt	mi
 8004be4:	6833      	ldrmi	r3, [r6, #0]
 8004be6:	3302      	addmi	r3, #2
 8004be8:	6033      	strmi	r3, [r6, #0]
 8004bea:	6825      	ldr	r5, [r4, #0]
 8004bec:	f015 0506 	ands.w	r5, r5, #6
 8004bf0:	d106      	bne.n	8004c00 <_printf_common+0x48>
 8004bf2:	f104 0a19 	add.w	sl, r4, #25
 8004bf6:	68e3      	ldr	r3, [r4, #12]
 8004bf8:	6832      	ldr	r2, [r6, #0]
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	42ab      	cmp	r3, r5
 8004bfe:	dc26      	bgt.n	8004c4e <_printf_common+0x96>
 8004c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c04:	1e13      	subs	r3, r2, #0
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	bf18      	it	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	0692      	lsls	r2, r2, #26
 8004c0e:	d42b      	bmi.n	8004c68 <_printf_common+0xb0>
 8004c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c14:	4649      	mov	r1, r9
 8004c16:	4638      	mov	r0, r7
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d01e      	beq.n	8004c5c <_printf_common+0xa4>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	68e5      	ldr	r5, [r4, #12]
 8004c22:	6832      	ldr	r2, [r6, #0]
 8004c24:	f003 0306 	and.w	r3, r3, #6
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	bf08      	it	eq
 8004c2c:	1aad      	subeq	r5, r5, r2
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	6922      	ldr	r2, [r4, #16]
 8004c32:	bf0c      	ite	eq
 8004c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c38:	2500      	movne	r5, #0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bfc4      	itt	gt
 8004c3e:	1a9b      	subgt	r3, r3, r2
 8004c40:	18ed      	addgt	r5, r5, r3
 8004c42:	2600      	movs	r6, #0
 8004c44:	341a      	adds	r4, #26
 8004c46:	42b5      	cmp	r5, r6
 8004c48:	d11a      	bne.n	8004c80 <_printf_common+0xc8>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e008      	b.n	8004c60 <_printf_common+0xa8>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4652      	mov	r2, sl
 8004c52:	4649      	mov	r1, r9
 8004c54:	4638      	mov	r0, r7
 8004c56:	47c0      	blx	r8
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d103      	bne.n	8004c64 <_printf_common+0xac>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	3501      	adds	r5, #1
 8004c66:	e7c6      	b.n	8004bf6 <_printf_common+0x3e>
 8004c68:	18e1      	adds	r1, r4, r3
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	2030      	movs	r0, #48	; 0x30
 8004c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c72:	4422      	add	r2, r4
 8004c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	e7c7      	b.n	8004c10 <_printf_common+0x58>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4622      	mov	r2, r4
 8004c84:	4649      	mov	r1, r9
 8004c86:	4638      	mov	r0, r7
 8004c88:	47c0      	blx	r8
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d0e6      	beq.n	8004c5c <_printf_common+0xa4>
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7d9      	b.n	8004c46 <_printf_common+0x8e>
	...

08004c94 <_printf_i>:
 8004c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	7e0f      	ldrb	r7, [r1, #24]
 8004c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c9c:	2f78      	cmp	r7, #120	; 0x78
 8004c9e:	4691      	mov	r9, r2
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004caa:	d807      	bhi.n	8004cbc <_printf_i+0x28>
 8004cac:	2f62      	cmp	r7, #98	; 0x62
 8004cae:	d80a      	bhi.n	8004cc6 <_printf_i+0x32>
 8004cb0:	2f00      	cmp	r7, #0
 8004cb2:	f000 80d8 	beq.w	8004e66 <_printf_i+0x1d2>
 8004cb6:	2f58      	cmp	r7, #88	; 0x58
 8004cb8:	f000 80a3 	beq.w	8004e02 <_printf_i+0x16e>
 8004cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cc4:	e03a      	b.n	8004d3c <_printf_i+0xa8>
 8004cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cca:	2b15      	cmp	r3, #21
 8004ccc:	d8f6      	bhi.n	8004cbc <_printf_i+0x28>
 8004cce:	a101      	add	r1, pc, #4	; (adr r1, 8004cd4 <_printf_i+0x40>)
 8004cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cd4:	08004d2d 	.word	0x08004d2d
 8004cd8:	08004d41 	.word	0x08004d41
 8004cdc:	08004cbd 	.word	0x08004cbd
 8004ce0:	08004cbd 	.word	0x08004cbd
 8004ce4:	08004cbd 	.word	0x08004cbd
 8004ce8:	08004cbd 	.word	0x08004cbd
 8004cec:	08004d41 	.word	0x08004d41
 8004cf0:	08004cbd 	.word	0x08004cbd
 8004cf4:	08004cbd 	.word	0x08004cbd
 8004cf8:	08004cbd 	.word	0x08004cbd
 8004cfc:	08004cbd 	.word	0x08004cbd
 8004d00:	08004e4d 	.word	0x08004e4d
 8004d04:	08004d71 	.word	0x08004d71
 8004d08:	08004e2f 	.word	0x08004e2f
 8004d0c:	08004cbd 	.word	0x08004cbd
 8004d10:	08004cbd 	.word	0x08004cbd
 8004d14:	08004e6f 	.word	0x08004e6f
 8004d18:	08004cbd 	.word	0x08004cbd
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004cbd 	.word	0x08004cbd
 8004d24:	08004cbd 	.word	0x08004cbd
 8004d28:	08004e37 	.word	0x08004e37
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	602a      	str	r2, [r5, #0]
 8004d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0a3      	b.n	8004e88 <_printf_i+0x1f4>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	6829      	ldr	r1, [r5, #0]
 8004d44:	0606      	lsls	r6, r0, #24
 8004d46:	f101 0304 	add.w	r3, r1, #4
 8004d4a:	d50a      	bpl.n	8004d62 <_printf_i+0xce>
 8004d4c:	680e      	ldr	r6, [r1, #0]
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	2e00      	cmp	r6, #0
 8004d52:	da03      	bge.n	8004d5c <_printf_i+0xc8>
 8004d54:	232d      	movs	r3, #45	; 0x2d
 8004d56:	4276      	negs	r6, r6
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5c:	485e      	ldr	r0, [pc, #376]	; (8004ed8 <_printf_i+0x244>)
 8004d5e:	230a      	movs	r3, #10
 8004d60:	e019      	b.n	8004d96 <_printf_i+0x102>
 8004d62:	680e      	ldr	r6, [r1, #0]
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d6a:	bf18      	it	ne
 8004d6c:	b236      	sxthne	r6, r6
 8004d6e:	e7ef      	b.n	8004d50 <_printf_i+0xbc>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	6820      	ldr	r0, [r4, #0]
 8004d74:	1d19      	adds	r1, r3, #4
 8004d76:	6029      	str	r1, [r5, #0]
 8004d78:	0601      	lsls	r1, r0, #24
 8004d7a:	d501      	bpl.n	8004d80 <_printf_i+0xec>
 8004d7c:	681e      	ldr	r6, [r3, #0]
 8004d7e:	e002      	b.n	8004d86 <_printf_i+0xf2>
 8004d80:	0646      	lsls	r6, r0, #25
 8004d82:	d5fb      	bpl.n	8004d7c <_printf_i+0xe8>
 8004d84:	881e      	ldrh	r6, [r3, #0]
 8004d86:	4854      	ldr	r0, [pc, #336]	; (8004ed8 <_printf_i+0x244>)
 8004d88:	2f6f      	cmp	r7, #111	; 0x6f
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2308      	moveq	r3, #8
 8004d8e:	230a      	movne	r3, #10
 8004d90:	2100      	movs	r1, #0
 8004d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d96:	6865      	ldr	r5, [r4, #4]
 8004d98:	60a5      	str	r5, [r4, #8]
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	bfa2      	ittt	ge
 8004d9e:	6821      	ldrge	r1, [r4, #0]
 8004da0:	f021 0104 	bicge.w	r1, r1, #4
 8004da4:	6021      	strge	r1, [r4, #0]
 8004da6:	b90e      	cbnz	r6, 8004dac <_printf_i+0x118>
 8004da8:	2d00      	cmp	r5, #0
 8004daa:	d04d      	beq.n	8004e48 <_printf_i+0x1b4>
 8004dac:	4615      	mov	r5, r2
 8004dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004db2:	fb03 6711 	mls	r7, r3, r1, r6
 8004db6:	5dc7      	ldrb	r7, [r0, r7]
 8004db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dbc:	4637      	mov	r7, r6
 8004dbe:	42bb      	cmp	r3, r7
 8004dc0:	460e      	mov	r6, r1
 8004dc2:	d9f4      	bls.n	8004dae <_printf_i+0x11a>
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d10b      	bne.n	8004de0 <_printf_i+0x14c>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	07de      	lsls	r6, r3, #31
 8004dcc:	d508      	bpl.n	8004de0 <_printf_i+0x14c>
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	6861      	ldr	r1, [r4, #4]
 8004dd2:	4299      	cmp	r1, r3
 8004dd4:	bfde      	ittt	le
 8004dd6:	2330      	movle	r3, #48	; 0x30
 8004dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004de0:	1b52      	subs	r2, r2, r5
 8004de2:	6122      	str	r2, [r4, #16]
 8004de4:	f8cd a000 	str.w	sl, [sp]
 8004de8:	464b      	mov	r3, r9
 8004dea:	aa03      	add	r2, sp, #12
 8004dec:	4621      	mov	r1, r4
 8004dee:	4640      	mov	r0, r8
 8004df0:	f7ff fee2 	bl	8004bb8 <_printf_common>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d14c      	bne.n	8004e92 <_printf_i+0x1fe>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	b004      	add	sp, #16
 8004dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e02:	4835      	ldr	r0, [pc, #212]	; (8004ed8 <_printf_i+0x244>)
 8004e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e08:	6829      	ldr	r1, [r5, #0]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e10:	6029      	str	r1, [r5, #0]
 8004e12:	061d      	lsls	r5, r3, #24
 8004e14:	d514      	bpl.n	8004e40 <_printf_i+0x1ac>
 8004e16:	07df      	lsls	r7, r3, #31
 8004e18:	bf44      	itt	mi
 8004e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e1e:	6023      	strmi	r3, [r4, #0]
 8004e20:	b91e      	cbnz	r6, 8004e2a <_printf_i+0x196>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f023 0320 	bic.w	r3, r3, #32
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	e7b0      	b.n	8004d90 <_printf_i+0xfc>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	f043 0320 	orr.w	r3, r3, #32
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	2378      	movs	r3, #120	; 0x78
 8004e38:	4828      	ldr	r0, [pc, #160]	; (8004edc <_printf_i+0x248>)
 8004e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e3e:	e7e3      	b.n	8004e08 <_printf_i+0x174>
 8004e40:	0659      	lsls	r1, r3, #25
 8004e42:	bf48      	it	mi
 8004e44:	b2b6      	uxthmi	r6, r6
 8004e46:	e7e6      	b.n	8004e16 <_printf_i+0x182>
 8004e48:	4615      	mov	r5, r2
 8004e4a:	e7bb      	b.n	8004dc4 <_printf_i+0x130>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	6826      	ldr	r6, [r4, #0]
 8004e50:	6961      	ldr	r1, [r4, #20]
 8004e52:	1d18      	adds	r0, r3, #4
 8004e54:	6028      	str	r0, [r5, #0]
 8004e56:	0635      	lsls	r5, r6, #24
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	d501      	bpl.n	8004e60 <_printf_i+0x1cc>
 8004e5c:	6019      	str	r1, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <_printf_i+0x1d2>
 8004e60:	0670      	lsls	r0, r6, #25
 8004e62:	d5fb      	bpl.n	8004e5c <_printf_i+0x1c8>
 8004e64:	8019      	strh	r1, [r3, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	4615      	mov	r5, r2
 8004e6c:	e7ba      	b.n	8004de4 <_printf_i+0x150>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	602a      	str	r2, [r5, #0]
 8004e74:	681d      	ldr	r5, [r3, #0]
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7fb f9b8 	bl	80001f0 <memchr>
 8004e80:	b108      	cbz	r0, 8004e86 <_printf_i+0x1f2>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	6060      	str	r0, [r4, #4]
 8004e86:	6863      	ldr	r3, [r4, #4]
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e90:	e7a8      	b.n	8004de4 <_printf_i+0x150>
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	462a      	mov	r2, r5
 8004e96:	4649      	mov	r1, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	47d0      	blx	sl
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d0ab      	beq.n	8004df8 <_printf_i+0x164>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	079b      	lsls	r3, r3, #30
 8004ea4:	d413      	bmi.n	8004ece <_printf_i+0x23a>
 8004ea6:	68e0      	ldr	r0, [r4, #12]
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	bfb8      	it	lt
 8004eae:	4618      	movlt	r0, r3
 8004eb0:	e7a4      	b.n	8004dfc <_printf_i+0x168>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	4640      	mov	r0, r8
 8004eba:	47d0      	blx	sl
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d09b      	beq.n	8004df8 <_printf_i+0x164>
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	9903      	ldr	r1, [sp, #12]
 8004ec6:	1a5b      	subs	r3, r3, r1
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dcf2      	bgt.n	8004eb2 <_printf_i+0x21e>
 8004ecc:	e7eb      	b.n	8004ea6 <_printf_i+0x212>
 8004ece:	2500      	movs	r5, #0
 8004ed0:	f104 0619 	add.w	r6, r4, #25
 8004ed4:	e7f5      	b.n	8004ec2 <_printf_i+0x22e>
 8004ed6:	bf00      	nop
 8004ed8:	08009d0e 	.word	0x08009d0e
 8004edc:	08009d1f 	.word	0x08009d1f

08004ee0 <_scanf_float>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	4617      	mov	r7, r2
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	688b      	ldr	r3, [r1, #8]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ef2:	bf83      	ittte	hi
 8004ef4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ef8:	195b      	addhi	r3, r3, r5
 8004efa:	9302      	strhi	r3, [sp, #8]
 8004efc:	2300      	movls	r3, #0
 8004efe:	bf86      	itte	hi
 8004f00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f04:	608b      	strhi	r3, [r1, #8]
 8004f06:	9302      	strls	r3, [sp, #8]
 8004f08:	680b      	ldr	r3, [r1, #0]
 8004f0a:	468b      	mov	fp, r1
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f12:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	465e      	mov	r6, fp
 8004f20:	46aa      	mov	sl, r5
 8004f22:	46a9      	mov	r9, r5
 8004f24:	9501      	str	r5, [sp, #4]
 8004f26:	68a2      	ldr	r2, [r4, #8]
 8004f28:	b152      	cbz	r2, 8004f40 <_scanf_float+0x60>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b4e      	cmp	r3, #78	; 0x4e
 8004f30:	d864      	bhi.n	8004ffc <_scanf_float+0x11c>
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d83c      	bhi.n	8004fb0 <_scanf_float+0xd0>
 8004f36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f3a:	b2c8      	uxtb	r0, r1
 8004f3c:	280e      	cmp	r0, #14
 8004f3e:	d93a      	bls.n	8004fb6 <_scanf_float+0xd6>
 8004f40:	f1b9 0f00 	cmp.w	r9, #0
 8004f44:	d003      	beq.n	8004f4e <_scanf_float+0x6e>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f52:	f1ba 0f01 	cmp.w	sl, #1
 8004f56:	f200 8113 	bhi.w	8005180 <_scanf_float+0x2a0>
 8004f5a:	455e      	cmp	r6, fp
 8004f5c:	f200 8105 	bhi.w	800516a <_scanf_float+0x28a>
 8004f60:	2501      	movs	r5, #1
 8004f62:	4628      	mov	r0, r5
 8004f64:	b007      	add	sp, #28
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004f6e:	2a0d      	cmp	r2, #13
 8004f70:	d8e6      	bhi.n	8004f40 <_scanf_float+0x60>
 8004f72:	a101      	add	r1, pc, #4	; (adr r1, 8004f78 <_scanf_float+0x98>)
 8004f74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f78:	080050b7 	.word	0x080050b7
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	08004f41 	.word	0x08004f41
 8004f88:	08005117 	.word	0x08005117
 8004f8c:	080050ef 	.word	0x080050ef
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050c5 	.word	0x080050c5
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004f41 	.word	0x08004f41
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	0800507d 	.word	0x0800507d
 8004fb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004fb4:	e7db      	b.n	8004f6e <_scanf_float+0x8e>
 8004fb6:	290e      	cmp	r1, #14
 8004fb8:	d8c2      	bhi.n	8004f40 <_scanf_float+0x60>
 8004fba:	a001      	add	r0, pc, #4	; (adr r0, 8004fc0 <_scanf_float+0xe0>)
 8004fbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fc0:	0800506f 	.word	0x0800506f
 8004fc4:	08004f41 	.word	0x08004f41
 8004fc8:	0800506f 	.word	0x0800506f
 8004fcc:	08005103 	.word	0x08005103
 8004fd0:	08004f41 	.word	0x08004f41
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	08005059 	.word	0x08005059
 8004fdc:	08005059 	.word	0x08005059
 8004fe0:	08005059 	.word	0x08005059
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005059 	.word	0x08005059
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	2b6e      	cmp	r3, #110	; 0x6e
 8004ffe:	d809      	bhi.n	8005014 <_scanf_float+0x134>
 8005000:	2b60      	cmp	r3, #96	; 0x60
 8005002:	d8b2      	bhi.n	8004f6a <_scanf_float+0x8a>
 8005004:	2b54      	cmp	r3, #84	; 0x54
 8005006:	d077      	beq.n	80050f8 <_scanf_float+0x218>
 8005008:	2b59      	cmp	r3, #89	; 0x59
 800500a:	d199      	bne.n	8004f40 <_scanf_float+0x60>
 800500c:	2d07      	cmp	r5, #7
 800500e:	d197      	bne.n	8004f40 <_scanf_float+0x60>
 8005010:	2508      	movs	r5, #8
 8005012:	e029      	b.n	8005068 <_scanf_float+0x188>
 8005014:	2b74      	cmp	r3, #116	; 0x74
 8005016:	d06f      	beq.n	80050f8 <_scanf_float+0x218>
 8005018:	2b79      	cmp	r3, #121	; 0x79
 800501a:	e7f6      	b.n	800500a <_scanf_float+0x12a>
 800501c:	6821      	ldr	r1, [r4, #0]
 800501e:	05c8      	lsls	r0, r1, #23
 8005020:	d51a      	bpl.n	8005058 <_scanf_float+0x178>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005028:	6021      	str	r1, [r4, #0]
 800502a:	f109 0901 	add.w	r9, r9, #1
 800502e:	b11b      	cbz	r3, 8005038 <_scanf_float+0x158>
 8005030:	3b01      	subs	r3, #1
 8005032:	3201      	adds	r2, #1
 8005034:	9302      	str	r3, [sp, #8]
 8005036:	60a2      	str	r2, [r4, #8]
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	3b01      	subs	r3, #1
 800503c:	60a3      	str	r3, [r4, #8]
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	3301      	adds	r3, #1
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3b01      	subs	r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	f340 8084 	ble.w	8005158 <_scanf_float+0x278>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	e766      	b.n	8004f26 <_scanf_float+0x46>
 8005058:	eb1a 0f05 	cmn.w	sl, r5
 800505c:	f47f af70 	bne.w	8004f40 <_scanf_float+0x60>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005066:	6022      	str	r2, [r4, #0]
 8005068:	f806 3b01 	strb.w	r3, [r6], #1
 800506c:	e7e4      	b.n	8005038 <_scanf_float+0x158>
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	0610      	lsls	r0, r2, #24
 8005072:	f57f af65 	bpl.w	8004f40 <_scanf_float+0x60>
 8005076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507a:	e7f4      	b.n	8005066 <_scanf_float+0x186>
 800507c:	f1ba 0f00 	cmp.w	sl, #0
 8005080:	d10e      	bne.n	80050a0 <_scanf_float+0x1c0>
 8005082:	f1b9 0f00 	cmp.w	r9, #0
 8005086:	d10e      	bne.n	80050a6 <_scanf_float+0x1c6>
 8005088:	6822      	ldr	r2, [r4, #0]
 800508a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800508e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005092:	d108      	bne.n	80050a6 <_scanf_float+0x1c6>
 8005094:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	f04f 0a01 	mov.w	sl, #1
 800509e:	e7e3      	b.n	8005068 <_scanf_float+0x188>
 80050a0:	f1ba 0f02 	cmp.w	sl, #2
 80050a4:	d055      	beq.n	8005152 <_scanf_float+0x272>
 80050a6:	2d01      	cmp	r5, #1
 80050a8:	d002      	beq.n	80050b0 <_scanf_float+0x1d0>
 80050aa:	2d04      	cmp	r5, #4
 80050ac:	f47f af48 	bne.w	8004f40 <_scanf_float+0x60>
 80050b0:	3501      	adds	r5, #1
 80050b2:	b2ed      	uxtb	r5, r5
 80050b4:	e7d8      	b.n	8005068 <_scanf_float+0x188>
 80050b6:	f1ba 0f01 	cmp.w	sl, #1
 80050ba:	f47f af41 	bne.w	8004f40 <_scanf_float+0x60>
 80050be:	f04f 0a02 	mov.w	sl, #2
 80050c2:	e7d1      	b.n	8005068 <_scanf_float+0x188>
 80050c4:	b97d      	cbnz	r5, 80050e6 <_scanf_float+0x206>
 80050c6:	f1b9 0f00 	cmp.w	r9, #0
 80050ca:	f47f af3c 	bne.w	8004f46 <_scanf_float+0x66>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050d8:	f47f af39 	bne.w	8004f4e <_scanf_float+0x6e>
 80050dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	2501      	movs	r5, #1
 80050e4:	e7c0      	b.n	8005068 <_scanf_float+0x188>
 80050e6:	2d03      	cmp	r5, #3
 80050e8:	d0e2      	beq.n	80050b0 <_scanf_float+0x1d0>
 80050ea:	2d05      	cmp	r5, #5
 80050ec:	e7de      	b.n	80050ac <_scanf_float+0x1cc>
 80050ee:	2d02      	cmp	r5, #2
 80050f0:	f47f af26 	bne.w	8004f40 <_scanf_float+0x60>
 80050f4:	2503      	movs	r5, #3
 80050f6:	e7b7      	b.n	8005068 <_scanf_float+0x188>
 80050f8:	2d06      	cmp	r5, #6
 80050fa:	f47f af21 	bne.w	8004f40 <_scanf_float+0x60>
 80050fe:	2507      	movs	r5, #7
 8005100:	e7b2      	b.n	8005068 <_scanf_float+0x188>
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	0591      	lsls	r1, r2, #22
 8005106:	f57f af1b 	bpl.w	8004f40 <_scanf_float+0x60>
 800510a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	f8cd 9004 	str.w	r9, [sp, #4]
 8005114:	e7a8      	b.n	8005068 <_scanf_float+0x188>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800511c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005120:	d006      	beq.n	8005130 <_scanf_float+0x250>
 8005122:	0550      	lsls	r0, r2, #21
 8005124:	f57f af0c 	bpl.w	8004f40 <_scanf_float+0x60>
 8005128:	f1b9 0f00 	cmp.w	r9, #0
 800512c:	f43f af0f 	beq.w	8004f4e <_scanf_float+0x6e>
 8005130:	0591      	lsls	r1, r2, #22
 8005132:	bf58      	it	pl
 8005134:	9901      	ldrpl	r1, [sp, #4]
 8005136:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800513a:	bf58      	it	pl
 800513c:	eba9 0101 	subpl.w	r1, r9, r1
 8005140:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005144:	bf58      	it	pl
 8005146:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800514a:	6022      	str	r2, [r4, #0]
 800514c:	f04f 0900 	mov.w	r9, #0
 8005150:	e78a      	b.n	8005068 <_scanf_float+0x188>
 8005152:	f04f 0a03 	mov.w	sl, #3
 8005156:	e787      	b.n	8005068 <_scanf_float+0x188>
 8005158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800515c:	4639      	mov	r1, r7
 800515e:	4640      	mov	r0, r8
 8005160:	4798      	blx	r3
 8005162:	2800      	cmp	r0, #0
 8005164:	f43f aedf 	beq.w	8004f26 <_scanf_float+0x46>
 8005168:	e6ea      	b.n	8004f40 <_scanf_float+0x60>
 800516a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800516e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005172:	463a      	mov	r2, r7
 8005174:	4640      	mov	r0, r8
 8005176:	4798      	blx	r3
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	3b01      	subs	r3, #1
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	e6ec      	b.n	8004f5a <_scanf_float+0x7a>
 8005180:	1e6b      	subs	r3, r5, #1
 8005182:	2b06      	cmp	r3, #6
 8005184:	d825      	bhi.n	80051d2 <_scanf_float+0x2f2>
 8005186:	2d02      	cmp	r5, #2
 8005188:	d836      	bhi.n	80051f8 <_scanf_float+0x318>
 800518a:	455e      	cmp	r6, fp
 800518c:	f67f aee8 	bls.w	8004f60 <_scanf_float+0x80>
 8005190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005194:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005198:	463a      	mov	r2, r7
 800519a:	4640      	mov	r0, r8
 800519c:	4798      	blx	r3
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	e7f1      	b.n	800518a <_scanf_float+0x2aa>
 80051a6:	9802      	ldr	r0, [sp, #8]
 80051a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80051b0:	9002      	str	r0, [sp, #8]
 80051b2:	463a      	mov	r2, r7
 80051b4:	4640      	mov	r0, r8
 80051b6:	4798      	blx	r3
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051c2:	fa5f fa8a 	uxtb.w	sl, sl
 80051c6:	f1ba 0f02 	cmp.w	sl, #2
 80051ca:	d1ec      	bne.n	80051a6 <_scanf_float+0x2c6>
 80051cc:	3d03      	subs	r5, #3
 80051ce:	b2ed      	uxtb	r5, r5
 80051d0:	1b76      	subs	r6, r6, r5
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	05da      	lsls	r2, r3, #23
 80051d6:	d52f      	bpl.n	8005238 <_scanf_float+0x358>
 80051d8:	055b      	lsls	r3, r3, #21
 80051da:	d510      	bpl.n	80051fe <_scanf_float+0x31e>
 80051dc:	455e      	cmp	r6, fp
 80051de:	f67f aebf 	bls.w	8004f60 <_scanf_float+0x80>
 80051e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051ea:	463a      	mov	r2, r7
 80051ec:	4640      	mov	r0, r8
 80051ee:	4798      	blx	r3
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	e7f1      	b.n	80051dc <_scanf_float+0x2fc>
 80051f8:	46aa      	mov	sl, r5
 80051fa:	9602      	str	r6, [sp, #8]
 80051fc:	e7df      	b.n	80051be <_scanf_float+0x2de>
 80051fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	2965      	cmp	r1, #101	; 0x65
 8005206:	f103 33ff 	add.w	r3, r3, #4294967295
 800520a:	f106 35ff 	add.w	r5, r6, #4294967295
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	d00c      	beq.n	800522c <_scanf_float+0x34c>
 8005212:	2945      	cmp	r1, #69	; 0x45
 8005214:	d00a      	beq.n	800522c <_scanf_float+0x34c>
 8005216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800521a:	463a      	mov	r2, r7
 800521c:	4640      	mov	r0, r8
 800521e:	4798      	blx	r3
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005226:	3b01      	subs	r3, #1
 8005228:	1eb5      	subs	r5, r6, #2
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005230:	463a      	mov	r2, r7
 8005232:	4640      	mov	r0, r8
 8005234:	4798      	blx	r3
 8005236:	462e      	mov	r6, r5
 8005238:	6825      	ldr	r5, [r4, #0]
 800523a:	f015 0510 	ands.w	r5, r5, #16
 800523e:	d159      	bne.n	80052f4 <_scanf_float+0x414>
 8005240:	7035      	strb	r5, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d11b      	bne.n	8005286 <_scanf_float+0x3a6>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	454b      	cmp	r3, r9
 8005252:	eba3 0209 	sub.w	r2, r3, r9
 8005256:	d123      	bne.n	80052a0 <_scanf_float+0x3c0>
 8005258:	2200      	movs	r2, #0
 800525a:	4659      	mov	r1, fp
 800525c:	4640      	mov	r0, r8
 800525e:	f000 fecd 	bl	8005ffc <_strtod_r>
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	f012 0f02 	tst.w	r2, #2
 800526a:	ec57 6b10 	vmov	r6, r7, d0
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	d021      	beq.n	80052b6 <_scanf_float+0x3d6>
 8005272:	9903      	ldr	r1, [sp, #12]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	600a      	str	r2, [r1, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	e9c3 6700 	strd	r6, r7, [r3]
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60e3      	str	r3, [r4, #12]
 8005284:	e66d      	b.n	8004f62 <_scanf_float+0x82>
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0e5      	beq.n	8005258 <_scanf_float+0x378>
 800528c:	9905      	ldr	r1, [sp, #20]
 800528e:	230a      	movs	r3, #10
 8005290:	462a      	mov	r2, r5
 8005292:	3101      	adds	r1, #1
 8005294:	4640      	mov	r0, r8
 8005296:	f000 ff39 	bl	800610c <_strtol_r>
 800529a:	9b04      	ldr	r3, [sp, #16]
 800529c:	9e05      	ldr	r6, [sp, #20]
 800529e:	1ac2      	subs	r2, r0, r3
 80052a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80052a4:	429e      	cmp	r6, r3
 80052a6:	bf28      	it	cs
 80052a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80052ac:	4912      	ldr	r1, [pc, #72]	; (80052f8 <_scanf_float+0x418>)
 80052ae:	4630      	mov	r0, r6
 80052b0:	f000 f860 	bl	8005374 <siprintf>
 80052b4:	e7d0      	b.n	8005258 <_scanf_float+0x378>
 80052b6:	9903      	ldr	r1, [sp, #12]
 80052b8:	f012 0f04 	tst.w	r2, #4
 80052bc:	f103 0204 	add.w	r2, r3, #4
 80052c0:	600a      	str	r2, [r1, #0]
 80052c2:	d1d9      	bne.n	8005278 <_scanf_float+0x398>
 80052c4:	f8d3 8000 	ldr.w	r8, [r3]
 80052c8:	ee10 2a10 	vmov	r2, s0
 80052cc:	ee10 0a10 	vmov	r0, s0
 80052d0:	463b      	mov	r3, r7
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fc32 	bl	8000b3c <__aeabi_dcmpun>
 80052d8:	b128      	cbz	r0, 80052e6 <_scanf_float+0x406>
 80052da:	4808      	ldr	r0, [pc, #32]	; (80052fc <_scanf_float+0x41c>)
 80052dc:	f000 f810 	bl	8005300 <nanf>
 80052e0:	ed88 0a00 	vstr	s0, [r8]
 80052e4:	e7cb      	b.n	800527e <_scanf_float+0x39e>
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fb fc85 	bl	8000bf8 <__aeabi_d2f>
 80052ee:	f8c8 0000 	str.w	r0, [r8]
 80052f2:	e7c4      	b.n	800527e <_scanf_float+0x39e>
 80052f4:	2500      	movs	r5, #0
 80052f6:	e634      	b.n	8004f62 <_scanf_float+0x82>
 80052f8:	08009d30 	.word	0x08009d30
 80052fc:	0800a138 	.word	0x0800a138

08005300 <nanf>:
 8005300:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005308 <nanf+0x8>
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	7fc00000 	.word	0x7fc00000

0800530c <sniprintf>:
 800530c:	b40c      	push	{r2, r3}
 800530e:	b530      	push	{r4, r5, lr}
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <sniprintf+0x64>)
 8005312:	1e0c      	subs	r4, r1, #0
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	b09d      	sub	sp, #116	; 0x74
 8005318:	da08      	bge.n	800532c <sniprintf+0x20>
 800531a:	238b      	movs	r3, #139	; 0x8b
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	b01d      	add	sp, #116	; 0x74
 8005324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005328:	b002      	add	sp, #8
 800532a:	4770      	bx	lr
 800532c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005334:	bf14      	ite	ne
 8005336:	f104 33ff 	addne.w	r3, r4, #4294967295
 800533a:	4623      	moveq	r3, r4
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	9307      	str	r3, [sp, #28]
 8005340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005344:	9002      	str	r0, [sp, #8]
 8005346:	9006      	str	r0, [sp, #24]
 8005348:	f8ad 3016 	strh.w	r3, [sp, #22]
 800534c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800534e:	ab21      	add	r3, sp, #132	; 0x84
 8005350:	a902      	add	r1, sp, #8
 8005352:	4628      	mov	r0, r5
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	f002 ff05 	bl	8008164 <_svfiprintf_r>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	bfbc      	itt	lt
 800535e:	238b      	movlt	r3, #139	; 0x8b
 8005360:	602b      	strlt	r3, [r5, #0]
 8005362:	2c00      	cmp	r4, #0
 8005364:	d0dd      	beq.n	8005322 <sniprintf+0x16>
 8005366:	9b02      	ldr	r3, [sp, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e7d9      	b.n	8005322 <sniprintf+0x16>
 800536e:	bf00      	nop
 8005370:	20000014 	.word	0x20000014

08005374 <siprintf>:
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	b500      	push	{lr}
 8005378:	b09c      	sub	sp, #112	; 0x70
 800537a:	ab1d      	add	r3, sp, #116	; 0x74
 800537c:	9002      	str	r0, [sp, #8]
 800537e:	9006      	str	r0, [sp, #24]
 8005380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005384:	4809      	ldr	r0, [pc, #36]	; (80053ac <siprintf+0x38>)
 8005386:	9107      	str	r1, [sp, #28]
 8005388:	9104      	str	r1, [sp, #16]
 800538a:	4909      	ldr	r1, [pc, #36]	; (80053b0 <siprintf+0x3c>)
 800538c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005390:	9105      	str	r1, [sp, #20]
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	a902      	add	r1, sp, #8
 8005398:	f002 fee4 	bl	8008164 <_svfiprintf_r>
 800539c:	9b02      	ldr	r3, [sp, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	b01c      	add	sp, #112	; 0x70
 80053a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a8:	b003      	add	sp, #12
 80053aa:	4770      	bx	lr
 80053ac:	20000014 	.word	0x20000014
 80053b0:	ffff0208 	.word	0xffff0208

080053b4 <sulp>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	460d      	mov	r5, r1
 80053ba:	ec45 4b10 	vmov	d0, r4, r5
 80053be:	4616      	mov	r6, r2
 80053c0:	f002 fc2e 	bl	8007c20 <__ulp>
 80053c4:	ec51 0b10 	vmov	r0, r1, d0
 80053c8:	b17e      	cbz	r6, 80053ea <sulp+0x36>
 80053ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80053ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dd09      	ble.n	80053ea <sulp+0x36>
 80053d6:	051b      	lsls	r3, r3, #20
 80053d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80053dc:	2400      	movs	r4, #0
 80053de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80053e2:	4622      	mov	r2, r4
 80053e4:	462b      	mov	r3, r5
 80053e6:	f7fb f90f 	bl	8000608 <__aeabi_dmul>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <_strtod_l>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ed2d 8b02 	vpush	{d8}
 80053f8:	b09d      	sub	sp, #116	; 0x74
 80053fa:	461f      	mov	r7, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	9318      	str	r3, [sp, #96]	; 0x60
 8005400:	4ba2      	ldr	r3, [pc, #648]	; (800568c <_strtod_l+0x29c>)
 8005402:	9213      	str	r2, [sp, #76]	; 0x4c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	9305      	str	r3, [sp, #20]
 8005408:	4604      	mov	r4, r0
 800540a:	4618      	mov	r0, r3
 800540c:	4688      	mov	r8, r1
 800540e:	f7fa fee7 	bl	80001e0 <strlen>
 8005412:	f04f 0a00 	mov.w	sl, #0
 8005416:	4605      	mov	r5, r0
 8005418:	f04f 0b00 	mov.w	fp, #0
 800541c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	2a2b      	cmp	r2, #43	; 0x2b
 8005426:	d04e      	beq.n	80054c6 <_strtod_l+0xd6>
 8005428:	d83b      	bhi.n	80054a2 <_strtod_l+0xb2>
 800542a:	2a0d      	cmp	r2, #13
 800542c:	d834      	bhi.n	8005498 <_strtod_l+0xa8>
 800542e:	2a08      	cmp	r2, #8
 8005430:	d834      	bhi.n	800549c <_strtod_l+0xac>
 8005432:	2a00      	cmp	r2, #0
 8005434:	d03e      	beq.n	80054b4 <_strtod_l+0xc4>
 8005436:	2300      	movs	r3, #0
 8005438:	930a      	str	r3, [sp, #40]	; 0x28
 800543a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800543c:	7833      	ldrb	r3, [r6, #0]
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	f040 80b0 	bne.w	80055a4 <_strtod_l+0x1b4>
 8005444:	7873      	ldrb	r3, [r6, #1]
 8005446:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800544a:	2b58      	cmp	r3, #88	; 0x58
 800544c:	d168      	bne.n	8005520 <_strtod_l+0x130>
 800544e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	ab18      	add	r3, sp, #96	; 0x60
 8005454:	9702      	str	r7, [sp, #8]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4a8d      	ldr	r2, [pc, #564]	; (8005690 <_strtod_l+0x2a0>)
 800545a:	ab19      	add	r3, sp, #100	; 0x64
 800545c:	a917      	add	r1, sp, #92	; 0x5c
 800545e:	4620      	mov	r0, r4
 8005460:	f001 fd38 	bl	8006ed4 <__gethex>
 8005464:	f010 0707 	ands.w	r7, r0, #7
 8005468:	4605      	mov	r5, r0
 800546a:	d005      	beq.n	8005478 <_strtod_l+0x88>
 800546c:	2f06      	cmp	r7, #6
 800546e:	d12c      	bne.n	80054ca <_strtod_l+0xda>
 8005470:	3601      	adds	r6, #1
 8005472:	2300      	movs	r3, #0
 8005474:	9617      	str	r6, [sp, #92]	; 0x5c
 8005476:	930a      	str	r3, [sp, #40]	; 0x28
 8005478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 8590 	bne.w	8005fa0 <_strtod_l+0xbb0>
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	b1eb      	cbz	r3, 80054c0 <_strtod_l+0xd0>
 8005484:	4652      	mov	r2, sl
 8005486:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800548a:	ec43 2b10 	vmov	d0, r2, r3
 800548e:	b01d      	add	sp, #116	; 0x74
 8005490:	ecbd 8b02 	vpop	{d8}
 8005494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005498:	2a20      	cmp	r2, #32
 800549a:	d1cc      	bne.n	8005436 <_strtod_l+0x46>
 800549c:	3301      	adds	r3, #1
 800549e:	9317      	str	r3, [sp, #92]	; 0x5c
 80054a0:	e7be      	b.n	8005420 <_strtod_l+0x30>
 80054a2:	2a2d      	cmp	r2, #45	; 0x2d
 80054a4:	d1c7      	bne.n	8005436 <_strtod_l+0x46>
 80054a6:	2201      	movs	r2, #1
 80054a8:	920a      	str	r2, [sp, #40]	; 0x28
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1c2      	bne.n	800543a <_strtod_l+0x4a>
 80054b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f040 856e 	bne.w	8005f9c <_strtod_l+0xbac>
 80054c0:	4652      	mov	r2, sl
 80054c2:	465b      	mov	r3, fp
 80054c4:	e7e1      	b.n	800548a <_strtod_l+0x9a>
 80054c6:	2200      	movs	r2, #0
 80054c8:	e7ee      	b.n	80054a8 <_strtod_l+0xb8>
 80054ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80054cc:	b13a      	cbz	r2, 80054de <_strtod_l+0xee>
 80054ce:	2135      	movs	r1, #53	; 0x35
 80054d0:	a81a      	add	r0, sp, #104	; 0x68
 80054d2:	f002 fcb0 	bl	8007e36 <__copybits>
 80054d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80054d8:	4620      	mov	r0, r4
 80054da:	f002 f86f 	bl	80075bc <_Bfree>
 80054de:	3f01      	subs	r7, #1
 80054e0:	2f04      	cmp	r7, #4
 80054e2:	d806      	bhi.n	80054f2 <_strtod_l+0x102>
 80054e4:	e8df f007 	tbb	[pc, r7]
 80054e8:	1714030a 	.word	0x1714030a
 80054ec:	0a          	.byte	0x0a
 80054ed:	00          	.byte	0x00
 80054ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80054f2:	0728      	lsls	r0, r5, #28
 80054f4:	d5c0      	bpl.n	8005478 <_strtod_l+0x88>
 80054f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80054fa:	e7bd      	b.n	8005478 <_strtod_l+0x88>
 80054fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005506:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800550a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800550e:	e7f0      	b.n	80054f2 <_strtod_l+0x102>
 8005510:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005694 <_strtod_l+0x2a4>
 8005514:	e7ed      	b.n	80054f2 <_strtod_l+0x102>
 8005516:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800551a:	f04f 3aff 	mov.w	sl, #4294967295
 800551e:	e7e8      	b.n	80054f2 <_strtod_l+0x102>
 8005520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	9217      	str	r2, [sp, #92]	; 0x5c
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d0f9      	beq.n	8005520 <_strtod_l+0x130>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0a3      	beq.n	8005478 <_strtod_l+0x88>
 8005530:	2301      	movs	r3, #1
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800553a:	9308      	str	r3, [sp, #32]
 800553c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005540:	464f      	mov	r7, r9
 8005542:	220a      	movs	r2, #10
 8005544:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005546:	7806      	ldrb	r6, [r0, #0]
 8005548:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800554c:	b2d9      	uxtb	r1, r3
 800554e:	2909      	cmp	r1, #9
 8005550:	d92a      	bls.n	80055a8 <_strtod_l+0x1b8>
 8005552:	9905      	ldr	r1, [sp, #20]
 8005554:	462a      	mov	r2, r5
 8005556:	f002 ff1f 	bl	8008398 <strncmp>
 800555a:	b398      	cbz	r0, 80055c4 <_strtod_l+0x1d4>
 800555c:	2000      	movs	r0, #0
 800555e:	4632      	mov	r2, r6
 8005560:	463d      	mov	r5, r7
 8005562:	9005      	str	r0, [sp, #20]
 8005564:	4603      	mov	r3, r0
 8005566:	2a65      	cmp	r2, #101	; 0x65
 8005568:	d001      	beq.n	800556e <_strtod_l+0x17e>
 800556a:	2a45      	cmp	r2, #69	; 0x45
 800556c:	d118      	bne.n	80055a0 <_strtod_l+0x1b0>
 800556e:	b91d      	cbnz	r5, 8005578 <_strtod_l+0x188>
 8005570:	9a04      	ldr	r2, [sp, #16]
 8005572:	4302      	orrs	r2, r0
 8005574:	d09e      	beq.n	80054b4 <_strtod_l+0xc4>
 8005576:	2500      	movs	r5, #0
 8005578:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800557c:	f108 0201 	add.w	r2, r8, #1
 8005580:	9217      	str	r2, [sp, #92]	; 0x5c
 8005582:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005586:	2a2b      	cmp	r2, #43	; 0x2b
 8005588:	d075      	beq.n	8005676 <_strtod_l+0x286>
 800558a:	2a2d      	cmp	r2, #45	; 0x2d
 800558c:	d07b      	beq.n	8005686 <_strtod_l+0x296>
 800558e:	f04f 0c00 	mov.w	ip, #0
 8005592:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005596:	2909      	cmp	r1, #9
 8005598:	f240 8082 	bls.w	80056a0 <_strtod_l+0x2b0>
 800559c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80055a0:	2600      	movs	r6, #0
 80055a2:	e09d      	b.n	80056e0 <_strtod_l+0x2f0>
 80055a4:	2300      	movs	r3, #0
 80055a6:	e7c4      	b.n	8005532 <_strtod_l+0x142>
 80055a8:	2f08      	cmp	r7, #8
 80055aa:	bfd8      	it	le
 80055ac:	9907      	ldrle	r1, [sp, #28]
 80055ae:	f100 0001 	add.w	r0, r0, #1
 80055b2:	bfda      	itte	le
 80055b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80055b8:	9307      	strle	r3, [sp, #28]
 80055ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80055be:	3701      	adds	r7, #1
 80055c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80055c2:	e7bf      	b.n	8005544 <_strtod_l+0x154>
 80055c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055c6:	195a      	adds	r2, r3, r5
 80055c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80055ca:	5d5a      	ldrb	r2, [r3, r5]
 80055cc:	2f00      	cmp	r7, #0
 80055ce:	d037      	beq.n	8005640 <_strtod_l+0x250>
 80055d0:	9005      	str	r0, [sp, #20]
 80055d2:	463d      	mov	r5, r7
 80055d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d912      	bls.n	8005602 <_strtod_l+0x212>
 80055dc:	2301      	movs	r3, #1
 80055de:	e7c2      	b.n	8005566 <_strtod_l+0x176>
 80055e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80055e6:	785a      	ldrb	r2, [r3, #1]
 80055e8:	3001      	adds	r0, #1
 80055ea:	2a30      	cmp	r2, #48	; 0x30
 80055ec:	d0f8      	beq.n	80055e0 <_strtod_l+0x1f0>
 80055ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	f200 84d9 	bhi.w	8005faa <_strtod_l+0xbba>
 80055f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055fa:	9005      	str	r0, [sp, #20]
 80055fc:	2000      	movs	r0, #0
 80055fe:	9308      	str	r3, [sp, #32]
 8005600:	4605      	mov	r5, r0
 8005602:	3a30      	subs	r2, #48	; 0x30
 8005604:	f100 0301 	add.w	r3, r0, #1
 8005608:	d014      	beq.n	8005634 <_strtod_l+0x244>
 800560a:	9905      	ldr	r1, [sp, #20]
 800560c:	4419      	add	r1, r3
 800560e:	9105      	str	r1, [sp, #20]
 8005610:	462b      	mov	r3, r5
 8005612:	eb00 0e05 	add.w	lr, r0, r5
 8005616:	210a      	movs	r1, #10
 8005618:	4573      	cmp	r3, lr
 800561a:	d113      	bne.n	8005644 <_strtod_l+0x254>
 800561c:	182b      	adds	r3, r5, r0
 800561e:	2b08      	cmp	r3, #8
 8005620:	f105 0501 	add.w	r5, r5, #1
 8005624:	4405      	add	r5, r0
 8005626:	dc1c      	bgt.n	8005662 <_strtod_l+0x272>
 8005628:	9907      	ldr	r1, [sp, #28]
 800562a:	230a      	movs	r3, #10
 800562c:	fb03 2301 	mla	r3, r3, r1, r2
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	2300      	movs	r3, #0
 8005634:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005636:	1c51      	adds	r1, r2, #1
 8005638:	9117      	str	r1, [sp, #92]	; 0x5c
 800563a:	7852      	ldrb	r2, [r2, #1]
 800563c:	4618      	mov	r0, r3
 800563e:	e7c9      	b.n	80055d4 <_strtod_l+0x1e4>
 8005640:	4638      	mov	r0, r7
 8005642:	e7d2      	b.n	80055ea <_strtod_l+0x1fa>
 8005644:	2b08      	cmp	r3, #8
 8005646:	dc04      	bgt.n	8005652 <_strtod_l+0x262>
 8005648:	9e07      	ldr	r6, [sp, #28]
 800564a:	434e      	muls	r6, r1
 800564c:	9607      	str	r6, [sp, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	e7e2      	b.n	8005618 <_strtod_l+0x228>
 8005652:	f103 0c01 	add.w	ip, r3, #1
 8005656:	f1bc 0f10 	cmp.w	ip, #16
 800565a:	bfd8      	it	le
 800565c:	fb01 f909 	mulle.w	r9, r1, r9
 8005660:	e7f5      	b.n	800564e <_strtod_l+0x25e>
 8005662:	2d10      	cmp	r5, #16
 8005664:	bfdc      	itt	le
 8005666:	230a      	movle	r3, #10
 8005668:	fb03 2909 	mlale	r9, r3, r9, r2
 800566c:	e7e1      	b.n	8005632 <_strtod_l+0x242>
 800566e:	2300      	movs	r3, #0
 8005670:	9305      	str	r3, [sp, #20]
 8005672:	2301      	movs	r3, #1
 8005674:	e77c      	b.n	8005570 <_strtod_l+0x180>
 8005676:	f04f 0c00 	mov.w	ip, #0
 800567a:	f108 0202 	add.w	r2, r8, #2
 800567e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005680:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005684:	e785      	b.n	8005592 <_strtod_l+0x1a2>
 8005686:	f04f 0c01 	mov.w	ip, #1
 800568a:	e7f6      	b.n	800567a <_strtod_l+0x28a>
 800568c:	08009f80 	.word	0x08009f80
 8005690:	08009d38 	.word	0x08009d38
 8005694:	7ff00000 	.word	0x7ff00000
 8005698:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800569a:	1c51      	adds	r1, r2, #1
 800569c:	9117      	str	r1, [sp, #92]	; 0x5c
 800569e:	7852      	ldrb	r2, [r2, #1]
 80056a0:	2a30      	cmp	r2, #48	; 0x30
 80056a2:	d0f9      	beq.n	8005698 <_strtod_l+0x2a8>
 80056a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80056a8:	2908      	cmp	r1, #8
 80056aa:	f63f af79 	bhi.w	80055a0 <_strtod_l+0x1b0>
 80056ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80056b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056b4:	9206      	str	r2, [sp, #24]
 80056b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056b8:	1c51      	adds	r1, r2, #1
 80056ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80056bc:	7852      	ldrb	r2, [r2, #1]
 80056be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80056c2:	2e09      	cmp	r6, #9
 80056c4:	d937      	bls.n	8005736 <_strtod_l+0x346>
 80056c6:	9e06      	ldr	r6, [sp, #24]
 80056c8:	1b89      	subs	r1, r1, r6
 80056ca:	2908      	cmp	r1, #8
 80056cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80056d0:	dc02      	bgt.n	80056d8 <_strtod_l+0x2e8>
 80056d2:	4576      	cmp	r6, lr
 80056d4:	bfa8      	it	ge
 80056d6:	4676      	movge	r6, lr
 80056d8:	f1bc 0f00 	cmp.w	ip, #0
 80056dc:	d000      	beq.n	80056e0 <_strtod_l+0x2f0>
 80056de:	4276      	negs	r6, r6
 80056e0:	2d00      	cmp	r5, #0
 80056e2:	d14d      	bne.n	8005780 <_strtod_l+0x390>
 80056e4:	9904      	ldr	r1, [sp, #16]
 80056e6:	4301      	orrs	r1, r0
 80056e8:	f47f aec6 	bne.w	8005478 <_strtod_l+0x88>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f aee1 	bne.w	80054b4 <_strtod_l+0xc4>
 80056f2:	2a69      	cmp	r2, #105	; 0x69
 80056f4:	d027      	beq.n	8005746 <_strtod_l+0x356>
 80056f6:	dc24      	bgt.n	8005742 <_strtod_l+0x352>
 80056f8:	2a49      	cmp	r2, #73	; 0x49
 80056fa:	d024      	beq.n	8005746 <_strtod_l+0x356>
 80056fc:	2a4e      	cmp	r2, #78	; 0x4e
 80056fe:	f47f aed9 	bne.w	80054b4 <_strtod_l+0xc4>
 8005702:	499f      	ldr	r1, [pc, #636]	; (8005980 <_strtod_l+0x590>)
 8005704:	a817      	add	r0, sp, #92	; 0x5c
 8005706:	f001 fe3d 	bl	8007384 <__match>
 800570a:	2800      	cmp	r0, #0
 800570c:	f43f aed2 	beq.w	80054b4 <_strtod_l+0xc4>
 8005710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b28      	cmp	r3, #40	; 0x28
 8005716:	d12d      	bne.n	8005774 <_strtod_l+0x384>
 8005718:	499a      	ldr	r1, [pc, #616]	; (8005984 <_strtod_l+0x594>)
 800571a:	aa1a      	add	r2, sp, #104	; 0x68
 800571c:	a817      	add	r0, sp, #92	; 0x5c
 800571e:	f001 fe45 	bl	80073ac <__hexnan>
 8005722:	2805      	cmp	r0, #5
 8005724:	d126      	bne.n	8005774 <_strtod_l+0x384>
 8005726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005728:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800572c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005730:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005734:	e6a0      	b.n	8005478 <_strtod_l+0x88>
 8005736:	210a      	movs	r1, #10
 8005738:	fb01 2e0e 	mla	lr, r1, lr, r2
 800573c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005740:	e7b9      	b.n	80056b6 <_strtod_l+0x2c6>
 8005742:	2a6e      	cmp	r2, #110	; 0x6e
 8005744:	e7db      	b.n	80056fe <_strtod_l+0x30e>
 8005746:	4990      	ldr	r1, [pc, #576]	; (8005988 <_strtod_l+0x598>)
 8005748:	a817      	add	r0, sp, #92	; 0x5c
 800574a:	f001 fe1b 	bl	8007384 <__match>
 800574e:	2800      	cmp	r0, #0
 8005750:	f43f aeb0 	beq.w	80054b4 <_strtod_l+0xc4>
 8005754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005756:	498d      	ldr	r1, [pc, #564]	; (800598c <_strtod_l+0x59c>)
 8005758:	3b01      	subs	r3, #1
 800575a:	a817      	add	r0, sp, #92	; 0x5c
 800575c:	9317      	str	r3, [sp, #92]	; 0x5c
 800575e:	f001 fe11 	bl	8007384 <__match>
 8005762:	b910      	cbnz	r0, 800576a <_strtod_l+0x37a>
 8005764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005766:	3301      	adds	r3, #1
 8005768:	9317      	str	r3, [sp, #92]	; 0x5c
 800576a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800599c <_strtod_l+0x5ac>
 800576e:	f04f 0a00 	mov.w	sl, #0
 8005772:	e681      	b.n	8005478 <_strtod_l+0x88>
 8005774:	4886      	ldr	r0, [pc, #536]	; (8005990 <_strtod_l+0x5a0>)
 8005776:	f002 fdf7 	bl	8008368 <nan>
 800577a:	ec5b ab10 	vmov	sl, fp, d0
 800577e:	e67b      	b.n	8005478 <_strtod_l+0x88>
 8005780:	9b05      	ldr	r3, [sp, #20]
 8005782:	9807      	ldr	r0, [sp, #28]
 8005784:	1af3      	subs	r3, r6, r3
 8005786:	2f00      	cmp	r7, #0
 8005788:	bf08      	it	eq
 800578a:	462f      	moveq	r7, r5
 800578c:	2d10      	cmp	r5, #16
 800578e:	9306      	str	r3, [sp, #24]
 8005790:	46a8      	mov	r8, r5
 8005792:	bfa8      	it	ge
 8005794:	f04f 0810 	movge.w	r8, #16
 8005798:	f7fa febc 	bl	8000514 <__aeabi_ui2d>
 800579c:	2d09      	cmp	r5, #9
 800579e:	4682      	mov	sl, r0
 80057a0:	468b      	mov	fp, r1
 80057a2:	dd13      	ble.n	80057cc <_strtod_l+0x3dc>
 80057a4:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <_strtod_l+0x5a4>)
 80057a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80057aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80057ae:	f7fa ff2b 	bl	8000608 <__aeabi_dmul>
 80057b2:	4682      	mov	sl, r0
 80057b4:	4648      	mov	r0, r9
 80057b6:	468b      	mov	fp, r1
 80057b8:	f7fa feac 	bl	8000514 <__aeabi_ui2d>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4650      	mov	r0, sl
 80057c2:	4659      	mov	r1, fp
 80057c4:	f7fa fd6a 	bl	800029c <__adddf3>
 80057c8:	4682      	mov	sl, r0
 80057ca:	468b      	mov	fp, r1
 80057cc:	2d0f      	cmp	r5, #15
 80057ce:	dc38      	bgt.n	8005842 <_strtod_l+0x452>
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f43f ae50 	beq.w	8005478 <_strtod_l+0x88>
 80057d8:	dd24      	ble.n	8005824 <_strtod_l+0x434>
 80057da:	2b16      	cmp	r3, #22
 80057dc:	dc0b      	bgt.n	80057f6 <_strtod_l+0x406>
 80057de:	496d      	ldr	r1, [pc, #436]	; (8005994 <_strtod_l+0x5a4>)
 80057e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80057e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e8:	4652      	mov	r2, sl
 80057ea:	465b      	mov	r3, fp
 80057ec:	f7fa ff0c 	bl	8000608 <__aeabi_dmul>
 80057f0:	4682      	mov	sl, r0
 80057f2:	468b      	mov	fp, r1
 80057f4:	e640      	b.n	8005478 <_strtod_l+0x88>
 80057f6:	9a06      	ldr	r2, [sp, #24]
 80057f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80057fc:	4293      	cmp	r3, r2
 80057fe:	db20      	blt.n	8005842 <_strtod_l+0x452>
 8005800:	4c64      	ldr	r4, [pc, #400]	; (8005994 <_strtod_l+0x5a4>)
 8005802:	f1c5 050f 	rsb	r5, r5, #15
 8005806:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005812:	f7fa fef9 	bl	8000608 <__aeabi_dmul>
 8005816:	9b06      	ldr	r3, [sp, #24]
 8005818:	1b5d      	subs	r5, r3, r5
 800581a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800581e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005822:	e7e3      	b.n	80057ec <_strtod_l+0x3fc>
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	3316      	adds	r3, #22
 8005828:	db0b      	blt.n	8005842 <_strtod_l+0x452>
 800582a:	9b05      	ldr	r3, [sp, #20]
 800582c:	1b9e      	subs	r6, r3, r6
 800582e:	4b59      	ldr	r3, [pc, #356]	; (8005994 <_strtod_l+0x5a4>)
 8005830:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005838:	4650      	mov	r0, sl
 800583a:	4659      	mov	r1, fp
 800583c:	f7fb f80e 	bl	800085c <__aeabi_ddiv>
 8005840:	e7d6      	b.n	80057f0 <_strtod_l+0x400>
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	eba5 0808 	sub.w	r8, r5, r8
 8005848:	4498      	add	r8, r3
 800584a:	f1b8 0f00 	cmp.w	r8, #0
 800584e:	dd74      	ble.n	800593a <_strtod_l+0x54a>
 8005850:	f018 030f 	ands.w	r3, r8, #15
 8005854:	d00a      	beq.n	800586c <_strtod_l+0x47c>
 8005856:	494f      	ldr	r1, [pc, #316]	; (8005994 <_strtod_l+0x5a4>)
 8005858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800585c:	4652      	mov	r2, sl
 800585e:	465b      	mov	r3, fp
 8005860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005864:	f7fa fed0 	bl	8000608 <__aeabi_dmul>
 8005868:	4682      	mov	sl, r0
 800586a:	468b      	mov	fp, r1
 800586c:	f038 080f 	bics.w	r8, r8, #15
 8005870:	d04f      	beq.n	8005912 <_strtod_l+0x522>
 8005872:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005876:	dd22      	ble.n	80058be <_strtod_l+0x4ce>
 8005878:	2500      	movs	r5, #0
 800587a:	462e      	mov	r6, r5
 800587c:	9507      	str	r5, [sp, #28]
 800587e:	9505      	str	r5, [sp, #20]
 8005880:	2322      	movs	r3, #34	; 0x22
 8005882:	f8df b118 	ldr.w	fp, [pc, #280]	; 800599c <_strtod_l+0x5ac>
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	f04f 0a00 	mov.w	sl, #0
 800588c:	9b07      	ldr	r3, [sp, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f43f adf2 	beq.w	8005478 <_strtod_l+0x88>
 8005894:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005896:	4620      	mov	r0, r4
 8005898:	f001 fe90 	bl	80075bc <_Bfree>
 800589c:	9905      	ldr	r1, [sp, #20]
 800589e:	4620      	mov	r0, r4
 80058a0:	f001 fe8c 	bl	80075bc <_Bfree>
 80058a4:	4631      	mov	r1, r6
 80058a6:	4620      	mov	r0, r4
 80058a8:	f001 fe88 	bl	80075bc <_Bfree>
 80058ac:	9907      	ldr	r1, [sp, #28]
 80058ae:	4620      	mov	r0, r4
 80058b0:	f001 fe84 	bl	80075bc <_Bfree>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4620      	mov	r0, r4
 80058b8:	f001 fe80 	bl	80075bc <_Bfree>
 80058bc:	e5dc      	b.n	8005478 <_strtod_l+0x88>
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <_strtod_l+0x5a8>)
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	2300      	movs	r3, #0
 80058c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	4699      	mov	r9, r3
 80058ce:	f1b8 0f01 	cmp.w	r8, #1
 80058d2:	dc21      	bgt.n	8005918 <_strtod_l+0x528>
 80058d4:	b10b      	cbz	r3, 80058da <_strtod_l+0x4ea>
 80058d6:	4682      	mov	sl, r0
 80058d8:	468b      	mov	fp, r1
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <_strtod_l+0x5a8>)
 80058dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80058e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80058ec:	f7fa fe8c 	bl	8000608 <__aeabi_dmul>
 80058f0:	4b2a      	ldr	r3, [pc, #168]	; (800599c <_strtod_l+0x5ac>)
 80058f2:	460a      	mov	r2, r1
 80058f4:	400b      	ands	r3, r1
 80058f6:	492a      	ldr	r1, [pc, #168]	; (80059a0 <_strtod_l+0x5b0>)
 80058f8:	428b      	cmp	r3, r1
 80058fa:	4682      	mov	sl, r0
 80058fc:	d8bc      	bhi.n	8005878 <_strtod_l+0x488>
 80058fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005902:	428b      	cmp	r3, r1
 8005904:	bf86      	itte	hi
 8005906:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80059a4 <_strtod_l+0x5b4>
 800590a:	f04f 3aff 	movhi.w	sl, #4294967295
 800590e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005912:	2300      	movs	r3, #0
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	e084      	b.n	8005a22 <_strtod_l+0x632>
 8005918:	f018 0f01 	tst.w	r8, #1
 800591c:	d005      	beq.n	800592a <_strtod_l+0x53a>
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fe70 	bl	8000608 <__aeabi_dmul>
 8005928:	2301      	movs	r3, #1
 800592a:	9a04      	ldr	r2, [sp, #16]
 800592c:	3208      	adds	r2, #8
 800592e:	f109 0901 	add.w	r9, r9, #1
 8005932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005936:	9204      	str	r2, [sp, #16]
 8005938:	e7c9      	b.n	80058ce <_strtod_l+0x4de>
 800593a:	d0ea      	beq.n	8005912 <_strtod_l+0x522>
 800593c:	f1c8 0800 	rsb	r8, r8, #0
 8005940:	f018 020f 	ands.w	r2, r8, #15
 8005944:	d00a      	beq.n	800595c <_strtod_l+0x56c>
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <_strtod_l+0x5a4>)
 8005948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594c:	4650      	mov	r0, sl
 800594e:	4659      	mov	r1, fp
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa ff82 	bl	800085c <__aeabi_ddiv>
 8005958:	4682      	mov	sl, r0
 800595a:	468b      	mov	fp, r1
 800595c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005960:	d0d7      	beq.n	8005912 <_strtod_l+0x522>
 8005962:	f1b8 0f1f 	cmp.w	r8, #31
 8005966:	dd1f      	ble.n	80059a8 <_strtod_l+0x5b8>
 8005968:	2500      	movs	r5, #0
 800596a:	462e      	mov	r6, r5
 800596c:	9507      	str	r5, [sp, #28]
 800596e:	9505      	str	r5, [sp, #20]
 8005970:	2322      	movs	r3, #34	; 0x22
 8005972:	f04f 0a00 	mov.w	sl, #0
 8005976:	f04f 0b00 	mov.w	fp, #0
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	e786      	b.n	800588c <_strtod_l+0x49c>
 800597e:	bf00      	nop
 8005980:	08009d09 	.word	0x08009d09
 8005984:	08009d4c 	.word	0x08009d4c
 8005988:	08009d01 	.word	0x08009d01
 800598c:	08009e8c 	.word	0x08009e8c
 8005990:	0800a138 	.word	0x0800a138
 8005994:	0800a018 	.word	0x0800a018
 8005998:	08009ff0 	.word	0x08009ff0
 800599c:	7ff00000 	.word	0x7ff00000
 80059a0:	7ca00000 	.word	0x7ca00000
 80059a4:	7fefffff 	.word	0x7fefffff
 80059a8:	f018 0310 	ands.w	r3, r8, #16
 80059ac:	bf18      	it	ne
 80059ae:	236a      	movne	r3, #106	; 0x6a
 80059b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005d60 <_strtod_l+0x970>
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	4650      	mov	r0, sl
 80059b8:	4659      	mov	r1, fp
 80059ba:	2300      	movs	r3, #0
 80059bc:	f018 0f01 	tst.w	r8, #1
 80059c0:	d004      	beq.n	80059cc <_strtod_l+0x5dc>
 80059c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80059c6:	f7fa fe1f 	bl	8000608 <__aeabi_dmul>
 80059ca:	2301      	movs	r3, #1
 80059cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80059d0:	f109 0908 	add.w	r9, r9, #8
 80059d4:	d1f2      	bne.n	80059bc <_strtod_l+0x5cc>
 80059d6:	b10b      	cbz	r3, 80059dc <_strtod_l+0x5ec>
 80059d8:	4682      	mov	sl, r0
 80059da:	468b      	mov	fp, r1
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	b1c3      	cbz	r3, 8005a12 <_strtod_l+0x622>
 80059e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80059e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	4659      	mov	r1, fp
 80059ec:	dd11      	ble.n	8005a12 <_strtod_l+0x622>
 80059ee:	2b1f      	cmp	r3, #31
 80059f0:	f340 8124 	ble.w	8005c3c <_strtod_l+0x84c>
 80059f4:	2b34      	cmp	r3, #52	; 0x34
 80059f6:	bfde      	ittt	le
 80059f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80059fc:	f04f 33ff 	movle.w	r3, #4294967295
 8005a00:	fa03 f202 	lslle.w	r2, r3, r2
 8005a04:	f04f 0a00 	mov.w	sl, #0
 8005a08:	bfcc      	ite	gt
 8005a0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005a0e:	ea02 0b01 	andle.w	fp, r2, r1
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	4650      	mov	r0, sl
 8005a18:	4659      	mov	r1, fp
 8005a1a:	f7fb f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d1a2      	bne.n	8005968 <_strtod_l+0x578>
 8005a22:	9b07      	ldr	r3, [sp, #28]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	9908      	ldr	r1, [sp, #32]
 8005a28:	462b      	mov	r3, r5
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f001 fe2d 	bl	800768c <__s2b>
 8005a32:	9007      	str	r0, [sp, #28]
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f43f af1f 	beq.w	8005878 <_strtod_l+0x488>
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	1b9e      	subs	r6, r3, r6
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bfb4      	ite	lt
 8005a44:	4633      	movlt	r3, r6
 8005a46:	2300      	movge	r3, #0
 8005a48:	930c      	str	r3, [sp, #48]	; 0x30
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	2500      	movs	r5, #0
 8005a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a52:	9312      	str	r3, [sp, #72]	; 0x48
 8005a54:	462e      	mov	r6, r5
 8005a56:	9b07      	ldr	r3, [sp, #28]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	6859      	ldr	r1, [r3, #4]
 8005a5c:	f001 fd6e 	bl	800753c <_Balloc>
 8005a60:	9005      	str	r0, [sp, #20]
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f43f af0c 	beq.w	8005880 <_strtod_l+0x490>
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	3202      	adds	r2, #2
 8005a6e:	f103 010c 	add.w	r1, r3, #12
 8005a72:	0092      	lsls	r2, r2, #2
 8005a74:	300c      	adds	r0, #12
 8005a76:	f001 fd53 	bl	8007520 <memcpy>
 8005a7a:	ec4b ab10 	vmov	d0, sl, fp
 8005a7e:	aa1a      	add	r2, sp, #104	; 0x68
 8005a80:	a919      	add	r1, sp, #100	; 0x64
 8005a82:	4620      	mov	r0, r4
 8005a84:	f002 f948 	bl	8007d18 <__d2b>
 8005a88:	ec4b ab18 	vmov	d8, sl, fp
 8005a8c:	9018      	str	r0, [sp, #96]	; 0x60
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f43f aef6 	beq.w	8005880 <_strtod_l+0x490>
 8005a94:	2101      	movs	r1, #1
 8005a96:	4620      	mov	r0, r4
 8005a98:	f001 fe92 	bl	80077c0 <__i2b>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f43f aeee 	beq.w	8005880 <_strtod_l+0x490>
 8005aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aa6:	9904      	ldr	r1, [sp, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005aae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005ab0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005ab2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005ab6:	bfac      	ite	ge
 8005ab8:	eb03 0902 	addge.w	r9, r3, r2
 8005abc:	1ad7      	sublt	r7, r2, r3
 8005abe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ac0:	eba3 0801 	sub.w	r8, r3, r1
 8005ac4:	4490      	add	r8, r2
 8005ac6:	4ba1      	ldr	r3, [pc, #644]	; (8005d4c <_strtod_l+0x95c>)
 8005ac8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005acc:	4598      	cmp	r8, r3
 8005ace:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ad2:	f280 80c7 	bge.w	8005c64 <_strtod_l+0x874>
 8005ad6:	eba3 0308 	sub.w	r3, r3, r8
 8005ada:	2b1f      	cmp	r3, #31
 8005adc:	eba2 0203 	sub.w	r2, r2, r3
 8005ae0:	f04f 0101 	mov.w	r1, #1
 8005ae4:	f300 80b1 	bgt.w	8005c4a <_strtod_l+0x85a>
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	930d      	str	r3, [sp, #52]	; 0x34
 8005aee:	2300      	movs	r3, #0
 8005af0:	9308      	str	r3, [sp, #32]
 8005af2:	eb09 0802 	add.w	r8, r9, r2
 8005af6:	9b04      	ldr	r3, [sp, #16]
 8005af8:	45c1      	cmp	r9, r8
 8005afa:	4417      	add	r7, r2
 8005afc:	441f      	add	r7, r3
 8005afe:	464b      	mov	r3, r9
 8005b00:	bfa8      	it	ge
 8005b02:	4643      	movge	r3, r8
 8005b04:	42bb      	cmp	r3, r7
 8005b06:	bfa8      	it	ge
 8005b08:	463b      	movge	r3, r7
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfc2      	ittt	gt
 8005b0e:	eba8 0803 	subgt.w	r8, r8, r3
 8005b12:	1aff      	subgt	r7, r7, r3
 8005b14:	eba9 0903 	subgt.w	r9, r9, r3
 8005b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dd17      	ble.n	8005b4e <_strtod_l+0x75e>
 8005b1e:	4631      	mov	r1, r6
 8005b20:	461a      	mov	r2, r3
 8005b22:	4620      	mov	r0, r4
 8005b24:	f001 ff0c 	bl	8007940 <__pow5mult>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f43f aea8 	beq.w	8005880 <_strtod_l+0x490>
 8005b30:	4601      	mov	r1, r0
 8005b32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b34:	4620      	mov	r0, r4
 8005b36:	f001 fe59 	bl	80077ec <__multiply>
 8005b3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f43f ae9f 	beq.w	8005880 <_strtod_l+0x490>
 8005b42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b44:	4620      	mov	r0, r4
 8005b46:	f001 fd39 	bl	80075bc <_Bfree>
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4c:	9318      	str	r3, [sp, #96]	; 0x60
 8005b4e:	f1b8 0f00 	cmp.w	r8, #0
 8005b52:	f300 808c 	bgt.w	8005c6e <_strtod_l+0x87e>
 8005b56:	9b06      	ldr	r3, [sp, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dd08      	ble.n	8005b6e <_strtod_l+0x77e>
 8005b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b5e:	9905      	ldr	r1, [sp, #20]
 8005b60:	4620      	mov	r0, r4
 8005b62:	f001 feed 	bl	8007940 <__pow5mult>
 8005b66:	9005      	str	r0, [sp, #20]
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f43f ae89 	beq.w	8005880 <_strtod_l+0x490>
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	dd08      	ble.n	8005b84 <_strtod_l+0x794>
 8005b72:	9905      	ldr	r1, [sp, #20]
 8005b74:	463a      	mov	r2, r7
 8005b76:	4620      	mov	r0, r4
 8005b78:	f001 ff3c 	bl	80079f4 <__lshift>
 8005b7c:	9005      	str	r0, [sp, #20]
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f43f ae7e 	beq.w	8005880 <_strtod_l+0x490>
 8005b84:	f1b9 0f00 	cmp.w	r9, #0
 8005b88:	dd08      	ble.n	8005b9c <_strtod_l+0x7ac>
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	464a      	mov	r2, r9
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f001 ff30 	bl	80079f4 <__lshift>
 8005b94:	4606      	mov	r6, r0
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f43f ae72 	beq.w	8005880 <_strtod_l+0x490>
 8005b9c:	9a05      	ldr	r2, [sp, #20]
 8005b9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f001 ffb3 	bl	8007b0c <__mdiff>
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f43f ae69 	beq.w	8005880 <_strtod_l+0x490>
 8005bae:	68c3      	ldr	r3, [r0, #12]
 8005bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60c3      	str	r3, [r0, #12]
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	f001 ff8c 	bl	8007ad4 <__mcmp>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	da60      	bge.n	8005c82 <_strtod_l+0x892>
 8005bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc2:	ea53 030a 	orrs.w	r3, r3, sl
 8005bc6:	f040 8082 	bne.w	8005cce <_strtod_l+0x8de>
 8005bca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d17d      	bne.n	8005cce <_strtod_l+0x8de>
 8005bd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bd6:	0d1b      	lsrs	r3, r3, #20
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005bde:	d976      	bls.n	8005cce <_strtod_l+0x8de>
 8005be0:	696b      	ldr	r3, [r5, #20]
 8005be2:	b913      	cbnz	r3, 8005bea <_strtod_l+0x7fa>
 8005be4:	692b      	ldr	r3, [r5, #16]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	dd71      	ble.n	8005cce <_strtod_l+0x8de>
 8005bea:	4629      	mov	r1, r5
 8005bec:	2201      	movs	r2, #1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f001 ff00 	bl	80079f4 <__lshift>
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	f001 ff6c 	bl	8007ad4 <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	dd66      	ble.n	8005cce <_strtod_l+0x8de>
 8005c00:	9904      	ldr	r1, [sp, #16]
 8005c02:	4a53      	ldr	r2, [pc, #332]	; (8005d50 <_strtod_l+0x960>)
 8005c04:	465b      	mov	r3, fp
 8005c06:	2900      	cmp	r1, #0
 8005c08:	f000 8081 	beq.w	8005d0e <_strtod_l+0x91e>
 8005c0c:	ea02 010b 	and.w	r1, r2, fp
 8005c10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c14:	dc7b      	bgt.n	8005d0e <_strtod_l+0x91e>
 8005c16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c1a:	f77f aea9 	ble.w	8005970 <_strtod_l+0x580>
 8005c1e:	4b4d      	ldr	r3, [pc, #308]	; (8005d54 <_strtod_l+0x964>)
 8005c20:	4650      	mov	r0, sl
 8005c22:	4659      	mov	r1, fp
 8005c24:	2200      	movs	r2, #0
 8005c26:	f7fa fcef 	bl	8000608 <__aeabi_dmul>
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4303      	orrs	r3, r0
 8005c2e:	bf08      	it	eq
 8005c30:	2322      	moveq	r3, #34	; 0x22
 8005c32:	4682      	mov	sl, r0
 8005c34:	468b      	mov	fp, r1
 8005c36:	bf08      	it	eq
 8005c38:	6023      	streq	r3, [r4, #0]
 8005c3a:	e62b      	b.n	8005894 <_strtod_l+0x4a4>
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	ea03 0a0a 	and.w	sl, r3, sl
 8005c48:	e6e3      	b.n	8005a12 <_strtod_l+0x622>
 8005c4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005c4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005c52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005c56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005c5a:	fa01 f308 	lsl.w	r3, r1, r8
 8005c5e:	9308      	str	r3, [sp, #32]
 8005c60:	910d      	str	r1, [sp, #52]	; 0x34
 8005c62:	e746      	b.n	8005af2 <_strtod_l+0x702>
 8005c64:	2300      	movs	r3, #0
 8005c66:	9308      	str	r3, [sp, #32]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c6c:	e741      	b.n	8005af2 <_strtod_l+0x702>
 8005c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c70:	4642      	mov	r2, r8
 8005c72:	4620      	mov	r0, r4
 8005c74:	f001 febe 	bl	80079f4 <__lshift>
 8005c78:	9018      	str	r0, [sp, #96]	; 0x60
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f47f af6b 	bne.w	8005b56 <_strtod_l+0x766>
 8005c80:	e5fe      	b.n	8005880 <_strtod_l+0x490>
 8005c82:	465f      	mov	r7, fp
 8005c84:	d16e      	bne.n	8005d64 <_strtod_l+0x974>
 8005c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c8c:	b342      	cbz	r2, 8005ce0 <_strtod_l+0x8f0>
 8005c8e:	4a32      	ldr	r2, [pc, #200]	; (8005d58 <_strtod_l+0x968>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d128      	bne.n	8005ce6 <_strtod_l+0x8f6>
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	4651      	mov	r1, sl
 8005c98:	b1eb      	cbz	r3, 8005cd6 <_strtod_l+0x8e6>
 8005c9a:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <_strtod_l+0x960>)
 8005c9c:	403b      	ands	r3, r7
 8005c9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	d819      	bhi.n	8005cdc <_strtod_l+0x8ec>
 8005ca8:	0d1b      	lsrs	r3, r3, #20
 8005caa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	d117      	bne.n	8005ce6 <_strtod_l+0x8f6>
 8005cb6:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <_strtod_l+0x96c>)
 8005cb8:	429f      	cmp	r7, r3
 8005cba:	d102      	bne.n	8005cc2 <_strtod_l+0x8d2>
 8005cbc:	3101      	adds	r1, #1
 8005cbe:	f43f addf 	beq.w	8005880 <_strtod_l+0x490>
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <_strtod_l+0x960>)
 8005cc4:	403b      	ands	r3, r7
 8005cc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005cca:	f04f 0a00 	mov.w	sl, #0
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1a4      	bne.n	8005c1e <_strtod_l+0x82e>
 8005cd4:	e5de      	b.n	8005894 <_strtod_l+0x4a4>
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	e7ea      	b.n	8005cb2 <_strtod_l+0x8c2>
 8005cdc:	4613      	mov	r3, r2
 8005cde:	e7e8      	b.n	8005cb2 <_strtod_l+0x8c2>
 8005ce0:	ea53 030a 	orrs.w	r3, r3, sl
 8005ce4:	d08c      	beq.n	8005c00 <_strtod_l+0x810>
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	b1db      	cbz	r3, 8005d22 <_strtod_l+0x932>
 8005cea:	423b      	tst	r3, r7
 8005cec:	d0ef      	beq.n	8005cce <_strtod_l+0x8de>
 8005cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf0:	9a04      	ldr	r2, [sp, #16]
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	b1c3      	cbz	r3, 8005d2a <_strtod_l+0x93a>
 8005cf8:	f7ff fb5c 	bl	80053b4 <sulp>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	ec51 0b18 	vmov	r0, r1, d8
 8005d04:	f7fa faca 	bl	800029c <__adddf3>
 8005d08:	4682      	mov	sl, r0
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	e7df      	b.n	8005cce <_strtod_l+0x8de>
 8005d0e:	4013      	ands	r3, r2
 8005d10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005d14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005d18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005d1c:	f04f 3aff 	mov.w	sl, #4294967295
 8005d20:	e7d5      	b.n	8005cce <_strtod_l+0x8de>
 8005d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d24:	ea13 0f0a 	tst.w	r3, sl
 8005d28:	e7e0      	b.n	8005cec <_strtod_l+0x8fc>
 8005d2a:	f7ff fb43 	bl	80053b4 <sulp>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	ec51 0b18 	vmov	r0, r1, d8
 8005d36:	f7fa faaf 	bl	8000298 <__aeabi_dsub>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4682      	mov	sl, r0
 8005d40:	468b      	mov	fp, r1
 8005d42:	f7fa fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d0c1      	beq.n	8005cce <_strtod_l+0x8de>
 8005d4a:	e611      	b.n	8005970 <_strtod_l+0x580>
 8005d4c:	fffffc02 	.word	0xfffffc02
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	39500000 	.word	0x39500000
 8005d58:	000fffff 	.word	0x000fffff
 8005d5c:	7fefffff 	.word	0x7fefffff
 8005d60:	08009d60 	.word	0x08009d60
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	f002 f832 	bl	8007dd0 <__ratio>
 8005d6c:	ec59 8b10 	vmov	r8, r9, d0
 8005d70:	ee10 0a10 	vmov	r0, s0
 8005d74:	2200      	movs	r2, #0
 8005d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa fec0 	bl	8000b00 <__aeabi_dcmple>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d07a      	beq.n	8005e7a <_strtod_l+0xa8a>
 8005d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04a      	beq.n	8005e20 <_strtod_l+0xa30>
 8005d8a:	4b95      	ldr	r3, [pc, #596]	; (8005fe0 <_strtod_l+0xbf0>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005fe0 <_strtod_l+0xbf0>
 8005d96:	f04f 0800 	mov.w	r8, #0
 8005d9a:	4b92      	ldr	r3, [pc, #584]	; (8005fe4 <_strtod_l+0xbf4>)
 8005d9c:	403b      	ands	r3, r7
 8005d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005da2:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <_strtod_l+0xbf8>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	f040 80b0 	bne.w	8005f0a <_strtod_l+0xb1a>
 8005daa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005dae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005db2:	ec4b ab10 	vmov	d0, sl, fp
 8005db6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dba:	f001 ff31 	bl	8007c20 <__ulp>
 8005dbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005dc2:	ec53 2b10 	vmov	r2, r3, d0
 8005dc6:	f7fa fc1f 	bl	8000608 <__aeabi_dmul>
 8005dca:	4652      	mov	r2, sl
 8005dcc:	465b      	mov	r3, fp
 8005dce:	f7fa fa65 	bl	800029c <__adddf3>
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4983      	ldr	r1, [pc, #524]	; (8005fe4 <_strtod_l+0xbf4>)
 8005dd6:	4a85      	ldr	r2, [pc, #532]	; (8005fec <_strtod_l+0xbfc>)
 8005dd8:	4019      	ands	r1, r3
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	4682      	mov	sl, r0
 8005dde:	d960      	bls.n	8005ea2 <_strtod_l+0xab2>
 8005de0:	ee18 3a90 	vmov	r3, s17
 8005de4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d104      	bne.n	8005df6 <_strtod_l+0xa06>
 8005dec:	ee18 3a10 	vmov	r3, s16
 8005df0:	3301      	adds	r3, #1
 8005df2:	f43f ad45 	beq.w	8005880 <_strtod_l+0x490>
 8005df6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005ff8 <_strtod_l+0xc08>
 8005dfa:	f04f 3aff 	mov.w	sl, #4294967295
 8005dfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 fbdb 	bl	80075bc <_Bfree>
 8005e06:	9905      	ldr	r1, [sp, #20]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f001 fbd7 	bl	80075bc <_Bfree>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 fbd3 	bl	80075bc <_Bfree>
 8005e16:	4629      	mov	r1, r5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f001 fbcf 	bl	80075bc <_Bfree>
 8005e1e:	e61a      	b.n	8005a56 <_strtod_l+0x666>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	d11b      	bne.n	8005e5e <_strtod_l+0xa6e>
 8005e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e2a:	b9f3      	cbnz	r3, 8005e6a <_strtod_l+0xa7a>
 8005e2c:	4b6c      	ldr	r3, [pc, #432]	; (8005fe0 <_strtod_l+0xbf0>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fe5a 	bl	8000aec <__aeabi_dcmplt>
 8005e38:	b9d0      	cbnz	r0, 8005e70 <_strtod_l+0xa80>
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ff0 <_strtod_l+0xc00>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	f7fa fbe1 	bl	8000608 <__aeabi_dmul>
 8005e46:	4680      	mov	r8, r0
 8005e48:	4689      	mov	r9, r1
 8005e4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005e52:	9315      	str	r3, [sp, #84]	; 0x54
 8005e54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005e58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e5c:	e79d      	b.n	8005d9a <_strtod_l+0x9aa>
 8005e5e:	f1ba 0f01 	cmp.w	sl, #1
 8005e62:	d102      	bne.n	8005e6a <_strtod_l+0xa7a>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f43f ad83 	beq.w	8005970 <_strtod_l+0x580>
 8005e6a:	4b62      	ldr	r3, [pc, #392]	; (8005ff4 <_strtod_l+0xc04>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	e78e      	b.n	8005d8e <_strtod_l+0x99e>
 8005e70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005ff0 <_strtod_l+0xc00>
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	e7e7      	b.n	8005e4a <_strtod_l+0xa5a>
 8005e7a:	4b5d      	ldr	r3, [pc, #372]	; (8005ff0 <_strtod_l+0xc00>)
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	4649      	mov	r1, r9
 8005e80:	2200      	movs	r2, #0
 8005e82:	f7fa fbc1 	bl	8000608 <__aeabi_dmul>
 8005e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4689      	mov	r9, r1
 8005e8c:	b933      	cbnz	r3, 8005e9c <_strtod_l+0xaac>
 8005e8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e92:	900e      	str	r0, [sp, #56]	; 0x38
 8005e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e9a:	e7dd      	b.n	8005e58 <_strtod_l+0xa68>
 8005e9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005ea0:	e7f9      	b.n	8005e96 <_strtod_l+0xaa6>
 8005ea2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1a8      	bne.n	8005dfe <_strtod_l+0xa0e>
 8005eac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005eb2:	0d1b      	lsrs	r3, r3, #20
 8005eb4:	051b      	lsls	r3, r3, #20
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d1a1      	bne.n	8005dfe <_strtod_l+0xa0e>
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f7fa ff03 	bl	8000cc8 <__aeabi_d2lz>
 8005ec2:	f7fa fb73 	bl	80005ac <__aeabi_l2d>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa f9e3 	bl	8000298 <__aeabi_dsub>
 8005ed2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ed8:	ea43 030a 	orr.w	r3, r3, sl
 8005edc:	4313      	orrs	r3, r2
 8005ede:	4680      	mov	r8, r0
 8005ee0:	4689      	mov	r9, r1
 8005ee2:	d055      	beq.n	8005f90 <_strtod_l+0xba0>
 8005ee4:	a336      	add	r3, pc, #216	; (adr r3, 8005fc0 <_strtod_l+0xbd0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa fdff 	bl	8000aec <__aeabi_dcmplt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f47f acd0 	bne.w	8005894 <_strtod_l+0x4a4>
 8005ef4:	a334      	add	r3, pc, #208	; (adr r3, 8005fc8 <_strtod_l+0xbd8>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f43f af7b 	beq.w	8005dfe <_strtod_l+0xa0e>
 8005f08:	e4c4      	b.n	8005894 <_strtod_l+0x4a4>
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	b333      	cbz	r3, 8005f5c <_strtod_l+0xb6c>
 8005f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f14:	d822      	bhi.n	8005f5c <_strtod_l+0xb6c>
 8005f16:	a32e      	add	r3, pc, #184	; (adr r3, 8005fd0 <_strtod_l+0xbe0>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fdee 	bl	8000b00 <__aeabi_dcmple>
 8005f24:	b1a0      	cbz	r0, 8005f50 <_strtod_l+0xb60>
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	f7fa fe45 	bl	8000bb8 <__aeabi_d2uiz>
 8005f2e:	2801      	cmp	r0, #1
 8005f30:	bf38      	it	cc
 8005f32:	2001      	movcc	r0, #1
 8005f34:	f7fa faee 	bl	8000514 <__aeabi_ui2d>
 8005f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	bb23      	cbnz	r3, 8005f8a <_strtod_l+0xb9a>
 8005f40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f44:	9010      	str	r0, [sp, #64]	; 0x40
 8005f46:	9311      	str	r3, [sp, #68]	; 0x44
 8005f48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f60:	eeb0 0a48 	vmov.f32	s0, s16
 8005f64:	eef0 0a68 	vmov.f32	s1, s17
 8005f68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f6c:	f001 fe58 	bl	8007c20 <__ulp>
 8005f70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f74:	ec53 2b10 	vmov	r2, r3, d0
 8005f78:	f7fa fb46 	bl	8000608 <__aeabi_dmul>
 8005f7c:	ec53 2b18 	vmov	r2, r3, d8
 8005f80:	f7fa f98c 	bl	800029c <__adddf3>
 8005f84:	4682      	mov	sl, r0
 8005f86:	468b      	mov	fp, r1
 8005f88:	e78d      	b.n	8005ea6 <_strtod_l+0xab6>
 8005f8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005f8e:	e7db      	b.n	8005f48 <_strtod_l+0xb58>
 8005f90:	a311      	add	r3, pc, #68	; (adr r3, 8005fd8 <_strtod_l+0xbe8>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fda9 	bl	8000aec <__aeabi_dcmplt>
 8005f9a:	e7b2      	b.n	8005f02 <_strtod_l+0xb12>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	f7ff ba6b 	b.w	8005480 <_strtod_l+0x90>
 8005faa:	2a65      	cmp	r2, #101	; 0x65
 8005fac:	f43f ab5f 	beq.w	800566e <_strtod_l+0x27e>
 8005fb0:	2a45      	cmp	r2, #69	; 0x45
 8005fb2:	f43f ab5c 	beq.w	800566e <_strtod_l+0x27e>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f7ff bb94 	b.w	80056e4 <_strtod_l+0x2f4>
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	94a03595 	.word	0x94a03595
 8005fc4:	3fdfffff 	.word	0x3fdfffff
 8005fc8:	35afe535 	.word	0x35afe535
 8005fcc:	3fe00000 	.word	0x3fe00000
 8005fd0:	ffc00000 	.word	0xffc00000
 8005fd4:	41dfffff 	.word	0x41dfffff
 8005fd8:	94a03595 	.word	0x94a03595
 8005fdc:	3fcfffff 	.word	0x3fcfffff
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	7ff00000 	.word	0x7ff00000
 8005fe8:	7fe00000 	.word	0x7fe00000
 8005fec:	7c9fffff 	.word	0x7c9fffff
 8005ff0:	3fe00000 	.word	0x3fe00000
 8005ff4:	bff00000 	.word	0xbff00000
 8005ff8:	7fefffff 	.word	0x7fefffff

08005ffc <_strtod_r>:
 8005ffc:	4b01      	ldr	r3, [pc, #4]	; (8006004 <_strtod_r+0x8>)
 8005ffe:	f7ff b9f7 	b.w	80053f0 <_strtod_l>
 8006002:	bf00      	nop
 8006004:	2000007c 	.word	0x2000007c

08006008 <_strtol_l.constprop.0>:
 8006008:	2b01      	cmp	r3, #1
 800600a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800600e:	d001      	beq.n	8006014 <_strtol_l.constprop.0+0xc>
 8006010:	2b24      	cmp	r3, #36	; 0x24
 8006012:	d906      	bls.n	8006022 <_strtol_l.constprop.0+0x1a>
 8006014:	f7fe fac8 	bl	80045a8 <__errno>
 8006018:	2316      	movs	r3, #22
 800601a:	6003      	str	r3, [r0, #0]
 800601c:	2000      	movs	r0, #0
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006108 <_strtol_l.constprop.0+0x100>
 8006026:	460d      	mov	r5, r1
 8006028:	462e      	mov	r6, r5
 800602a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800602e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006032:	f017 0708 	ands.w	r7, r7, #8
 8006036:	d1f7      	bne.n	8006028 <_strtol_l.constprop.0+0x20>
 8006038:	2c2d      	cmp	r4, #45	; 0x2d
 800603a:	d132      	bne.n	80060a2 <_strtol_l.constprop.0+0x9a>
 800603c:	782c      	ldrb	r4, [r5, #0]
 800603e:	2701      	movs	r7, #1
 8006040:	1cb5      	adds	r5, r6, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d05b      	beq.n	80060fe <_strtol_l.constprop.0+0xf6>
 8006046:	2b10      	cmp	r3, #16
 8006048:	d109      	bne.n	800605e <_strtol_l.constprop.0+0x56>
 800604a:	2c30      	cmp	r4, #48	; 0x30
 800604c:	d107      	bne.n	800605e <_strtol_l.constprop.0+0x56>
 800604e:	782c      	ldrb	r4, [r5, #0]
 8006050:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006054:	2c58      	cmp	r4, #88	; 0x58
 8006056:	d14d      	bne.n	80060f4 <_strtol_l.constprop.0+0xec>
 8006058:	786c      	ldrb	r4, [r5, #1]
 800605a:	2310      	movs	r3, #16
 800605c:	3502      	adds	r5, #2
 800605e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006062:	f108 38ff 	add.w	r8, r8, #4294967295
 8006066:	f04f 0c00 	mov.w	ip, #0
 800606a:	fbb8 f9f3 	udiv	r9, r8, r3
 800606e:	4666      	mov	r6, ip
 8006070:	fb03 8a19 	mls	sl, r3, r9, r8
 8006074:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006078:	f1be 0f09 	cmp.w	lr, #9
 800607c:	d816      	bhi.n	80060ac <_strtol_l.constprop.0+0xa4>
 800607e:	4674      	mov	r4, lr
 8006080:	42a3      	cmp	r3, r4
 8006082:	dd24      	ble.n	80060ce <_strtol_l.constprop.0+0xc6>
 8006084:	f1bc 0f00 	cmp.w	ip, #0
 8006088:	db1e      	blt.n	80060c8 <_strtol_l.constprop.0+0xc0>
 800608a:	45b1      	cmp	r9, r6
 800608c:	d31c      	bcc.n	80060c8 <_strtol_l.constprop.0+0xc0>
 800608e:	d101      	bne.n	8006094 <_strtol_l.constprop.0+0x8c>
 8006090:	45a2      	cmp	sl, r4
 8006092:	db19      	blt.n	80060c8 <_strtol_l.constprop.0+0xc0>
 8006094:	fb06 4603 	mla	r6, r6, r3, r4
 8006098:	f04f 0c01 	mov.w	ip, #1
 800609c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060a0:	e7e8      	b.n	8006074 <_strtol_l.constprop.0+0x6c>
 80060a2:	2c2b      	cmp	r4, #43	; 0x2b
 80060a4:	bf04      	itt	eq
 80060a6:	782c      	ldrbeq	r4, [r5, #0]
 80060a8:	1cb5      	addeq	r5, r6, #2
 80060aa:	e7ca      	b.n	8006042 <_strtol_l.constprop.0+0x3a>
 80060ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80060b0:	f1be 0f19 	cmp.w	lr, #25
 80060b4:	d801      	bhi.n	80060ba <_strtol_l.constprop.0+0xb2>
 80060b6:	3c37      	subs	r4, #55	; 0x37
 80060b8:	e7e2      	b.n	8006080 <_strtol_l.constprop.0+0x78>
 80060ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80060be:	f1be 0f19 	cmp.w	lr, #25
 80060c2:	d804      	bhi.n	80060ce <_strtol_l.constprop.0+0xc6>
 80060c4:	3c57      	subs	r4, #87	; 0x57
 80060c6:	e7db      	b.n	8006080 <_strtol_l.constprop.0+0x78>
 80060c8:	f04f 3cff 	mov.w	ip, #4294967295
 80060cc:	e7e6      	b.n	800609c <_strtol_l.constprop.0+0x94>
 80060ce:	f1bc 0f00 	cmp.w	ip, #0
 80060d2:	da05      	bge.n	80060e0 <_strtol_l.constprop.0+0xd8>
 80060d4:	2322      	movs	r3, #34	; 0x22
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	4646      	mov	r6, r8
 80060da:	b942      	cbnz	r2, 80060ee <_strtol_l.constprop.0+0xe6>
 80060dc:	4630      	mov	r0, r6
 80060de:	e79e      	b.n	800601e <_strtol_l.constprop.0+0x16>
 80060e0:	b107      	cbz	r7, 80060e4 <_strtol_l.constprop.0+0xdc>
 80060e2:	4276      	negs	r6, r6
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d0f9      	beq.n	80060dc <_strtol_l.constprop.0+0xd4>
 80060e8:	f1bc 0f00 	cmp.w	ip, #0
 80060ec:	d000      	beq.n	80060f0 <_strtol_l.constprop.0+0xe8>
 80060ee:	1e69      	subs	r1, r5, #1
 80060f0:	6011      	str	r1, [r2, #0]
 80060f2:	e7f3      	b.n	80060dc <_strtol_l.constprop.0+0xd4>
 80060f4:	2430      	movs	r4, #48	; 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1b1      	bne.n	800605e <_strtol_l.constprop.0+0x56>
 80060fa:	2308      	movs	r3, #8
 80060fc:	e7af      	b.n	800605e <_strtol_l.constprop.0+0x56>
 80060fe:	2c30      	cmp	r4, #48	; 0x30
 8006100:	d0a5      	beq.n	800604e <_strtol_l.constprop.0+0x46>
 8006102:	230a      	movs	r3, #10
 8006104:	e7ab      	b.n	800605e <_strtol_l.constprop.0+0x56>
 8006106:	bf00      	nop
 8006108:	08009d89 	.word	0x08009d89

0800610c <_strtol_r>:
 800610c:	f7ff bf7c 	b.w	8006008 <_strtol_l.constprop.0>

08006110 <quorem>:
 8006110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	6903      	ldr	r3, [r0, #16]
 8006116:	690c      	ldr	r4, [r1, #16]
 8006118:	42a3      	cmp	r3, r4
 800611a:	4607      	mov	r7, r0
 800611c:	f2c0 8081 	blt.w	8006222 <quorem+0x112>
 8006120:	3c01      	subs	r4, #1
 8006122:	f101 0814 	add.w	r8, r1, #20
 8006126:	f100 0514 	add.w	r5, r0, #20
 800612a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006138:	3301      	adds	r3, #1
 800613a:	429a      	cmp	r2, r3
 800613c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006144:	fbb2 f6f3 	udiv	r6, r2, r3
 8006148:	d331      	bcc.n	80061ae <quorem+0x9e>
 800614a:	f04f 0e00 	mov.w	lr, #0
 800614e:	4640      	mov	r0, r8
 8006150:	46ac      	mov	ip, r5
 8006152:	46f2      	mov	sl, lr
 8006154:	f850 2b04 	ldr.w	r2, [r0], #4
 8006158:	b293      	uxth	r3, r2
 800615a:	fb06 e303 	mla	r3, r6, r3, lr
 800615e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006162:	b29b      	uxth	r3, r3
 8006164:	ebaa 0303 	sub.w	r3, sl, r3
 8006168:	f8dc a000 	ldr.w	sl, [ip]
 800616c:	0c12      	lsrs	r2, r2, #16
 800616e:	fa13 f38a 	uxtah	r3, r3, sl
 8006172:	fb06 e202 	mla	r2, r6, r2, lr
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800617e:	b292      	uxth	r2, r2
 8006180:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006188:	f8bd 3000 	ldrh.w	r3, [sp]
 800618c:	4581      	cmp	r9, r0
 800618e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006192:	f84c 3b04 	str.w	r3, [ip], #4
 8006196:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800619a:	d2db      	bcs.n	8006154 <quorem+0x44>
 800619c:	f855 300b 	ldr.w	r3, [r5, fp]
 80061a0:	b92b      	cbnz	r3, 80061ae <quorem+0x9e>
 80061a2:	9b01      	ldr	r3, [sp, #4]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	429d      	cmp	r5, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	d32e      	bcc.n	800620a <quorem+0xfa>
 80061ac:	613c      	str	r4, [r7, #16]
 80061ae:	4638      	mov	r0, r7
 80061b0:	f001 fc90 	bl	8007ad4 <__mcmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	db24      	blt.n	8006202 <quorem+0xf2>
 80061b8:	3601      	adds	r6, #1
 80061ba:	4628      	mov	r0, r5
 80061bc:	f04f 0c00 	mov.w	ip, #0
 80061c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80061c4:	f8d0 e000 	ldr.w	lr, [r0]
 80061c8:	b293      	uxth	r3, r2
 80061ca:	ebac 0303 	sub.w	r3, ip, r3
 80061ce:	0c12      	lsrs	r2, r2, #16
 80061d0:	fa13 f38e 	uxtah	r3, r3, lr
 80061d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061e2:	45c1      	cmp	r9, r8
 80061e4:	f840 3b04 	str.w	r3, [r0], #4
 80061e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061ec:	d2e8      	bcs.n	80061c0 <quorem+0xb0>
 80061ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061f6:	b922      	cbnz	r2, 8006202 <quorem+0xf2>
 80061f8:	3b04      	subs	r3, #4
 80061fa:	429d      	cmp	r5, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	d30a      	bcc.n	8006216 <quorem+0x106>
 8006200:	613c      	str	r4, [r7, #16]
 8006202:	4630      	mov	r0, r6
 8006204:	b003      	add	sp, #12
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	3b04      	subs	r3, #4
 800620e:	2a00      	cmp	r2, #0
 8006210:	d1cc      	bne.n	80061ac <quorem+0x9c>
 8006212:	3c01      	subs	r4, #1
 8006214:	e7c7      	b.n	80061a6 <quorem+0x96>
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	3b04      	subs	r3, #4
 800621a:	2a00      	cmp	r2, #0
 800621c:	d1f0      	bne.n	8006200 <quorem+0xf0>
 800621e:	3c01      	subs	r4, #1
 8006220:	e7eb      	b.n	80061fa <quorem+0xea>
 8006222:	2000      	movs	r0, #0
 8006224:	e7ee      	b.n	8006204 <quorem+0xf4>
	...

08006228 <_dtoa_r>:
 8006228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	ed2d 8b04 	vpush	{d8-d9}
 8006230:	ec57 6b10 	vmov	r6, r7, d0
 8006234:	b093      	sub	sp, #76	; 0x4c
 8006236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006238:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800623c:	9106      	str	r1, [sp, #24]
 800623e:	ee10 aa10 	vmov	sl, s0
 8006242:	4604      	mov	r4, r0
 8006244:	9209      	str	r2, [sp, #36]	; 0x24
 8006246:	930c      	str	r3, [sp, #48]	; 0x30
 8006248:	46bb      	mov	fp, r7
 800624a:	b975      	cbnz	r5, 800626a <_dtoa_r+0x42>
 800624c:	2010      	movs	r0, #16
 800624e:	f001 f94d 	bl	80074ec <malloc>
 8006252:	4602      	mov	r2, r0
 8006254:	6260      	str	r0, [r4, #36]	; 0x24
 8006256:	b920      	cbnz	r0, 8006262 <_dtoa_r+0x3a>
 8006258:	4ba7      	ldr	r3, [pc, #668]	; (80064f8 <_dtoa_r+0x2d0>)
 800625a:	21ea      	movs	r1, #234	; 0xea
 800625c:	48a7      	ldr	r0, [pc, #668]	; (80064fc <_dtoa_r+0x2d4>)
 800625e:	f002 f8bd 	bl	80083dc <__assert_func>
 8006262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006266:	6005      	str	r5, [r0, #0]
 8006268:	60c5      	str	r5, [r0, #12]
 800626a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	b151      	cbz	r1, 8006286 <_dtoa_r+0x5e>
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	604a      	str	r2, [r1, #4]
 8006274:	2301      	movs	r3, #1
 8006276:	4093      	lsls	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
 800627a:	4620      	mov	r0, r4
 800627c:	f001 f99e 	bl	80075bc <_Bfree>
 8006280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	1e3b      	subs	r3, r7, #0
 8006288:	bfaa      	itet	ge
 800628a:	2300      	movge	r3, #0
 800628c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006290:	f8c8 3000 	strge.w	r3, [r8]
 8006294:	4b9a      	ldr	r3, [pc, #616]	; (8006500 <_dtoa_r+0x2d8>)
 8006296:	bfbc      	itt	lt
 8006298:	2201      	movlt	r2, #1
 800629a:	f8c8 2000 	strlt.w	r2, [r8]
 800629e:	ea33 030b 	bics.w	r3, r3, fp
 80062a2:	d11b      	bne.n	80062dc <_dtoa_r+0xb4>
 80062a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062b0:	4333      	orrs	r3, r6
 80062b2:	f000 8592 	beq.w	8006dda <_dtoa_r+0xbb2>
 80062b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b8:	b963      	cbnz	r3, 80062d4 <_dtoa_r+0xac>
 80062ba:	4b92      	ldr	r3, [pc, #584]	; (8006504 <_dtoa_r+0x2dc>)
 80062bc:	e022      	b.n	8006304 <_dtoa_r+0xdc>
 80062be:	4b92      	ldr	r3, [pc, #584]	; (8006508 <_dtoa_r+0x2e0>)
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	3308      	adds	r3, #8
 80062c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	9801      	ldr	r0, [sp, #4]
 80062ca:	b013      	add	sp, #76	; 0x4c
 80062cc:	ecbd 8b04 	vpop	{d8-d9}
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <_dtoa_r+0x2dc>)
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	3303      	adds	r3, #3
 80062da:	e7f3      	b.n	80062c4 <_dtoa_r+0x9c>
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	4650      	mov	r0, sl
 80062e2:	4659      	mov	r1, fp
 80062e4:	f7fa fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80062e8:	ec4b ab19 	vmov	d9, sl, fp
 80062ec:	4680      	mov	r8, r0
 80062ee:	b158      	cbz	r0, 8006308 <_dtoa_r+0xe0>
 80062f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f2:	2301      	movs	r3, #1
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 856b 	beq.w	8006dd4 <_dtoa_r+0xbac>
 80062fe:	4883      	ldr	r0, [pc, #524]	; (800650c <_dtoa_r+0x2e4>)
 8006300:	6018      	str	r0, [r3, #0]
 8006302:	1e43      	subs	r3, r0, #1
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	e7df      	b.n	80062c8 <_dtoa_r+0xa0>
 8006308:	ec4b ab10 	vmov	d0, sl, fp
 800630c:	aa10      	add	r2, sp, #64	; 0x40
 800630e:	a911      	add	r1, sp, #68	; 0x44
 8006310:	4620      	mov	r0, r4
 8006312:	f001 fd01 	bl	8007d18 <__d2b>
 8006316:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800631a:	ee08 0a10 	vmov	s16, r0
 800631e:	2d00      	cmp	r5, #0
 8006320:	f000 8084 	beq.w	800642c <_dtoa_r+0x204>
 8006324:	ee19 3a90 	vmov	r3, s19
 8006328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800632c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006330:	4656      	mov	r6, sl
 8006332:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800633a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800633e:	4b74      	ldr	r3, [pc, #464]	; (8006510 <_dtoa_r+0x2e8>)
 8006340:	2200      	movs	r2, #0
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	f7f9 ffa7 	bl	8000298 <__aeabi_dsub>
 800634a:	a365      	add	r3, pc, #404	; (adr r3, 80064e0 <_dtoa_r+0x2b8>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f7fa f95a 	bl	8000608 <__aeabi_dmul>
 8006354:	a364      	add	r3, pc, #400	; (adr r3, 80064e8 <_dtoa_r+0x2c0>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7f9 ff9f 	bl	800029c <__adddf3>
 800635e:	4606      	mov	r6, r0
 8006360:	4628      	mov	r0, r5
 8006362:	460f      	mov	r7, r1
 8006364:	f7fa f8e6 	bl	8000534 <__aeabi_i2d>
 8006368:	a361      	add	r3, pc, #388	; (adr r3, 80064f0 <_dtoa_r+0x2c8>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa f94b 	bl	8000608 <__aeabi_dmul>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4630      	mov	r0, r6
 8006378:	4639      	mov	r1, r7
 800637a:	f7f9 ff8f 	bl	800029c <__adddf3>
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	f7fa fbf1 	bl	8000b68 <__aeabi_d2iz>
 8006386:	2200      	movs	r2, #0
 8006388:	9000      	str	r0, [sp, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f7fa fbac 	bl	8000aec <__aeabi_dcmplt>
 8006394:	b150      	cbz	r0, 80063ac <_dtoa_r+0x184>
 8006396:	9800      	ldr	r0, [sp, #0]
 8006398:	f7fa f8cc 	bl	8000534 <__aeabi_i2d>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	f7fa fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80063a4:	b910      	cbnz	r0, 80063ac <_dtoa_r+0x184>
 80063a6:	9b00      	ldr	r3, [sp, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	9b00      	ldr	r3, [sp, #0]
 80063ae:	2b16      	cmp	r3, #22
 80063b0:	d85a      	bhi.n	8006468 <_dtoa_r+0x240>
 80063b2:	9a00      	ldr	r2, [sp, #0]
 80063b4:	4b57      	ldr	r3, [pc, #348]	; (8006514 <_dtoa_r+0x2ec>)
 80063b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	ec51 0b19 	vmov	r0, r1, d9
 80063c2:	f7fa fb93 	bl	8000aec <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d050      	beq.n	800646c <_dtoa_r+0x244>
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063d6:	1b5d      	subs	r5, r3, r5
 80063d8:	1e6b      	subs	r3, r5, #1
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	bf45      	ittet	mi
 80063de:	f1c5 0301 	rsbmi	r3, r5, #1
 80063e2:	9304      	strmi	r3, [sp, #16]
 80063e4:	2300      	movpl	r3, #0
 80063e6:	2300      	movmi	r3, #0
 80063e8:	bf4c      	ite	mi
 80063ea:	9305      	strmi	r3, [sp, #20]
 80063ec:	9304      	strpl	r3, [sp, #16]
 80063ee:	9b00      	ldr	r3, [sp, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db3d      	blt.n	8006470 <_dtoa_r+0x248>
 80063f4:	9b05      	ldr	r3, [sp, #20]
 80063f6:	9a00      	ldr	r2, [sp, #0]
 80063f8:	920a      	str	r2, [sp, #40]	; 0x28
 80063fa:	4413      	add	r3, r2
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	2300      	movs	r3, #0
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	9b06      	ldr	r3, [sp, #24]
 8006404:	2b09      	cmp	r3, #9
 8006406:	f200 8089 	bhi.w	800651c <_dtoa_r+0x2f4>
 800640a:	2b05      	cmp	r3, #5
 800640c:	bfc4      	itt	gt
 800640e:	3b04      	subgt	r3, #4
 8006410:	9306      	strgt	r3, [sp, #24]
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	f1a3 0302 	sub.w	r3, r3, #2
 8006418:	bfcc      	ite	gt
 800641a:	2500      	movgt	r5, #0
 800641c:	2501      	movle	r5, #1
 800641e:	2b03      	cmp	r3, #3
 8006420:	f200 8087 	bhi.w	8006532 <_dtoa_r+0x30a>
 8006424:	e8df f003 	tbb	[pc, r3]
 8006428:	59383a2d 	.word	0x59383a2d
 800642c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006430:	441d      	add	r5, r3
 8006432:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006436:	2b20      	cmp	r3, #32
 8006438:	bfc1      	itttt	gt
 800643a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800643e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006442:	fa0b f303 	lslgt.w	r3, fp, r3
 8006446:	fa26 f000 	lsrgt.w	r0, r6, r0
 800644a:	bfda      	itte	le
 800644c:	f1c3 0320 	rsble	r3, r3, #32
 8006450:	fa06 f003 	lslle.w	r0, r6, r3
 8006454:	4318      	orrgt	r0, r3
 8006456:	f7fa f85d 	bl	8000514 <__aeabi_ui2d>
 800645a:	2301      	movs	r3, #1
 800645c:	4606      	mov	r6, r0
 800645e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006462:	3d01      	subs	r5, #1
 8006464:	930e      	str	r3, [sp, #56]	; 0x38
 8006466:	e76a      	b.n	800633e <_dtoa_r+0x116>
 8006468:	2301      	movs	r3, #1
 800646a:	e7b2      	b.n	80063d2 <_dtoa_r+0x1aa>
 800646c:	900b      	str	r0, [sp, #44]	; 0x2c
 800646e:	e7b1      	b.n	80063d4 <_dtoa_r+0x1ac>
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	9a00      	ldr	r2, [sp, #0]
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	4253      	negs	r3, r2
 800647a:	9307      	str	r3, [sp, #28]
 800647c:	2300      	movs	r3, #0
 800647e:	930a      	str	r3, [sp, #40]	; 0x28
 8006480:	e7bf      	b.n	8006402 <_dtoa_r+0x1da>
 8006482:	2300      	movs	r3, #0
 8006484:	9308      	str	r3, [sp, #32]
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc55      	bgt.n	8006538 <_dtoa_r+0x310>
 800648c:	2301      	movs	r3, #1
 800648e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006492:	461a      	mov	r2, r3
 8006494:	9209      	str	r2, [sp, #36]	; 0x24
 8006496:	e00c      	b.n	80064b2 <_dtoa_r+0x28a>
 8006498:	2301      	movs	r3, #1
 800649a:	e7f3      	b.n	8006484 <_dtoa_r+0x25c>
 800649c:	2300      	movs	r3, #0
 800649e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	9b00      	ldr	r3, [sp, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	3301      	adds	r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	bfb8      	it	lt
 80064b0:	2301      	movlt	r3, #1
 80064b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064b4:	2200      	movs	r2, #0
 80064b6:	6042      	str	r2, [r0, #4]
 80064b8:	2204      	movs	r2, #4
 80064ba:	f102 0614 	add.w	r6, r2, #20
 80064be:	429e      	cmp	r6, r3
 80064c0:	6841      	ldr	r1, [r0, #4]
 80064c2:	d93d      	bls.n	8006540 <_dtoa_r+0x318>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 f839 	bl	800753c <_Balloc>
 80064ca:	9001      	str	r0, [sp, #4]
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d13b      	bne.n	8006548 <_dtoa_r+0x320>
 80064d0:	4b11      	ldr	r3, [pc, #68]	; (8006518 <_dtoa_r+0x2f0>)
 80064d2:	4602      	mov	r2, r0
 80064d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064d8:	e6c0      	b.n	800625c <_dtoa_r+0x34>
 80064da:	2301      	movs	r3, #1
 80064dc:	e7df      	b.n	800649e <_dtoa_r+0x276>
 80064de:	bf00      	nop
 80064e0:	636f4361 	.word	0x636f4361
 80064e4:	3fd287a7 	.word	0x3fd287a7
 80064e8:	8b60c8b3 	.word	0x8b60c8b3
 80064ec:	3fc68a28 	.word	0x3fc68a28
 80064f0:	509f79fb 	.word	0x509f79fb
 80064f4:	3fd34413 	.word	0x3fd34413
 80064f8:	08009e96 	.word	0x08009e96
 80064fc:	08009ead 	.word	0x08009ead
 8006500:	7ff00000 	.word	0x7ff00000
 8006504:	08009e92 	.word	0x08009e92
 8006508:	08009e89 	.word	0x08009e89
 800650c:	08009d0d 	.word	0x08009d0d
 8006510:	3ff80000 	.word	0x3ff80000
 8006514:	0800a018 	.word	0x0800a018
 8006518:	08009f08 	.word	0x08009f08
 800651c:	2501      	movs	r5, #1
 800651e:	2300      	movs	r3, #0
 8006520:	9306      	str	r3, [sp, #24]
 8006522:	9508      	str	r5, [sp, #32]
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	2312      	movs	r3, #18
 8006530:	e7b0      	b.n	8006494 <_dtoa_r+0x26c>
 8006532:	2301      	movs	r3, #1
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	e7f5      	b.n	8006524 <_dtoa_r+0x2fc>
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800653e:	e7b8      	b.n	80064b2 <_dtoa_r+0x28a>
 8006540:	3101      	adds	r1, #1
 8006542:	6041      	str	r1, [r0, #4]
 8006544:	0052      	lsls	r2, r2, #1
 8006546:	e7b8      	b.n	80064ba <_dtoa_r+0x292>
 8006548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654a:	9a01      	ldr	r2, [sp, #4]
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	2b0e      	cmp	r3, #14
 8006552:	f200 809d 	bhi.w	8006690 <_dtoa_r+0x468>
 8006556:	2d00      	cmp	r5, #0
 8006558:	f000 809a 	beq.w	8006690 <_dtoa_r+0x468>
 800655c:	9b00      	ldr	r3, [sp, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	dd32      	ble.n	80065c8 <_dtoa_r+0x3a0>
 8006562:	4ab7      	ldr	r2, [pc, #732]	; (8006840 <_dtoa_r+0x618>)
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800656c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	05d8      	lsls	r0, r3, #23
 8006574:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006578:	d516      	bpl.n	80065a8 <_dtoa_r+0x380>
 800657a:	4bb2      	ldr	r3, [pc, #712]	; (8006844 <_dtoa_r+0x61c>)
 800657c:	ec51 0b19 	vmov	r0, r1, d9
 8006580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006584:	f7fa f96a 	bl	800085c <__aeabi_ddiv>
 8006588:	f007 070f 	and.w	r7, r7, #15
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	2503      	movs	r5, #3
 8006592:	4eac      	ldr	r6, [pc, #688]	; (8006844 <_dtoa_r+0x61c>)
 8006594:	b957      	cbnz	r7, 80065ac <_dtoa_r+0x384>
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	4650      	mov	r0, sl
 800659c:	4659      	mov	r1, fp
 800659e:	f7fa f95d 	bl	800085c <__aeabi_ddiv>
 80065a2:	4682      	mov	sl, r0
 80065a4:	468b      	mov	fp, r1
 80065a6:	e028      	b.n	80065fa <_dtoa_r+0x3d2>
 80065a8:	2502      	movs	r5, #2
 80065aa:	e7f2      	b.n	8006592 <_dtoa_r+0x36a>
 80065ac:	07f9      	lsls	r1, r7, #31
 80065ae:	d508      	bpl.n	80065c2 <_dtoa_r+0x39a>
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065b8:	f7fa f826 	bl	8000608 <__aeabi_dmul>
 80065bc:	3501      	adds	r5, #1
 80065be:	4680      	mov	r8, r0
 80065c0:	4689      	mov	r9, r1
 80065c2:	107f      	asrs	r7, r7, #1
 80065c4:	3608      	adds	r6, #8
 80065c6:	e7e5      	b.n	8006594 <_dtoa_r+0x36c>
 80065c8:	f000 809b 	beq.w	8006702 <_dtoa_r+0x4da>
 80065cc:	9b00      	ldr	r3, [sp, #0]
 80065ce:	4f9d      	ldr	r7, [pc, #628]	; (8006844 <_dtoa_r+0x61c>)
 80065d0:	425e      	negs	r6, r3
 80065d2:	4b9b      	ldr	r3, [pc, #620]	; (8006840 <_dtoa_r+0x618>)
 80065d4:	f006 020f 	and.w	r2, r6, #15
 80065d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	ec51 0b19 	vmov	r0, r1, d9
 80065e4:	f7fa f810 	bl	8000608 <__aeabi_dmul>
 80065e8:	1136      	asrs	r6, r6, #4
 80065ea:	4682      	mov	sl, r0
 80065ec:	468b      	mov	fp, r1
 80065ee:	2300      	movs	r3, #0
 80065f0:	2502      	movs	r5, #2
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	d17a      	bne.n	80066ec <_dtoa_r+0x4c4>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1d3      	bne.n	80065a2 <_dtoa_r+0x37a>
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8082 	beq.w	8006706 <_dtoa_r+0x4de>
 8006602:	4b91      	ldr	r3, [pc, #580]	; (8006848 <_dtoa_r+0x620>)
 8006604:	2200      	movs	r2, #0
 8006606:	4650      	mov	r0, sl
 8006608:	4659      	mov	r1, fp
 800660a:	f7fa fa6f 	bl	8000aec <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d079      	beq.n	8006706 <_dtoa_r+0x4de>
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d076      	beq.n	8006706 <_dtoa_r+0x4de>
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dd36      	ble.n	800668c <_dtoa_r+0x464>
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	1e5f      	subs	r7, r3, #1
 8006626:	2200      	movs	r2, #0
 8006628:	4b88      	ldr	r3, [pc, #544]	; (800684c <_dtoa_r+0x624>)
 800662a:	f7f9 ffed 	bl	8000608 <__aeabi_dmul>
 800662e:	9e02      	ldr	r6, [sp, #8]
 8006630:	4682      	mov	sl, r0
 8006632:	468b      	mov	fp, r1
 8006634:	3501      	adds	r5, #1
 8006636:	4628      	mov	r0, r5
 8006638:	f7f9 ff7c 	bl	8000534 <__aeabi_i2d>
 800663c:	4652      	mov	r2, sl
 800663e:	465b      	mov	r3, fp
 8006640:	f7f9 ffe2 	bl	8000608 <__aeabi_dmul>
 8006644:	4b82      	ldr	r3, [pc, #520]	; (8006850 <_dtoa_r+0x628>)
 8006646:	2200      	movs	r2, #0
 8006648:	f7f9 fe28 	bl	800029c <__adddf3>
 800664c:	46d0      	mov	r8, sl
 800664e:	46d9      	mov	r9, fp
 8006650:	4682      	mov	sl, r0
 8006652:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006656:	2e00      	cmp	r6, #0
 8006658:	d158      	bne.n	800670c <_dtoa_r+0x4e4>
 800665a:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <_dtoa_r+0x62c>)
 800665c:	2200      	movs	r2, #0
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7f9 fe19 	bl	8000298 <__aeabi_dsub>
 8006666:	4652      	mov	r2, sl
 8006668:	465b      	mov	r3, fp
 800666a:	4680      	mov	r8, r0
 800666c:	4689      	mov	r9, r1
 800666e:	f7fa fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006672:	2800      	cmp	r0, #0
 8006674:	f040 8295 	bne.w	8006ba2 <_dtoa_r+0x97a>
 8006678:	4652      	mov	r2, sl
 800667a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800667e:	4640      	mov	r0, r8
 8006680:	4649      	mov	r1, r9
 8006682:	f7fa fa33 	bl	8000aec <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	f040 8289 	bne.w	8006b9e <_dtoa_r+0x976>
 800668c:	ec5b ab19 	vmov	sl, fp, d9
 8006690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006692:	2b00      	cmp	r3, #0
 8006694:	f2c0 8148 	blt.w	8006928 <_dtoa_r+0x700>
 8006698:	9a00      	ldr	r2, [sp, #0]
 800669a:	2a0e      	cmp	r2, #14
 800669c:	f300 8144 	bgt.w	8006928 <_dtoa_r+0x700>
 80066a0:	4b67      	ldr	r3, [pc, #412]	; (8006840 <_dtoa_r+0x618>)
 80066a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f280 80d5 	bge.w	800685c <_dtoa_r+0x634>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f300 80d1 	bgt.w	800685c <_dtoa_r+0x634>
 80066ba:	f040 826f 	bne.w	8006b9c <_dtoa_r+0x974>
 80066be:	4b65      	ldr	r3, [pc, #404]	; (8006854 <_dtoa_r+0x62c>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	4640      	mov	r0, r8
 80066c4:	4649      	mov	r1, r9
 80066c6:	f7f9 ff9f 	bl	8000608 <__aeabi_dmul>
 80066ca:	4652      	mov	r2, sl
 80066cc:	465b      	mov	r3, fp
 80066ce:	f7fa fa21 	bl	8000b14 <__aeabi_dcmpge>
 80066d2:	9e03      	ldr	r6, [sp, #12]
 80066d4:	4637      	mov	r7, r6
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f040 8245 	bne.w	8006b66 <_dtoa_r+0x93e>
 80066dc:	9d01      	ldr	r5, [sp, #4]
 80066de:	2331      	movs	r3, #49	; 0x31
 80066e0:	f805 3b01 	strb.w	r3, [r5], #1
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	e240      	b.n	8006b6e <_dtoa_r+0x946>
 80066ec:	07f2      	lsls	r2, r6, #31
 80066ee:	d505      	bpl.n	80066fc <_dtoa_r+0x4d4>
 80066f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f4:	f7f9 ff88 	bl	8000608 <__aeabi_dmul>
 80066f8:	3501      	adds	r5, #1
 80066fa:	2301      	movs	r3, #1
 80066fc:	1076      	asrs	r6, r6, #1
 80066fe:	3708      	adds	r7, #8
 8006700:	e777      	b.n	80065f2 <_dtoa_r+0x3ca>
 8006702:	2502      	movs	r5, #2
 8006704:	e779      	b.n	80065fa <_dtoa_r+0x3d2>
 8006706:	9f00      	ldr	r7, [sp, #0]
 8006708:	9e03      	ldr	r6, [sp, #12]
 800670a:	e794      	b.n	8006636 <_dtoa_r+0x40e>
 800670c:	9901      	ldr	r1, [sp, #4]
 800670e:	4b4c      	ldr	r3, [pc, #304]	; (8006840 <_dtoa_r+0x618>)
 8006710:	4431      	add	r1, r6
 8006712:	910d      	str	r1, [sp, #52]	; 0x34
 8006714:	9908      	ldr	r1, [sp, #32]
 8006716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800671a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800671e:	2900      	cmp	r1, #0
 8006720:	d043      	beq.n	80067aa <_dtoa_r+0x582>
 8006722:	494d      	ldr	r1, [pc, #308]	; (8006858 <_dtoa_r+0x630>)
 8006724:	2000      	movs	r0, #0
 8006726:	f7fa f899 	bl	800085c <__aeabi_ddiv>
 800672a:	4652      	mov	r2, sl
 800672c:	465b      	mov	r3, fp
 800672e:	f7f9 fdb3 	bl	8000298 <__aeabi_dsub>
 8006732:	9d01      	ldr	r5, [sp, #4]
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	4649      	mov	r1, r9
 800673a:	4640      	mov	r0, r8
 800673c:	f7fa fa14 	bl	8000b68 <__aeabi_d2iz>
 8006740:	4606      	mov	r6, r0
 8006742:	f7f9 fef7 	bl	8000534 <__aeabi_i2d>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7f9 fda3 	bl	8000298 <__aeabi_dsub>
 8006752:	3630      	adds	r6, #48	; 0x30
 8006754:	f805 6b01 	strb.w	r6, [r5], #1
 8006758:	4652      	mov	r2, sl
 800675a:	465b      	mov	r3, fp
 800675c:	4680      	mov	r8, r0
 800675e:	4689      	mov	r9, r1
 8006760:	f7fa f9c4 	bl	8000aec <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	d163      	bne.n	8006830 <_dtoa_r+0x608>
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	4936      	ldr	r1, [pc, #216]	; (8006848 <_dtoa_r+0x620>)
 800676e:	2000      	movs	r0, #0
 8006770:	f7f9 fd92 	bl	8000298 <__aeabi_dsub>
 8006774:	4652      	mov	r2, sl
 8006776:	465b      	mov	r3, fp
 8006778:	f7fa f9b8 	bl	8000aec <__aeabi_dcmplt>
 800677c:	2800      	cmp	r0, #0
 800677e:	f040 80b5 	bne.w	80068ec <_dtoa_r+0x6c4>
 8006782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006784:	429d      	cmp	r5, r3
 8006786:	d081      	beq.n	800668c <_dtoa_r+0x464>
 8006788:	4b30      	ldr	r3, [pc, #192]	; (800684c <_dtoa_r+0x624>)
 800678a:	2200      	movs	r2, #0
 800678c:	4650      	mov	r0, sl
 800678e:	4659      	mov	r1, fp
 8006790:	f7f9 ff3a 	bl	8000608 <__aeabi_dmul>
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <_dtoa_r+0x624>)
 8006796:	4682      	mov	sl, r0
 8006798:	468b      	mov	fp, r1
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	2200      	movs	r2, #0
 80067a0:	f7f9 ff32 	bl	8000608 <__aeabi_dmul>
 80067a4:	4680      	mov	r8, r0
 80067a6:	4689      	mov	r9, r1
 80067a8:	e7c6      	b.n	8006738 <_dtoa_r+0x510>
 80067aa:	4650      	mov	r0, sl
 80067ac:	4659      	mov	r1, fp
 80067ae:	f7f9 ff2b 	bl	8000608 <__aeabi_dmul>
 80067b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b4:	9d01      	ldr	r5, [sp, #4]
 80067b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80067b8:	4682      	mov	sl, r0
 80067ba:	468b      	mov	fp, r1
 80067bc:	4649      	mov	r1, r9
 80067be:	4640      	mov	r0, r8
 80067c0:	f7fa f9d2 	bl	8000b68 <__aeabi_d2iz>
 80067c4:	4606      	mov	r6, r0
 80067c6:	f7f9 feb5 	bl	8000534 <__aeabi_i2d>
 80067ca:	3630      	adds	r6, #48	; 0x30
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7f9 fd60 	bl	8000298 <__aeabi_dsub>
 80067d8:	f805 6b01 	strb.w	r6, [r5], #1
 80067dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067de:	429d      	cmp	r5, r3
 80067e0:	4680      	mov	r8, r0
 80067e2:	4689      	mov	r9, r1
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	d124      	bne.n	8006834 <_dtoa_r+0x60c>
 80067ea:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <_dtoa_r+0x630>)
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	f7f9 fd54 	bl	800029c <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4640      	mov	r0, r8
 80067fa:	4649      	mov	r1, r9
 80067fc:	f7fa f994 	bl	8000b28 <__aeabi_dcmpgt>
 8006800:	2800      	cmp	r0, #0
 8006802:	d173      	bne.n	80068ec <_dtoa_r+0x6c4>
 8006804:	4652      	mov	r2, sl
 8006806:	465b      	mov	r3, fp
 8006808:	4913      	ldr	r1, [pc, #76]	; (8006858 <_dtoa_r+0x630>)
 800680a:	2000      	movs	r0, #0
 800680c:	f7f9 fd44 	bl	8000298 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7fa f968 	bl	8000aec <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	f43f af35 	beq.w	800668c <_dtoa_r+0x464>
 8006822:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006824:	1e6b      	subs	r3, r5, #1
 8006826:	930f      	str	r3, [sp, #60]	; 0x3c
 8006828:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800682c:	2b30      	cmp	r3, #48	; 0x30
 800682e:	d0f8      	beq.n	8006822 <_dtoa_r+0x5fa>
 8006830:	9700      	str	r7, [sp, #0]
 8006832:	e049      	b.n	80068c8 <_dtoa_r+0x6a0>
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <_dtoa_r+0x624>)
 8006836:	f7f9 fee7 	bl	8000608 <__aeabi_dmul>
 800683a:	4680      	mov	r8, r0
 800683c:	4689      	mov	r9, r1
 800683e:	e7bd      	b.n	80067bc <_dtoa_r+0x594>
 8006840:	0800a018 	.word	0x0800a018
 8006844:	08009ff0 	.word	0x08009ff0
 8006848:	3ff00000 	.word	0x3ff00000
 800684c:	40240000 	.word	0x40240000
 8006850:	401c0000 	.word	0x401c0000
 8006854:	40140000 	.word	0x40140000
 8006858:	3fe00000 	.word	0x3fe00000
 800685c:	9d01      	ldr	r5, [sp, #4]
 800685e:	4656      	mov	r6, sl
 8006860:	465f      	mov	r7, fp
 8006862:	4642      	mov	r2, r8
 8006864:	464b      	mov	r3, r9
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7f9 fff7 	bl	800085c <__aeabi_ddiv>
 800686e:	f7fa f97b 	bl	8000b68 <__aeabi_d2iz>
 8006872:	4682      	mov	sl, r0
 8006874:	f7f9 fe5e 	bl	8000534 <__aeabi_i2d>
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	f7f9 fec4 	bl	8000608 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800688c:	f7f9 fd04 	bl	8000298 <__aeabi_dsub>
 8006890:	f805 6b01 	strb.w	r6, [r5], #1
 8006894:	9e01      	ldr	r6, [sp, #4]
 8006896:	9f03      	ldr	r7, [sp, #12]
 8006898:	1bae      	subs	r6, r5, r6
 800689a:	42b7      	cmp	r7, r6
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	d135      	bne.n	800690e <_dtoa_r+0x6e6>
 80068a2:	f7f9 fcfb 	bl	800029c <__adddf3>
 80068a6:	4642      	mov	r2, r8
 80068a8:	464b      	mov	r3, r9
 80068aa:	4606      	mov	r6, r0
 80068ac:	460f      	mov	r7, r1
 80068ae:	f7fa f93b 	bl	8000b28 <__aeabi_dcmpgt>
 80068b2:	b9d0      	cbnz	r0, 80068ea <_dtoa_r+0x6c2>
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7fa f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 80068c0:	b110      	cbz	r0, 80068c8 <_dtoa_r+0x6a0>
 80068c2:	f01a 0f01 	tst.w	sl, #1
 80068c6:	d110      	bne.n	80068ea <_dtoa_r+0x6c2>
 80068c8:	4620      	mov	r0, r4
 80068ca:	ee18 1a10 	vmov	r1, s16
 80068ce:	f000 fe75 	bl	80075bc <_Bfree>
 80068d2:	2300      	movs	r3, #0
 80068d4:	9800      	ldr	r0, [sp, #0]
 80068d6:	702b      	strb	r3, [r5, #0]
 80068d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068da:	3001      	adds	r0, #1
 80068dc:	6018      	str	r0, [r3, #0]
 80068de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f43f acf1 	beq.w	80062c8 <_dtoa_r+0xa0>
 80068e6:	601d      	str	r5, [r3, #0]
 80068e8:	e4ee      	b.n	80062c8 <_dtoa_r+0xa0>
 80068ea:	9f00      	ldr	r7, [sp, #0]
 80068ec:	462b      	mov	r3, r5
 80068ee:	461d      	mov	r5, r3
 80068f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068f4:	2a39      	cmp	r2, #57	; 0x39
 80068f6:	d106      	bne.n	8006906 <_dtoa_r+0x6de>
 80068f8:	9a01      	ldr	r2, [sp, #4]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d1f7      	bne.n	80068ee <_dtoa_r+0x6c6>
 80068fe:	9901      	ldr	r1, [sp, #4]
 8006900:	2230      	movs	r2, #48	; 0x30
 8006902:	3701      	adds	r7, #1
 8006904:	700a      	strb	r2, [r1, #0]
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	3201      	adds	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e790      	b.n	8006830 <_dtoa_r+0x608>
 800690e:	4ba6      	ldr	r3, [pc, #664]	; (8006ba8 <_dtoa_r+0x980>)
 8006910:	2200      	movs	r2, #0
 8006912:	f7f9 fe79 	bl	8000608 <__aeabi_dmul>
 8006916:	2200      	movs	r2, #0
 8006918:	2300      	movs	r3, #0
 800691a:	4606      	mov	r6, r0
 800691c:	460f      	mov	r7, r1
 800691e:	f7fa f8db 	bl	8000ad8 <__aeabi_dcmpeq>
 8006922:	2800      	cmp	r0, #0
 8006924:	d09d      	beq.n	8006862 <_dtoa_r+0x63a>
 8006926:	e7cf      	b.n	80068c8 <_dtoa_r+0x6a0>
 8006928:	9a08      	ldr	r2, [sp, #32]
 800692a:	2a00      	cmp	r2, #0
 800692c:	f000 80d7 	beq.w	8006ade <_dtoa_r+0x8b6>
 8006930:	9a06      	ldr	r2, [sp, #24]
 8006932:	2a01      	cmp	r2, #1
 8006934:	f300 80ba 	bgt.w	8006aac <_dtoa_r+0x884>
 8006938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800693a:	2a00      	cmp	r2, #0
 800693c:	f000 80b2 	beq.w	8006aa4 <_dtoa_r+0x87c>
 8006940:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006944:	9e07      	ldr	r6, [sp, #28]
 8006946:	9d04      	ldr	r5, [sp, #16]
 8006948:	9a04      	ldr	r2, [sp, #16]
 800694a:	441a      	add	r2, r3
 800694c:	9204      	str	r2, [sp, #16]
 800694e:	9a05      	ldr	r2, [sp, #20]
 8006950:	2101      	movs	r1, #1
 8006952:	441a      	add	r2, r3
 8006954:	4620      	mov	r0, r4
 8006956:	9205      	str	r2, [sp, #20]
 8006958:	f000 ff32 	bl	80077c0 <__i2b>
 800695c:	4607      	mov	r7, r0
 800695e:	2d00      	cmp	r5, #0
 8006960:	dd0c      	ble.n	800697c <_dtoa_r+0x754>
 8006962:	9b05      	ldr	r3, [sp, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd09      	ble.n	800697c <_dtoa_r+0x754>
 8006968:	42ab      	cmp	r3, r5
 800696a:	9a04      	ldr	r2, [sp, #16]
 800696c:	bfa8      	it	ge
 800696e:	462b      	movge	r3, r5
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	9204      	str	r2, [sp, #16]
 8006974:	9a05      	ldr	r2, [sp, #20]
 8006976:	1aed      	subs	r5, r5, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	b31b      	cbz	r3, 80069c8 <_dtoa_r+0x7a0>
 8006980:	9b08      	ldr	r3, [sp, #32]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80af 	beq.w	8006ae6 <_dtoa_r+0x8be>
 8006988:	2e00      	cmp	r6, #0
 800698a:	dd13      	ble.n	80069b4 <_dtoa_r+0x78c>
 800698c:	4639      	mov	r1, r7
 800698e:	4632      	mov	r2, r6
 8006990:	4620      	mov	r0, r4
 8006992:	f000 ffd5 	bl	8007940 <__pow5mult>
 8006996:	ee18 2a10 	vmov	r2, s16
 800699a:	4601      	mov	r1, r0
 800699c:	4607      	mov	r7, r0
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 ff24 	bl	80077ec <__multiply>
 80069a4:	ee18 1a10 	vmov	r1, s16
 80069a8:	4680      	mov	r8, r0
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fe06 	bl	80075bc <_Bfree>
 80069b0:	ee08 8a10 	vmov	s16, r8
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	1b9a      	subs	r2, r3, r6
 80069b8:	d006      	beq.n	80069c8 <_dtoa_r+0x7a0>
 80069ba:	ee18 1a10 	vmov	r1, s16
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 ffbe 	bl	8007940 <__pow5mult>
 80069c4:	ee08 0a10 	vmov	s16, r0
 80069c8:	2101      	movs	r1, #1
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 fef8 	bl	80077c0 <__i2b>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	4606      	mov	r6, r0
 80069d6:	f340 8088 	ble.w	8006aea <_dtoa_r+0x8c2>
 80069da:	461a      	mov	r2, r3
 80069dc:	4601      	mov	r1, r0
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 ffae 	bl	8007940 <__pow5mult>
 80069e4:	9b06      	ldr	r3, [sp, #24]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	4606      	mov	r6, r0
 80069ea:	f340 8081 	ble.w	8006af0 <_dtoa_r+0x8c8>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	6933      	ldr	r3, [r6, #16]
 80069f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069f8:	6918      	ldr	r0, [r3, #16]
 80069fa:	f000 fe91 	bl	8007720 <__hi0bits>
 80069fe:	f1c0 0020 	rsb	r0, r0, #32
 8006a02:	9b05      	ldr	r3, [sp, #20]
 8006a04:	4418      	add	r0, r3
 8006a06:	f010 001f 	ands.w	r0, r0, #31
 8006a0a:	f000 8092 	beq.w	8006b32 <_dtoa_r+0x90a>
 8006a0e:	f1c0 0320 	rsb	r3, r0, #32
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	f340 808a 	ble.w	8006b2c <_dtoa_r+0x904>
 8006a18:	f1c0 001c 	rsb	r0, r0, #28
 8006a1c:	9b04      	ldr	r3, [sp, #16]
 8006a1e:	4403      	add	r3, r0
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	4403      	add	r3, r0
 8006a26:	4405      	add	r5, r0
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd07      	ble.n	8006a40 <_dtoa_r+0x818>
 8006a30:	ee18 1a10 	vmov	r1, s16
 8006a34:	461a      	mov	r2, r3
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 ffdc 	bl	80079f4 <__lshift>
 8006a3c:	ee08 0a10 	vmov	s16, r0
 8006a40:	9b05      	ldr	r3, [sp, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd05      	ble.n	8006a52 <_dtoa_r+0x82a>
 8006a46:	4631      	mov	r1, r6
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 ffd2 	bl	80079f4 <__lshift>
 8006a50:	4606      	mov	r6, r0
 8006a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d06e      	beq.n	8006b36 <_dtoa_r+0x90e>
 8006a58:	ee18 0a10 	vmov	r0, s16
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	f001 f839 	bl	8007ad4 <__mcmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	da67      	bge.n	8006b36 <_dtoa_r+0x90e>
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	ee18 1a10 	vmov	r1, s16
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	220a      	movs	r2, #10
 8006a72:	2300      	movs	r3, #0
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fdc3 	bl	8007600 <__multadd>
 8006a7a:	9b08      	ldr	r3, [sp, #32]
 8006a7c:	ee08 0a10 	vmov	s16, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 81b1 	beq.w	8006de8 <_dtoa_r+0xbc0>
 8006a86:	2300      	movs	r3, #0
 8006a88:	4639      	mov	r1, r7
 8006a8a:	220a      	movs	r2, #10
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fdb7 	bl	8007600 <__multadd>
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	4607      	mov	r7, r0
 8006a98:	f300 808e 	bgt.w	8006bb8 <_dtoa_r+0x990>
 8006a9c:	9b06      	ldr	r3, [sp, #24]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	dc51      	bgt.n	8006b46 <_dtoa_r+0x91e>
 8006aa2:	e089      	b.n	8006bb8 <_dtoa_r+0x990>
 8006aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aaa:	e74b      	b.n	8006944 <_dtoa_r+0x71c>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	1e5e      	subs	r6, r3, #1
 8006ab0:	9b07      	ldr	r3, [sp, #28]
 8006ab2:	42b3      	cmp	r3, r6
 8006ab4:	bfbf      	itttt	lt
 8006ab6:	9b07      	ldrlt	r3, [sp, #28]
 8006ab8:	9607      	strlt	r6, [sp, #28]
 8006aba:	1af2      	sublt	r2, r6, r3
 8006abc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006abe:	bfb6      	itet	lt
 8006ac0:	189b      	addlt	r3, r3, r2
 8006ac2:	1b9e      	subge	r6, r3, r6
 8006ac4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	bfb8      	it	lt
 8006aca:	2600      	movlt	r6, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bfb7      	itett	lt
 8006ad0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ad4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ad8:	1a9d      	sublt	r5, r3, r2
 8006ada:	2300      	movlt	r3, #0
 8006adc:	e734      	b.n	8006948 <_dtoa_r+0x720>
 8006ade:	9e07      	ldr	r6, [sp, #28]
 8006ae0:	9d04      	ldr	r5, [sp, #16]
 8006ae2:	9f08      	ldr	r7, [sp, #32]
 8006ae4:	e73b      	b.n	800695e <_dtoa_r+0x736>
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	e767      	b.n	80069ba <_dtoa_r+0x792>
 8006aea:	9b06      	ldr	r3, [sp, #24]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	dc18      	bgt.n	8006b22 <_dtoa_r+0x8fa>
 8006af0:	f1ba 0f00 	cmp.w	sl, #0
 8006af4:	d115      	bne.n	8006b22 <_dtoa_r+0x8fa>
 8006af6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006afa:	b993      	cbnz	r3, 8006b22 <_dtoa_r+0x8fa>
 8006afc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b00:	0d1b      	lsrs	r3, r3, #20
 8006b02:	051b      	lsls	r3, r3, #20
 8006b04:	b183      	cbz	r3, 8006b28 <_dtoa_r+0x900>
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	9b05      	ldr	r3, [sp, #20]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	f04f 0801 	mov.w	r8, #1
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f47f af6a 	bne.w	80069f2 <_dtoa_r+0x7ca>
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e76f      	b.n	8006a02 <_dtoa_r+0x7da>
 8006b22:	f04f 0800 	mov.w	r8, #0
 8006b26:	e7f6      	b.n	8006b16 <_dtoa_r+0x8ee>
 8006b28:	4698      	mov	r8, r3
 8006b2a:	e7f4      	b.n	8006b16 <_dtoa_r+0x8ee>
 8006b2c:	f43f af7d 	beq.w	8006a2a <_dtoa_r+0x802>
 8006b30:	4618      	mov	r0, r3
 8006b32:	301c      	adds	r0, #28
 8006b34:	e772      	b.n	8006a1c <_dtoa_r+0x7f4>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	dc37      	bgt.n	8006bac <_dtoa_r+0x984>
 8006b3c:	9b06      	ldr	r3, [sp, #24]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	dd34      	ble.n	8006bac <_dtoa_r+0x984>
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	b96b      	cbnz	r3, 8006b66 <_dtoa_r+0x93e>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	2205      	movs	r2, #5
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 fd56 	bl	8007600 <__multadd>
 8006b54:	4601      	mov	r1, r0
 8006b56:	4606      	mov	r6, r0
 8006b58:	ee18 0a10 	vmov	r0, s16
 8006b5c:	f000 ffba 	bl	8007ad4 <__mcmp>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f73f adbb 	bgt.w	80066dc <_dtoa_r+0x4b4>
 8006b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b68:	9d01      	ldr	r5, [sp, #4]
 8006b6a:	43db      	mvns	r3, r3
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	4631      	mov	r1, r6
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fd21 	bl	80075bc <_Bfree>
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	f43f aea4 	beq.w	80068c8 <_dtoa_r+0x6a0>
 8006b80:	f1b8 0f00 	cmp.w	r8, #0
 8006b84:	d005      	beq.n	8006b92 <_dtoa_r+0x96a>
 8006b86:	45b8      	cmp	r8, r7
 8006b88:	d003      	beq.n	8006b92 <_dtoa_r+0x96a>
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fd15 	bl	80075bc <_Bfree>
 8006b92:	4639      	mov	r1, r7
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fd11 	bl	80075bc <_Bfree>
 8006b9a:	e695      	b.n	80068c8 <_dtoa_r+0x6a0>
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	4637      	mov	r7, r6
 8006ba0:	e7e1      	b.n	8006b66 <_dtoa_r+0x93e>
 8006ba2:	9700      	str	r7, [sp, #0]
 8006ba4:	4637      	mov	r7, r6
 8006ba6:	e599      	b.n	80066dc <_dtoa_r+0x4b4>
 8006ba8:	40240000 	.word	0x40240000
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80ca 	beq.w	8006d48 <_dtoa_r+0xb20>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	dd05      	ble.n	8006bc8 <_dtoa_r+0x9a0>
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 ff17 	bl	80079f4 <__lshift>
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	f1b8 0f00 	cmp.w	r8, #0
 8006bcc:	d05b      	beq.n	8006c86 <_dtoa_r+0xa5e>
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fcb3 	bl	800753c <_Balloc>
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <_dtoa_r+0x9be>
 8006bda:	4b87      	ldr	r3, [pc, #540]	; (8006df8 <_dtoa_r+0xbd0>)
 8006bdc:	4602      	mov	r2, r0
 8006bde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006be2:	f7ff bb3b 	b.w	800625c <_dtoa_r+0x34>
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	3202      	adds	r2, #2
 8006bea:	0092      	lsls	r2, r2, #2
 8006bec:	f107 010c 	add.w	r1, r7, #12
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f000 fc95 	bl	8007520 <memcpy>
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fefa 	bl	80079f4 <__lshift>
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	f103 0901 	add.w	r9, r3, #1
 8006c06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	9305      	str	r3, [sp, #20]
 8006c0e:	f00a 0301 	and.w	r3, sl, #1
 8006c12:	46b8      	mov	r8, r7
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	4607      	mov	r7, r0
 8006c18:	4631      	mov	r1, r6
 8006c1a:	ee18 0a10 	vmov	r0, s16
 8006c1e:	f7ff fa77 	bl	8006110 <quorem>
 8006c22:	4641      	mov	r1, r8
 8006c24:	9002      	str	r0, [sp, #8]
 8006c26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c2a:	ee18 0a10 	vmov	r0, s16
 8006c2e:	f000 ff51 	bl	8007ad4 <__mcmp>
 8006c32:	463a      	mov	r2, r7
 8006c34:	9003      	str	r0, [sp, #12]
 8006c36:	4631      	mov	r1, r6
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 ff67 	bl	8007b0c <__mdiff>
 8006c3e:	68c2      	ldr	r2, [r0, #12]
 8006c40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006c44:	4605      	mov	r5, r0
 8006c46:	bb02      	cbnz	r2, 8006c8a <_dtoa_r+0xa62>
 8006c48:	4601      	mov	r1, r0
 8006c4a:	ee18 0a10 	vmov	r0, s16
 8006c4e:	f000 ff41 	bl	8007ad4 <__mcmp>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4629      	mov	r1, r5
 8006c56:	4620      	mov	r0, r4
 8006c58:	9207      	str	r2, [sp, #28]
 8006c5a:	f000 fcaf 	bl	80075bc <_Bfree>
 8006c5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c62:	ea43 0102 	orr.w	r1, r3, r2
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	464d      	mov	r5, r9
 8006c6c:	d10f      	bne.n	8006c8e <_dtoa_r+0xa66>
 8006c6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c72:	d02a      	beq.n	8006cca <_dtoa_r+0xaa2>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd02      	ble.n	8006c80 <_dtoa_r+0xa58>
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006c80:	f88b a000 	strb.w	sl, [fp]
 8006c84:	e775      	b.n	8006b72 <_dtoa_r+0x94a>
 8006c86:	4638      	mov	r0, r7
 8006c88:	e7ba      	b.n	8006c00 <_dtoa_r+0x9d8>
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	e7e2      	b.n	8006c54 <_dtoa_r+0xa2c>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	db04      	blt.n	8006c9e <_dtoa_r+0xa76>
 8006c94:	9906      	ldr	r1, [sp, #24]
 8006c96:	430b      	orrs	r3, r1
 8006c98:	9904      	ldr	r1, [sp, #16]
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	d122      	bne.n	8006ce4 <_dtoa_r+0xabc>
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	ddee      	ble.n	8006c80 <_dtoa_r+0xa58>
 8006ca2:	ee18 1a10 	vmov	r1, s16
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fea3 	bl	80079f4 <__lshift>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	ee08 0a10 	vmov	s16, r0
 8006cb4:	f000 ff0e 	bl	8007ad4 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	dc03      	bgt.n	8006cc4 <_dtoa_r+0xa9c>
 8006cbc:	d1e0      	bne.n	8006c80 <_dtoa_r+0xa58>
 8006cbe:	f01a 0f01 	tst.w	sl, #1
 8006cc2:	d0dd      	beq.n	8006c80 <_dtoa_r+0xa58>
 8006cc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cc8:	d1d7      	bne.n	8006c7a <_dtoa_r+0xa52>
 8006cca:	2339      	movs	r3, #57	; 0x39
 8006ccc:	f88b 3000 	strb.w	r3, [fp]
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	461d      	mov	r5, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cda:	2a39      	cmp	r2, #57	; 0x39
 8006cdc:	d071      	beq.n	8006dc2 <_dtoa_r+0xb9a>
 8006cde:	3201      	adds	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e746      	b.n	8006b72 <_dtoa_r+0x94a>
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	dd07      	ble.n	8006cf8 <_dtoa_r+0xad0>
 8006ce8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cec:	d0ed      	beq.n	8006cca <_dtoa_r+0xaa2>
 8006cee:	f10a 0301 	add.w	r3, sl, #1
 8006cf2:	f88b 3000 	strb.w	r3, [fp]
 8006cf6:	e73c      	b.n	8006b72 <_dtoa_r+0x94a>
 8006cf8:	9b05      	ldr	r3, [sp, #20]
 8006cfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006cfe:	4599      	cmp	r9, r3
 8006d00:	d047      	beq.n	8006d92 <_dtoa_r+0xb6a>
 8006d02:	ee18 1a10 	vmov	r1, s16
 8006d06:	2300      	movs	r3, #0
 8006d08:	220a      	movs	r2, #10
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fc78 	bl	8007600 <__multadd>
 8006d10:	45b8      	cmp	r8, r7
 8006d12:	ee08 0a10 	vmov	s16, r0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	f04f 020a 	mov.w	r2, #10
 8006d1e:	4641      	mov	r1, r8
 8006d20:	4620      	mov	r0, r4
 8006d22:	d106      	bne.n	8006d32 <_dtoa_r+0xb0a>
 8006d24:	f000 fc6c 	bl	8007600 <__multadd>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	f109 0901 	add.w	r9, r9, #1
 8006d30:	e772      	b.n	8006c18 <_dtoa_r+0x9f0>
 8006d32:	f000 fc65 	bl	8007600 <__multadd>
 8006d36:	4639      	mov	r1, r7
 8006d38:	4680      	mov	r8, r0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	220a      	movs	r2, #10
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fc5e 	bl	8007600 <__multadd>
 8006d44:	4607      	mov	r7, r0
 8006d46:	e7f1      	b.n	8006d2c <_dtoa_r+0xb04>
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	9302      	str	r3, [sp, #8]
 8006d4c:	9d01      	ldr	r5, [sp, #4]
 8006d4e:	ee18 0a10 	vmov	r0, s16
 8006d52:	4631      	mov	r1, r6
 8006d54:	f7ff f9dc 	bl	8006110 <quorem>
 8006d58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d5c:	9b01      	ldr	r3, [sp, #4]
 8006d5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006d62:	1aea      	subs	r2, r5, r3
 8006d64:	9b02      	ldr	r3, [sp, #8]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	dd09      	ble.n	8006d7e <_dtoa_r+0xb56>
 8006d6a:	ee18 1a10 	vmov	r1, s16
 8006d6e:	2300      	movs	r3, #0
 8006d70:	220a      	movs	r2, #10
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fc44 	bl	8007600 <__multadd>
 8006d78:	ee08 0a10 	vmov	s16, r0
 8006d7c:	e7e7      	b.n	8006d4e <_dtoa_r+0xb26>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfc8      	it	gt
 8006d84:	461d      	movgt	r5, r3
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	bfd8      	it	le
 8006d8a:	2501      	movle	r5, #1
 8006d8c:	441d      	add	r5, r3
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	ee18 1a10 	vmov	r1, s16
 8006d96:	2201      	movs	r2, #1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fe2b 	bl	80079f4 <__lshift>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	ee08 0a10 	vmov	s16, r0
 8006da4:	f000 fe96 	bl	8007ad4 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	dc91      	bgt.n	8006cd0 <_dtoa_r+0xaa8>
 8006dac:	d102      	bne.n	8006db4 <_dtoa_r+0xb8c>
 8006dae:	f01a 0f01 	tst.w	sl, #1
 8006db2:	d18d      	bne.n	8006cd0 <_dtoa_r+0xaa8>
 8006db4:	462b      	mov	r3, r5
 8006db6:	461d      	mov	r5, r3
 8006db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dbc:	2a30      	cmp	r2, #48	; 0x30
 8006dbe:	d0fa      	beq.n	8006db6 <_dtoa_r+0xb8e>
 8006dc0:	e6d7      	b.n	8006b72 <_dtoa_r+0x94a>
 8006dc2:	9a01      	ldr	r2, [sp, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d184      	bne.n	8006cd2 <_dtoa_r+0xaaa>
 8006dc8:	9b00      	ldr	r3, [sp, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	2331      	movs	r3, #49	; 0x31
 8006dd0:	7013      	strb	r3, [r2, #0]
 8006dd2:	e6ce      	b.n	8006b72 <_dtoa_r+0x94a>
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <_dtoa_r+0xbd4>)
 8006dd6:	f7ff ba95 	b.w	8006304 <_dtoa_r+0xdc>
 8006dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f47f aa6e 	bne.w	80062be <_dtoa_r+0x96>
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <_dtoa_r+0xbd8>)
 8006de4:	f7ff ba8e 	b.w	8006304 <_dtoa_r+0xdc>
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dcae      	bgt.n	8006d4c <_dtoa_r+0xb24>
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f73f aea8 	bgt.w	8006b46 <_dtoa_r+0x91e>
 8006df6:	e7a9      	b.n	8006d4c <_dtoa_r+0xb24>
 8006df8:	08009f08 	.word	0x08009f08
 8006dfc:	08009d0c 	.word	0x08009d0c
 8006e00:	08009e89 	.word	0x08009e89

08006e04 <rshift>:
 8006e04:	6903      	ldr	r3, [r0, #16]
 8006e06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e12:	f100 0414 	add.w	r4, r0, #20
 8006e16:	dd45      	ble.n	8006ea4 <rshift+0xa0>
 8006e18:	f011 011f 	ands.w	r1, r1, #31
 8006e1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e24:	d10c      	bne.n	8006e40 <rshift+0x3c>
 8006e26:	f100 0710 	add.w	r7, r0, #16
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	42b1      	cmp	r1, r6
 8006e2e:	d334      	bcc.n	8006e9a <rshift+0x96>
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	1eea      	subs	r2, r5, #3
 8006e36:	4296      	cmp	r6, r2
 8006e38:	bf38      	it	cc
 8006e3a:	2300      	movcc	r3, #0
 8006e3c:	4423      	add	r3, r4
 8006e3e:	e015      	b.n	8006e6c <rshift+0x68>
 8006e40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e44:	f1c1 0820 	rsb	r8, r1, #32
 8006e48:	40cf      	lsrs	r7, r1
 8006e4a:	f105 0e04 	add.w	lr, r5, #4
 8006e4e:	46a1      	mov	r9, r4
 8006e50:	4576      	cmp	r6, lr
 8006e52:	46f4      	mov	ip, lr
 8006e54:	d815      	bhi.n	8006e82 <rshift+0x7e>
 8006e56:	1a9a      	subs	r2, r3, r2
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	3a04      	subs	r2, #4
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	42ae      	cmp	r6, r5
 8006e60:	bf38      	it	cc
 8006e62:	2200      	movcc	r2, #0
 8006e64:	18a3      	adds	r3, r4, r2
 8006e66:	50a7      	str	r7, [r4, r2]
 8006e68:	b107      	cbz	r7, 8006e6c <rshift+0x68>
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	1b1a      	subs	r2, r3, r4
 8006e6e:	42a3      	cmp	r3, r4
 8006e70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e74:	bf08      	it	eq
 8006e76:	2300      	moveq	r3, #0
 8006e78:	6102      	str	r2, [r0, #16]
 8006e7a:	bf08      	it	eq
 8006e7c:	6143      	streq	r3, [r0, #20]
 8006e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e82:	f8dc c000 	ldr.w	ip, [ip]
 8006e86:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e8a:	ea4c 0707 	orr.w	r7, ip, r7
 8006e8e:	f849 7b04 	str.w	r7, [r9], #4
 8006e92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e96:	40cf      	lsrs	r7, r1
 8006e98:	e7da      	b.n	8006e50 <rshift+0x4c>
 8006e9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ea2:	e7c3      	b.n	8006e2c <rshift+0x28>
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	e7e1      	b.n	8006e6c <rshift+0x68>

08006ea8 <__hexdig_fun>:
 8006ea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	d802      	bhi.n	8006eb6 <__hexdig_fun+0xe>
 8006eb0:	3820      	subs	r0, #32
 8006eb2:	b2c0      	uxtb	r0, r0
 8006eb4:	4770      	bx	lr
 8006eb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d801      	bhi.n	8006ec2 <__hexdig_fun+0x1a>
 8006ebe:	3847      	subs	r0, #71	; 0x47
 8006ec0:	e7f7      	b.n	8006eb2 <__hexdig_fun+0xa>
 8006ec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d801      	bhi.n	8006ece <__hexdig_fun+0x26>
 8006eca:	3827      	subs	r0, #39	; 0x27
 8006ecc:	e7f1      	b.n	8006eb2 <__hexdig_fun+0xa>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4770      	bx	lr
	...

08006ed4 <__gethex>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	ed2d 8b02 	vpush	{d8}
 8006edc:	b089      	sub	sp, #36	; 0x24
 8006ede:	ee08 0a10 	vmov	s16, r0
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	4bb4      	ldr	r3, [pc, #720]	; (80071b8 <__gethex+0x2e4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	468b      	mov	fp, r1
 8006eee:	4690      	mov	r8, r2
 8006ef0:	f7f9 f976 	bl	80001e0 <strlen>
 8006ef4:	9b01      	ldr	r3, [sp, #4]
 8006ef6:	f8db 2000 	ldr.w	r2, [fp]
 8006efa:	4403      	add	r3, r0
 8006efc:	4682      	mov	sl, r0
 8006efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	1c93      	adds	r3, r2, #2
 8006f06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f0e:	32fe      	adds	r2, #254	; 0xfe
 8006f10:	18d1      	adds	r1, r2, r3
 8006f12:	461f      	mov	r7, r3
 8006f14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f18:	9100      	str	r1, [sp, #0]
 8006f1a:	2830      	cmp	r0, #48	; 0x30
 8006f1c:	d0f8      	beq.n	8006f10 <__gethex+0x3c>
 8006f1e:	f7ff ffc3 	bl	8006ea8 <__hexdig_fun>
 8006f22:	4604      	mov	r4, r0
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d13a      	bne.n	8006f9e <__gethex+0xca>
 8006f28:	9901      	ldr	r1, [sp, #4]
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f001 fa33 	bl	8008398 <strncmp>
 8006f32:	4605      	mov	r5, r0
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d168      	bne.n	800700a <__gethex+0x136>
 8006f38:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006f3c:	eb07 060a 	add.w	r6, r7, sl
 8006f40:	f7ff ffb2 	bl	8006ea8 <__hexdig_fun>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d062      	beq.n	800700e <__gethex+0x13a>
 8006f48:	4633      	mov	r3, r6
 8006f4a:	7818      	ldrb	r0, [r3, #0]
 8006f4c:	2830      	cmp	r0, #48	; 0x30
 8006f4e:	461f      	mov	r7, r3
 8006f50:	f103 0301 	add.w	r3, r3, #1
 8006f54:	d0f9      	beq.n	8006f4a <__gethex+0x76>
 8006f56:	f7ff ffa7 	bl	8006ea8 <__hexdig_fun>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	fab0 f480 	clz	r4, r0
 8006f60:	0964      	lsrs	r4, r4, #5
 8006f62:	4635      	mov	r5, r6
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	463a      	mov	r2, r7
 8006f68:	4616      	mov	r6, r2
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	7830      	ldrb	r0, [r6, #0]
 8006f6e:	f7ff ff9b 	bl	8006ea8 <__hexdig_fun>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d1f8      	bne.n	8006f68 <__gethex+0x94>
 8006f76:	9901      	ldr	r1, [sp, #4]
 8006f78:	4652      	mov	r2, sl
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f001 fa0c 	bl	8008398 <strncmp>
 8006f80:	b980      	cbnz	r0, 8006fa4 <__gethex+0xd0>
 8006f82:	b94d      	cbnz	r5, 8006f98 <__gethex+0xc4>
 8006f84:	eb06 050a 	add.w	r5, r6, sl
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4616      	mov	r6, r2
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	7830      	ldrb	r0, [r6, #0]
 8006f90:	f7ff ff8a 	bl	8006ea8 <__hexdig_fun>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d1f8      	bne.n	8006f8a <__gethex+0xb6>
 8006f98:	1bad      	subs	r5, r5, r6
 8006f9a:	00ad      	lsls	r5, r5, #2
 8006f9c:	e004      	b.n	8006fa8 <__gethex+0xd4>
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	4625      	mov	r5, r4
 8006fa2:	e7e0      	b.n	8006f66 <__gethex+0x92>
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	d1f7      	bne.n	8006f98 <__gethex+0xc4>
 8006fa8:	7833      	ldrb	r3, [r6, #0]
 8006faa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fae:	2b50      	cmp	r3, #80	; 0x50
 8006fb0:	d13b      	bne.n	800702a <__gethex+0x156>
 8006fb2:	7873      	ldrb	r3, [r6, #1]
 8006fb4:	2b2b      	cmp	r3, #43	; 0x2b
 8006fb6:	d02c      	beq.n	8007012 <__gethex+0x13e>
 8006fb8:	2b2d      	cmp	r3, #45	; 0x2d
 8006fba:	d02e      	beq.n	800701a <__gethex+0x146>
 8006fbc:	1c71      	adds	r1, r6, #1
 8006fbe:	f04f 0900 	mov.w	r9, #0
 8006fc2:	7808      	ldrb	r0, [r1, #0]
 8006fc4:	f7ff ff70 	bl	8006ea8 <__hexdig_fun>
 8006fc8:	1e43      	subs	r3, r0, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b18      	cmp	r3, #24
 8006fce:	d82c      	bhi.n	800702a <__gethex+0x156>
 8006fd0:	f1a0 0210 	sub.w	r2, r0, #16
 8006fd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006fd8:	f7ff ff66 	bl	8006ea8 <__hexdig_fun>
 8006fdc:	1e43      	subs	r3, r0, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b18      	cmp	r3, #24
 8006fe2:	d91d      	bls.n	8007020 <__gethex+0x14c>
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	d000      	beq.n	8006fec <__gethex+0x118>
 8006fea:	4252      	negs	r2, r2
 8006fec:	4415      	add	r5, r2
 8006fee:	f8cb 1000 	str.w	r1, [fp]
 8006ff2:	b1e4      	cbz	r4, 800702e <__gethex+0x15a>
 8006ff4:	9b00      	ldr	r3, [sp, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2700      	movne	r7, #0
 8006ffc:	2706      	moveq	r7, #6
 8006ffe:	4638      	mov	r0, r7
 8007000:	b009      	add	sp, #36	; 0x24
 8007002:	ecbd 8b02 	vpop	{d8}
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	463e      	mov	r6, r7
 800700c:	4625      	mov	r5, r4
 800700e:	2401      	movs	r4, #1
 8007010:	e7ca      	b.n	8006fa8 <__gethex+0xd4>
 8007012:	f04f 0900 	mov.w	r9, #0
 8007016:	1cb1      	adds	r1, r6, #2
 8007018:	e7d3      	b.n	8006fc2 <__gethex+0xee>
 800701a:	f04f 0901 	mov.w	r9, #1
 800701e:	e7fa      	b.n	8007016 <__gethex+0x142>
 8007020:	230a      	movs	r3, #10
 8007022:	fb03 0202 	mla	r2, r3, r2, r0
 8007026:	3a10      	subs	r2, #16
 8007028:	e7d4      	b.n	8006fd4 <__gethex+0x100>
 800702a:	4631      	mov	r1, r6
 800702c:	e7df      	b.n	8006fee <__gethex+0x11a>
 800702e:	1bf3      	subs	r3, r6, r7
 8007030:	3b01      	subs	r3, #1
 8007032:	4621      	mov	r1, r4
 8007034:	2b07      	cmp	r3, #7
 8007036:	dc0b      	bgt.n	8007050 <__gethex+0x17c>
 8007038:	ee18 0a10 	vmov	r0, s16
 800703c:	f000 fa7e 	bl	800753c <_Balloc>
 8007040:	4604      	mov	r4, r0
 8007042:	b940      	cbnz	r0, 8007056 <__gethex+0x182>
 8007044:	4b5d      	ldr	r3, [pc, #372]	; (80071bc <__gethex+0x2e8>)
 8007046:	4602      	mov	r2, r0
 8007048:	21de      	movs	r1, #222	; 0xde
 800704a:	485d      	ldr	r0, [pc, #372]	; (80071c0 <__gethex+0x2ec>)
 800704c:	f001 f9c6 	bl	80083dc <__assert_func>
 8007050:	3101      	adds	r1, #1
 8007052:	105b      	asrs	r3, r3, #1
 8007054:	e7ee      	b.n	8007034 <__gethex+0x160>
 8007056:	f100 0914 	add.w	r9, r0, #20
 800705a:	f04f 0b00 	mov.w	fp, #0
 800705e:	f1ca 0301 	rsb	r3, sl, #1
 8007062:	f8cd 9008 	str.w	r9, [sp, #8]
 8007066:	f8cd b000 	str.w	fp, [sp]
 800706a:	9306      	str	r3, [sp, #24]
 800706c:	42b7      	cmp	r7, r6
 800706e:	d340      	bcc.n	80070f2 <__gethex+0x21e>
 8007070:	9802      	ldr	r0, [sp, #8]
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	f840 3b04 	str.w	r3, [r0], #4
 8007078:	eba0 0009 	sub.w	r0, r0, r9
 800707c:	1080      	asrs	r0, r0, #2
 800707e:	0146      	lsls	r6, r0, #5
 8007080:	6120      	str	r0, [r4, #16]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fb4c 	bl	8007720 <__hi0bits>
 8007088:	1a30      	subs	r0, r6, r0
 800708a:	f8d8 6000 	ldr.w	r6, [r8]
 800708e:	42b0      	cmp	r0, r6
 8007090:	dd63      	ble.n	800715a <__gethex+0x286>
 8007092:	1b87      	subs	r7, r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	4620      	mov	r0, r4
 8007098:	f000 fef0 	bl	8007e7c <__any_on>
 800709c:	4682      	mov	sl, r0
 800709e:	b1a8      	cbz	r0, 80070cc <__gethex+0x1f8>
 80070a0:	1e7b      	subs	r3, r7, #1
 80070a2:	1159      	asrs	r1, r3, #5
 80070a4:	f003 021f 	and.w	r2, r3, #31
 80070a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80070ac:	f04f 0a01 	mov.w	sl, #1
 80070b0:	fa0a f202 	lsl.w	r2, sl, r2
 80070b4:	420a      	tst	r2, r1
 80070b6:	d009      	beq.n	80070cc <__gethex+0x1f8>
 80070b8:	4553      	cmp	r3, sl
 80070ba:	dd05      	ble.n	80070c8 <__gethex+0x1f4>
 80070bc:	1eb9      	subs	r1, r7, #2
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fedc 	bl	8007e7c <__any_on>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d145      	bne.n	8007154 <__gethex+0x280>
 80070c8:	f04f 0a02 	mov.w	sl, #2
 80070cc:	4639      	mov	r1, r7
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff fe98 	bl	8006e04 <rshift>
 80070d4:	443d      	add	r5, r7
 80070d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070da:	42ab      	cmp	r3, r5
 80070dc:	da4c      	bge.n	8007178 <__gethex+0x2a4>
 80070de:	ee18 0a10 	vmov	r0, s16
 80070e2:	4621      	mov	r1, r4
 80070e4:	f000 fa6a 	bl	80075bc <_Bfree>
 80070e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070ea:	2300      	movs	r3, #0
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	27a3      	movs	r7, #163	; 0xa3
 80070f0:	e785      	b.n	8006ffe <__gethex+0x12a>
 80070f2:	1e73      	subs	r3, r6, #1
 80070f4:	9a05      	ldr	r2, [sp, #20]
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d019      	beq.n	8007134 <__gethex+0x260>
 8007100:	f1bb 0f20 	cmp.w	fp, #32
 8007104:	d107      	bne.n	8007116 <__gethex+0x242>
 8007106:	9b02      	ldr	r3, [sp, #8]
 8007108:	9a00      	ldr	r2, [sp, #0]
 800710a:	f843 2b04 	str.w	r2, [r3], #4
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	2300      	movs	r3, #0
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	469b      	mov	fp, r3
 8007116:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800711a:	f7ff fec5 	bl	8006ea8 <__hexdig_fun>
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	f000 000f 	and.w	r0, r0, #15
 8007124:	fa00 f00b 	lsl.w	r0, r0, fp
 8007128:	4303      	orrs	r3, r0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	f10b 0b04 	add.w	fp, fp, #4
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	e00d      	b.n	8007150 <__gethex+0x27c>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	9a06      	ldr	r2, [sp, #24]
 8007138:	4413      	add	r3, r2
 800713a:	42bb      	cmp	r3, r7
 800713c:	d3e0      	bcc.n	8007100 <__gethex+0x22c>
 800713e:	4618      	mov	r0, r3
 8007140:	9901      	ldr	r1, [sp, #4]
 8007142:	9307      	str	r3, [sp, #28]
 8007144:	4652      	mov	r2, sl
 8007146:	f001 f927 	bl	8008398 <strncmp>
 800714a:	9b07      	ldr	r3, [sp, #28]
 800714c:	2800      	cmp	r0, #0
 800714e:	d1d7      	bne.n	8007100 <__gethex+0x22c>
 8007150:	461e      	mov	r6, r3
 8007152:	e78b      	b.n	800706c <__gethex+0x198>
 8007154:	f04f 0a03 	mov.w	sl, #3
 8007158:	e7b8      	b.n	80070cc <__gethex+0x1f8>
 800715a:	da0a      	bge.n	8007172 <__gethex+0x29e>
 800715c:	1a37      	subs	r7, r6, r0
 800715e:	4621      	mov	r1, r4
 8007160:	ee18 0a10 	vmov	r0, s16
 8007164:	463a      	mov	r2, r7
 8007166:	f000 fc45 	bl	80079f4 <__lshift>
 800716a:	1bed      	subs	r5, r5, r7
 800716c:	4604      	mov	r4, r0
 800716e:	f100 0914 	add.w	r9, r0, #20
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	e7ae      	b.n	80070d6 <__gethex+0x202>
 8007178:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800717c:	42a8      	cmp	r0, r5
 800717e:	dd72      	ble.n	8007266 <__gethex+0x392>
 8007180:	1b45      	subs	r5, r0, r5
 8007182:	42ae      	cmp	r6, r5
 8007184:	dc36      	bgt.n	80071f4 <__gethex+0x320>
 8007186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d02a      	beq.n	80071e4 <__gethex+0x310>
 800718e:	2b03      	cmp	r3, #3
 8007190:	d02c      	beq.n	80071ec <__gethex+0x318>
 8007192:	2b01      	cmp	r3, #1
 8007194:	d11c      	bne.n	80071d0 <__gethex+0x2fc>
 8007196:	42ae      	cmp	r6, r5
 8007198:	d11a      	bne.n	80071d0 <__gethex+0x2fc>
 800719a:	2e01      	cmp	r6, #1
 800719c:	d112      	bne.n	80071c4 <__gethex+0x2f0>
 800719e:	9a04      	ldr	r2, [sp, #16]
 80071a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	2301      	movs	r3, #1
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	f8c9 3000 	str.w	r3, [r9]
 80071ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071b0:	2762      	movs	r7, #98	; 0x62
 80071b2:	601c      	str	r4, [r3, #0]
 80071b4:	e723      	b.n	8006ffe <__gethex+0x12a>
 80071b6:	bf00      	nop
 80071b8:	08009f80 	.word	0x08009f80
 80071bc:	08009f08 	.word	0x08009f08
 80071c0:	08009f19 	.word	0x08009f19
 80071c4:	1e71      	subs	r1, r6, #1
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 fe58 	bl	8007e7c <__any_on>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d1e6      	bne.n	800719e <__gethex+0x2ca>
 80071d0:	ee18 0a10 	vmov	r0, s16
 80071d4:	4621      	mov	r1, r4
 80071d6:	f000 f9f1 	bl	80075bc <_Bfree>
 80071da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071dc:	2300      	movs	r3, #0
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	2750      	movs	r7, #80	; 0x50
 80071e2:	e70c      	b.n	8006ffe <__gethex+0x12a>
 80071e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f2      	bne.n	80071d0 <__gethex+0x2fc>
 80071ea:	e7d8      	b.n	800719e <__gethex+0x2ca>
 80071ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1d5      	bne.n	800719e <__gethex+0x2ca>
 80071f2:	e7ed      	b.n	80071d0 <__gethex+0x2fc>
 80071f4:	1e6f      	subs	r7, r5, #1
 80071f6:	f1ba 0f00 	cmp.w	sl, #0
 80071fa:	d131      	bne.n	8007260 <__gethex+0x38c>
 80071fc:	b127      	cbz	r7, 8007208 <__gethex+0x334>
 80071fe:	4639      	mov	r1, r7
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fe3b 	bl	8007e7c <__any_on>
 8007206:	4682      	mov	sl, r0
 8007208:	117b      	asrs	r3, r7, #5
 800720a:	2101      	movs	r1, #1
 800720c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007210:	f007 071f 	and.w	r7, r7, #31
 8007214:	fa01 f707 	lsl.w	r7, r1, r7
 8007218:	421f      	tst	r7, r3
 800721a:	4629      	mov	r1, r5
 800721c:	4620      	mov	r0, r4
 800721e:	bf18      	it	ne
 8007220:	f04a 0a02 	orrne.w	sl, sl, #2
 8007224:	1b76      	subs	r6, r6, r5
 8007226:	f7ff fded 	bl	8006e04 <rshift>
 800722a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800722e:	2702      	movs	r7, #2
 8007230:	f1ba 0f00 	cmp.w	sl, #0
 8007234:	d048      	beq.n	80072c8 <__gethex+0x3f4>
 8007236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d015      	beq.n	800726a <__gethex+0x396>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d017      	beq.n	8007272 <__gethex+0x39e>
 8007242:	2b01      	cmp	r3, #1
 8007244:	d109      	bne.n	800725a <__gethex+0x386>
 8007246:	f01a 0f02 	tst.w	sl, #2
 800724a:	d006      	beq.n	800725a <__gethex+0x386>
 800724c:	f8d9 0000 	ldr.w	r0, [r9]
 8007250:	ea4a 0a00 	orr.w	sl, sl, r0
 8007254:	f01a 0f01 	tst.w	sl, #1
 8007258:	d10e      	bne.n	8007278 <__gethex+0x3a4>
 800725a:	f047 0710 	orr.w	r7, r7, #16
 800725e:	e033      	b.n	80072c8 <__gethex+0x3f4>
 8007260:	f04f 0a01 	mov.w	sl, #1
 8007264:	e7d0      	b.n	8007208 <__gethex+0x334>
 8007266:	2701      	movs	r7, #1
 8007268:	e7e2      	b.n	8007230 <__gethex+0x35c>
 800726a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800726c:	f1c3 0301 	rsb	r3, r3, #1
 8007270:	9315      	str	r3, [sp, #84]	; 0x54
 8007272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <__gethex+0x386>
 8007278:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800727c:	f104 0314 	add.w	r3, r4, #20
 8007280:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007284:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007288:	f04f 0c00 	mov.w	ip, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007296:	d01c      	beq.n	80072d2 <__gethex+0x3fe>
 8007298:	3201      	adds	r2, #1
 800729a:	6002      	str	r2, [r0, #0]
 800729c:	2f02      	cmp	r7, #2
 800729e:	f104 0314 	add.w	r3, r4, #20
 80072a2:	d13f      	bne.n	8007324 <__gethex+0x450>
 80072a4:	f8d8 2000 	ldr.w	r2, [r8]
 80072a8:	3a01      	subs	r2, #1
 80072aa:	42b2      	cmp	r2, r6
 80072ac:	d10a      	bne.n	80072c4 <__gethex+0x3f0>
 80072ae:	1171      	asrs	r1, r6, #5
 80072b0:	2201      	movs	r2, #1
 80072b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072b6:	f006 061f 	and.w	r6, r6, #31
 80072ba:	fa02 f606 	lsl.w	r6, r2, r6
 80072be:	421e      	tst	r6, r3
 80072c0:	bf18      	it	ne
 80072c2:	4617      	movne	r7, r2
 80072c4:	f047 0720 	orr.w	r7, r7, #32
 80072c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072ca:	601c      	str	r4, [r3, #0]
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	601d      	str	r5, [r3, #0]
 80072d0:	e695      	b.n	8006ffe <__gethex+0x12a>
 80072d2:	4299      	cmp	r1, r3
 80072d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80072d8:	d8d8      	bhi.n	800728c <__gethex+0x3b8>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	459b      	cmp	fp, r3
 80072de:	db19      	blt.n	8007314 <__gethex+0x440>
 80072e0:	6861      	ldr	r1, [r4, #4]
 80072e2:	ee18 0a10 	vmov	r0, s16
 80072e6:	3101      	adds	r1, #1
 80072e8:	f000 f928 	bl	800753c <_Balloc>
 80072ec:	4681      	mov	r9, r0
 80072ee:	b918      	cbnz	r0, 80072f8 <__gethex+0x424>
 80072f0:	4b1a      	ldr	r3, [pc, #104]	; (800735c <__gethex+0x488>)
 80072f2:	4602      	mov	r2, r0
 80072f4:	2184      	movs	r1, #132	; 0x84
 80072f6:	e6a8      	b.n	800704a <__gethex+0x176>
 80072f8:	6922      	ldr	r2, [r4, #16]
 80072fa:	3202      	adds	r2, #2
 80072fc:	f104 010c 	add.w	r1, r4, #12
 8007300:	0092      	lsls	r2, r2, #2
 8007302:	300c      	adds	r0, #12
 8007304:	f000 f90c 	bl	8007520 <memcpy>
 8007308:	4621      	mov	r1, r4
 800730a:	ee18 0a10 	vmov	r0, s16
 800730e:	f000 f955 	bl	80075bc <_Bfree>
 8007312:	464c      	mov	r4, r9
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800731c:	6122      	str	r2, [r4, #16]
 800731e:	2201      	movs	r2, #1
 8007320:	615a      	str	r2, [r3, #20]
 8007322:	e7bb      	b.n	800729c <__gethex+0x3c8>
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	455a      	cmp	r2, fp
 8007328:	dd0b      	ble.n	8007342 <__gethex+0x46e>
 800732a:	2101      	movs	r1, #1
 800732c:	4620      	mov	r0, r4
 800732e:	f7ff fd69 	bl	8006e04 <rshift>
 8007332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007336:	3501      	adds	r5, #1
 8007338:	42ab      	cmp	r3, r5
 800733a:	f6ff aed0 	blt.w	80070de <__gethex+0x20a>
 800733e:	2701      	movs	r7, #1
 8007340:	e7c0      	b.n	80072c4 <__gethex+0x3f0>
 8007342:	f016 061f 	ands.w	r6, r6, #31
 8007346:	d0fa      	beq.n	800733e <__gethex+0x46a>
 8007348:	4453      	add	r3, sl
 800734a:	f1c6 0620 	rsb	r6, r6, #32
 800734e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007352:	f000 f9e5 	bl	8007720 <__hi0bits>
 8007356:	42b0      	cmp	r0, r6
 8007358:	dbe7      	blt.n	800732a <__gethex+0x456>
 800735a:	e7f0      	b.n	800733e <__gethex+0x46a>
 800735c:	08009f08 	.word	0x08009f08

08007360 <L_shift>:
 8007360:	f1c2 0208 	rsb	r2, r2, #8
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	b570      	push	{r4, r5, r6, lr}
 8007368:	f1c2 0620 	rsb	r6, r2, #32
 800736c:	6843      	ldr	r3, [r0, #4]
 800736e:	6804      	ldr	r4, [r0, #0]
 8007370:	fa03 f506 	lsl.w	r5, r3, r6
 8007374:	432c      	orrs	r4, r5
 8007376:	40d3      	lsrs	r3, r2
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	f840 3f04 	str.w	r3, [r0, #4]!
 800737e:	4288      	cmp	r0, r1
 8007380:	d3f4      	bcc.n	800736c <L_shift+0xc>
 8007382:	bd70      	pop	{r4, r5, r6, pc}

08007384 <__match>:
 8007384:	b530      	push	{r4, r5, lr}
 8007386:	6803      	ldr	r3, [r0, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738e:	b914      	cbnz	r4, 8007396 <__match+0x12>
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	2001      	movs	r0, #1
 8007394:	bd30      	pop	{r4, r5, pc}
 8007396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800739a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800739e:	2d19      	cmp	r5, #25
 80073a0:	bf98      	it	ls
 80073a2:	3220      	addls	r2, #32
 80073a4:	42a2      	cmp	r2, r4
 80073a6:	d0f0      	beq.n	800738a <__match+0x6>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e7f3      	b.n	8007394 <__match+0x10>

080073ac <__hexnan>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	680b      	ldr	r3, [r1, #0]
 80073b2:	115e      	asrs	r6, r3, #5
 80073b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073b8:	f013 031f 	ands.w	r3, r3, #31
 80073bc:	b087      	sub	sp, #28
 80073be:	bf18      	it	ne
 80073c0:	3604      	addne	r6, #4
 80073c2:	2500      	movs	r5, #0
 80073c4:	1f37      	subs	r7, r6, #4
 80073c6:	4690      	mov	r8, r2
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	4682      	mov	sl, r0
 80073ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80073d2:	46b9      	mov	r9, r7
 80073d4:	463c      	mov	r4, r7
 80073d6:	9502      	str	r5, [sp, #8]
 80073d8:	46ab      	mov	fp, r5
 80073da:	7851      	ldrb	r1, [r2, #1]
 80073dc:	1c53      	adds	r3, r2, #1
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	b341      	cbz	r1, 8007434 <__hexnan+0x88>
 80073e2:	4608      	mov	r0, r1
 80073e4:	9205      	str	r2, [sp, #20]
 80073e6:	9104      	str	r1, [sp, #16]
 80073e8:	f7ff fd5e 	bl	8006ea8 <__hexdig_fun>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d14f      	bne.n	8007490 <__hexnan+0xe4>
 80073f0:	9904      	ldr	r1, [sp, #16]
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	2920      	cmp	r1, #32
 80073f6:	d818      	bhi.n	800742a <__hexnan+0x7e>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	459b      	cmp	fp, r3
 80073fc:	dd13      	ble.n	8007426 <__hexnan+0x7a>
 80073fe:	454c      	cmp	r4, r9
 8007400:	d206      	bcs.n	8007410 <__hexnan+0x64>
 8007402:	2d07      	cmp	r5, #7
 8007404:	dc04      	bgt.n	8007410 <__hexnan+0x64>
 8007406:	462a      	mov	r2, r5
 8007408:	4649      	mov	r1, r9
 800740a:	4620      	mov	r0, r4
 800740c:	f7ff ffa8 	bl	8007360 <L_shift>
 8007410:	4544      	cmp	r4, r8
 8007412:	d950      	bls.n	80074b6 <__hexnan+0x10a>
 8007414:	2300      	movs	r3, #0
 8007416:	f1a4 0904 	sub.w	r9, r4, #4
 800741a:	f844 3c04 	str.w	r3, [r4, #-4]
 800741e:	f8cd b008 	str.w	fp, [sp, #8]
 8007422:	464c      	mov	r4, r9
 8007424:	461d      	mov	r5, r3
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	e7d7      	b.n	80073da <__hexnan+0x2e>
 800742a:	2929      	cmp	r1, #41	; 0x29
 800742c:	d156      	bne.n	80074dc <__hexnan+0x130>
 800742e:	3202      	adds	r2, #2
 8007430:	f8ca 2000 	str.w	r2, [sl]
 8007434:	f1bb 0f00 	cmp.w	fp, #0
 8007438:	d050      	beq.n	80074dc <__hexnan+0x130>
 800743a:	454c      	cmp	r4, r9
 800743c:	d206      	bcs.n	800744c <__hexnan+0xa0>
 800743e:	2d07      	cmp	r5, #7
 8007440:	dc04      	bgt.n	800744c <__hexnan+0xa0>
 8007442:	462a      	mov	r2, r5
 8007444:	4649      	mov	r1, r9
 8007446:	4620      	mov	r0, r4
 8007448:	f7ff ff8a 	bl	8007360 <L_shift>
 800744c:	4544      	cmp	r4, r8
 800744e:	d934      	bls.n	80074ba <__hexnan+0x10e>
 8007450:	f1a8 0204 	sub.w	r2, r8, #4
 8007454:	4623      	mov	r3, r4
 8007456:	f853 1b04 	ldr.w	r1, [r3], #4
 800745a:	f842 1f04 	str.w	r1, [r2, #4]!
 800745e:	429f      	cmp	r7, r3
 8007460:	d2f9      	bcs.n	8007456 <__hexnan+0xaa>
 8007462:	1b3b      	subs	r3, r7, r4
 8007464:	f023 0303 	bic.w	r3, r3, #3
 8007468:	3304      	adds	r3, #4
 800746a:	3401      	adds	r4, #1
 800746c:	3e03      	subs	r6, #3
 800746e:	42b4      	cmp	r4, r6
 8007470:	bf88      	it	hi
 8007472:	2304      	movhi	r3, #4
 8007474:	4443      	add	r3, r8
 8007476:	2200      	movs	r2, #0
 8007478:	f843 2b04 	str.w	r2, [r3], #4
 800747c:	429f      	cmp	r7, r3
 800747e:	d2fb      	bcs.n	8007478 <__hexnan+0xcc>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	b91b      	cbnz	r3, 800748c <__hexnan+0xe0>
 8007484:	4547      	cmp	r7, r8
 8007486:	d127      	bne.n	80074d8 <__hexnan+0x12c>
 8007488:	2301      	movs	r3, #1
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	2005      	movs	r0, #5
 800748e:	e026      	b.n	80074de <__hexnan+0x132>
 8007490:	3501      	adds	r5, #1
 8007492:	2d08      	cmp	r5, #8
 8007494:	f10b 0b01 	add.w	fp, fp, #1
 8007498:	dd06      	ble.n	80074a8 <__hexnan+0xfc>
 800749a:	4544      	cmp	r4, r8
 800749c:	d9c3      	bls.n	8007426 <__hexnan+0x7a>
 800749e:	2300      	movs	r3, #0
 80074a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80074a4:	2501      	movs	r5, #1
 80074a6:	3c04      	subs	r4, #4
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	f000 000f 	and.w	r0, r0, #15
 80074ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	e7b7      	b.n	8007426 <__hexnan+0x7a>
 80074b6:	2508      	movs	r5, #8
 80074b8:	e7b5      	b.n	8007426 <__hexnan+0x7a>
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0df      	beq.n	8007480 <__hexnan+0xd4>
 80074c0:	f04f 32ff 	mov.w	r2, #4294967295
 80074c4:	f1c3 0320 	rsb	r3, r3, #32
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
 80074cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074d0:	401a      	ands	r2, r3
 80074d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80074d6:	e7d3      	b.n	8007480 <__hexnan+0xd4>
 80074d8:	3f04      	subs	r7, #4
 80074da:	e7d1      	b.n	8007480 <__hexnan+0xd4>
 80074dc:	2004      	movs	r0, #4
 80074de:	b007      	add	sp, #28
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074e4 <_localeconv_r>:
 80074e4:	4800      	ldr	r0, [pc, #0]	; (80074e8 <_localeconv_r+0x4>)
 80074e6:	4770      	bx	lr
 80074e8:	2000016c 	.word	0x2000016c

080074ec <malloc>:
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <malloc+0xc>)
 80074ee:	4601      	mov	r1, r0
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f000 bd67 	b.w	8007fc4 <_malloc_r>
 80074f6:	bf00      	nop
 80074f8:	20000014 	.word	0x20000014

080074fc <__ascii_mbtowc>:
 80074fc:	b082      	sub	sp, #8
 80074fe:	b901      	cbnz	r1, 8007502 <__ascii_mbtowc+0x6>
 8007500:	a901      	add	r1, sp, #4
 8007502:	b142      	cbz	r2, 8007516 <__ascii_mbtowc+0x1a>
 8007504:	b14b      	cbz	r3, 800751a <__ascii_mbtowc+0x1e>
 8007506:	7813      	ldrb	r3, [r2, #0]
 8007508:	600b      	str	r3, [r1, #0]
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	1e10      	subs	r0, r2, #0
 800750e:	bf18      	it	ne
 8007510:	2001      	movne	r0, #1
 8007512:	b002      	add	sp, #8
 8007514:	4770      	bx	lr
 8007516:	4610      	mov	r0, r2
 8007518:	e7fb      	b.n	8007512 <__ascii_mbtowc+0x16>
 800751a:	f06f 0001 	mvn.w	r0, #1
 800751e:	e7f8      	b.n	8007512 <__ascii_mbtowc+0x16>

08007520 <memcpy>:
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	f100 33ff 	add.w	r3, r0, #4294967295
 8007528:	d100      	bne.n	800752c <memcpy+0xc>
 800752a:	4770      	bx	lr
 800752c:	b510      	push	{r4, lr}
 800752e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007536:	4291      	cmp	r1, r2
 8007538:	d1f9      	bne.n	800752e <memcpy+0xe>
 800753a:	bd10      	pop	{r4, pc}

0800753c <_Balloc>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	b976      	cbnz	r6, 8007564 <_Balloc+0x28>
 8007546:	2010      	movs	r0, #16
 8007548:	f7ff ffd0 	bl	80074ec <malloc>
 800754c:	4602      	mov	r2, r0
 800754e:	6260      	str	r0, [r4, #36]	; 0x24
 8007550:	b920      	cbnz	r0, 800755c <_Balloc+0x20>
 8007552:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <_Balloc+0x78>)
 8007554:	4818      	ldr	r0, [pc, #96]	; (80075b8 <_Balloc+0x7c>)
 8007556:	2166      	movs	r1, #102	; 0x66
 8007558:	f000 ff40 	bl	80083dc <__assert_func>
 800755c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007560:	6006      	str	r6, [r0, #0]
 8007562:	60c6      	str	r6, [r0, #12]
 8007564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007566:	68f3      	ldr	r3, [r6, #12]
 8007568:	b183      	cbz	r3, 800758c <_Balloc+0x50>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007572:	b9b8      	cbnz	r0, 80075a4 <_Balloc+0x68>
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f605 	lsl.w	r6, r1, r5
 800757a:	1d72      	adds	r2, r6, #5
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	4620      	mov	r0, r4
 8007580:	f000 fc9d 	bl	8007ebe <_calloc_r>
 8007584:	b160      	cbz	r0, 80075a0 <_Balloc+0x64>
 8007586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800758a:	e00e      	b.n	80075aa <_Balloc+0x6e>
 800758c:	2221      	movs	r2, #33	; 0x21
 800758e:	2104      	movs	r1, #4
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fc94 	bl	8007ebe <_calloc_r>
 8007596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007598:	60f0      	str	r0, [r6, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <_Balloc+0x2e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075aa:	2300      	movs	r3, #0
 80075ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b0:	e7f7      	b.n	80075a2 <_Balloc+0x66>
 80075b2:	bf00      	nop
 80075b4:	08009e96 	.word	0x08009e96
 80075b8:	08009f94 	.word	0x08009f94

080075bc <_Bfree>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b976      	cbnz	r6, 80075e4 <_Bfree+0x28>
 80075c6:	2010      	movs	r0, #16
 80075c8:	f7ff ff90 	bl	80074ec <malloc>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6268      	str	r0, [r5, #36]	; 0x24
 80075d0:	b920      	cbnz	r0, 80075dc <_Bfree+0x20>
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <_Bfree+0x3c>)
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <_Bfree+0x40>)
 80075d6:	218a      	movs	r1, #138	; 0x8a
 80075d8:	f000 ff00 	bl	80083dc <__assert_func>
 80075dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e0:	6006      	str	r6, [r0, #0]
 80075e2:	60c6      	str	r6, [r0, #12]
 80075e4:	b13c      	cbz	r4, 80075f6 <_Bfree+0x3a>
 80075e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075e8:	6862      	ldr	r2, [r4, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f0:	6021      	str	r1, [r4, #0]
 80075f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	08009e96 	.word	0x08009e96
 80075fc:	08009f94 	.word	0x08009f94

08007600 <__multadd>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	690d      	ldr	r5, [r1, #16]
 8007606:	4607      	mov	r7, r0
 8007608:	460c      	mov	r4, r1
 800760a:	461e      	mov	r6, r3
 800760c:	f101 0c14 	add.w	ip, r1, #20
 8007610:	2000      	movs	r0, #0
 8007612:	f8dc 3000 	ldr.w	r3, [ip]
 8007616:	b299      	uxth	r1, r3
 8007618:	fb02 6101 	mla	r1, r2, r1, r6
 800761c:	0c1e      	lsrs	r6, r3, #16
 800761e:	0c0b      	lsrs	r3, r1, #16
 8007620:	fb02 3306 	mla	r3, r2, r6, r3
 8007624:	b289      	uxth	r1, r1
 8007626:	3001      	adds	r0, #1
 8007628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800762c:	4285      	cmp	r5, r0
 800762e:	f84c 1b04 	str.w	r1, [ip], #4
 8007632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007636:	dcec      	bgt.n	8007612 <__multadd+0x12>
 8007638:	b30e      	cbz	r6, 800767e <__multadd+0x7e>
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc19      	bgt.n	8007674 <__multadd+0x74>
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	4638      	mov	r0, r7
 8007644:	3101      	adds	r1, #1
 8007646:	f7ff ff79 	bl	800753c <_Balloc>
 800764a:	4680      	mov	r8, r0
 800764c:	b928      	cbnz	r0, 800765a <__multadd+0x5a>
 800764e:	4602      	mov	r2, r0
 8007650:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <__multadd+0x84>)
 8007652:	480d      	ldr	r0, [pc, #52]	; (8007688 <__multadd+0x88>)
 8007654:	21b5      	movs	r1, #181	; 0xb5
 8007656:	f000 fec1 	bl	80083dc <__assert_func>
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	3202      	adds	r2, #2
 800765e:	f104 010c 	add.w	r1, r4, #12
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	300c      	adds	r0, #12
 8007666:	f7ff ff5b 	bl	8007520 <memcpy>
 800766a:	4621      	mov	r1, r4
 800766c:	4638      	mov	r0, r7
 800766e:	f7ff ffa5 	bl	80075bc <_Bfree>
 8007672:	4644      	mov	r4, r8
 8007674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007678:	3501      	adds	r5, #1
 800767a:	615e      	str	r6, [r3, #20]
 800767c:	6125      	str	r5, [r4, #16]
 800767e:	4620      	mov	r0, r4
 8007680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007684:	08009f08 	.word	0x08009f08
 8007688:	08009f94 	.word	0x08009f94

0800768c <__s2b>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	460c      	mov	r4, r1
 8007692:	4615      	mov	r5, r2
 8007694:	461f      	mov	r7, r3
 8007696:	2209      	movs	r2, #9
 8007698:	3308      	adds	r3, #8
 800769a:	4606      	mov	r6, r0
 800769c:	fb93 f3f2 	sdiv	r3, r3, r2
 80076a0:	2100      	movs	r1, #0
 80076a2:	2201      	movs	r2, #1
 80076a4:	429a      	cmp	r2, r3
 80076a6:	db09      	blt.n	80076bc <__s2b+0x30>
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7ff ff47 	bl	800753c <_Balloc>
 80076ae:	b940      	cbnz	r0, 80076c2 <__s2b+0x36>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4b19      	ldr	r3, [pc, #100]	; (8007718 <__s2b+0x8c>)
 80076b4:	4819      	ldr	r0, [pc, #100]	; (800771c <__s2b+0x90>)
 80076b6:	21ce      	movs	r1, #206	; 0xce
 80076b8:	f000 fe90 	bl	80083dc <__assert_func>
 80076bc:	0052      	lsls	r2, r2, #1
 80076be:	3101      	adds	r1, #1
 80076c0:	e7f0      	b.n	80076a4 <__s2b+0x18>
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	6143      	str	r3, [r0, #20]
 80076c6:	2d09      	cmp	r5, #9
 80076c8:	f04f 0301 	mov.w	r3, #1
 80076cc:	6103      	str	r3, [r0, #16]
 80076ce:	dd16      	ble.n	80076fe <__s2b+0x72>
 80076d0:	f104 0909 	add.w	r9, r4, #9
 80076d4:	46c8      	mov	r8, r9
 80076d6:	442c      	add	r4, r5
 80076d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076dc:	4601      	mov	r1, r0
 80076de:	3b30      	subs	r3, #48	; 0x30
 80076e0:	220a      	movs	r2, #10
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ff8c 	bl	8007600 <__multadd>
 80076e8:	45a0      	cmp	r8, r4
 80076ea:	d1f5      	bne.n	80076d8 <__s2b+0x4c>
 80076ec:	f1a5 0408 	sub.w	r4, r5, #8
 80076f0:	444c      	add	r4, r9
 80076f2:	1b2d      	subs	r5, r5, r4
 80076f4:	1963      	adds	r3, r4, r5
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	db04      	blt.n	8007704 <__s2b+0x78>
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	340a      	adds	r4, #10
 8007700:	2509      	movs	r5, #9
 8007702:	e7f6      	b.n	80076f2 <__s2b+0x66>
 8007704:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007708:	4601      	mov	r1, r0
 800770a:	3b30      	subs	r3, #48	; 0x30
 800770c:	220a      	movs	r2, #10
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff ff76 	bl	8007600 <__multadd>
 8007714:	e7ee      	b.n	80076f4 <__s2b+0x68>
 8007716:	bf00      	nop
 8007718:	08009f08 	.word	0x08009f08
 800771c:	08009f94 	.word	0x08009f94

08007720 <__hi0bits>:
 8007720:	0c03      	lsrs	r3, r0, #16
 8007722:	041b      	lsls	r3, r3, #16
 8007724:	b9d3      	cbnz	r3, 800775c <__hi0bits+0x3c>
 8007726:	0400      	lsls	r0, r0, #16
 8007728:	2310      	movs	r3, #16
 800772a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800772e:	bf04      	itt	eq
 8007730:	0200      	lsleq	r0, r0, #8
 8007732:	3308      	addeq	r3, #8
 8007734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007738:	bf04      	itt	eq
 800773a:	0100      	lsleq	r0, r0, #4
 800773c:	3304      	addeq	r3, #4
 800773e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007742:	bf04      	itt	eq
 8007744:	0080      	lsleq	r0, r0, #2
 8007746:	3302      	addeq	r3, #2
 8007748:	2800      	cmp	r0, #0
 800774a:	db05      	blt.n	8007758 <__hi0bits+0x38>
 800774c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007750:	f103 0301 	add.w	r3, r3, #1
 8007754:	bf08      	it	eq
 8007756:	2320      	moveq	r3, #32
 8007758:	4618      	mov	r0, r3
 800775a:	4770      	bx	lr
 800775c:	2300      	movs	r3, #0
 800775e:	e7e4      	b.n	800772a <__hi0bits+0xa>

08007760 <__lo0bits>:
 8007760:	6803      	ldr	r3, [r0, #0]
 8007762:	f013 0207 	ands.w	r2, r3, #7
 8007766:	4601      	mov	r1, r0
 8007768:	d00b      	beq.n	8007782 <__lo0bits+0x22>
 800776a:	07da      	lsls	r2, r3, #31
 800776c:	d423      	bmi.n	80077b6 <__lo0bits+0x56>
 800776e:	0798      	lsls	r0, r3, #30
 8007770:	bf49      	itett	mi
 8007772:	085b      	lsrmi	r3, r3, #1
 8007774:	089b      	lsrpl	r3, r3, #2
 8007776:	2001      	movmi	r0, #1
 8007778:	600b      	strmi	r3, [r1, #0]
 800777a:	bf5c      	itt	pl
 800777c:	600b      	strpl	r3, [r1, #0]
 800777e:	2002      	movpl	r0, #2
 8007780:	4770      	bx	lr
 8007782:	b298      	uxth	r0, r3
 8007784:	b9a8      	cbnz	r0, 80077b2 <__lo0bits+0x52>
 8007786:	0c1b      	lsrs	r3, r3, #16
 8007788:	2010      	movs	r0, #16
 800778a:	b2da      	uxtb	r2, r3
 800778c:	b90a      	cbnz	r2, 8007792 <__lo0bits+0x32>
 800778e:	3008      	adds	r0, #8
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	071a      	lsls	r2, r3, #28
 8007794:	bf04      	itt	eq
 8007796:	091b      	lsreq	r3, r3, #4
 8007798:	3004      	addeq	r0, #4
 800779a:	079a      	lsls	r2, r3, #30
 800779c:	bf04      	itt	eq
 800779e:	089b      	lsreq	r3, r3, #2
 80077a0:	3002      	addeq	r0, #2
 80077a2:	07da      	lsls	r2, r3, #31
 80077a4:	d403      	bmi.n	80077ae <__lo0bits+0x4e>
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f100 0001 	add.w	r0, r0, #1
 80077ac:	d005      	beq.n	80077ba <__lo0bits+0x5a>
 80077ae:	600b      	str	r3, [r1, #0]
 80077b0:	4770      	bx	lr
 80077b2:	4610      	mov	r0, r2
 80077b4:	e7e9      	b.n	800778a <__lo0bits+0x2a>
 80077b6:	2000      	movs	r0, #0
 80077b8:	4770      	bx	lr
 80077ba:	2020      	movs	r0, #32
 80077bc:	4770      	bx	lr
	...

080077c0 <__i2b>:
 80077c0:	b510      	push	{r4, lr}
 80077c2:	460c      	mov	r4, r1
 80077c4:	2101      	movs	r1, #1
 80077c6:	f7ff feb9 	bl	800753c <_Balloc>
 80077ca:	4602      	mov	r2, r0
 80077cc:	b928      	cbnz	r0, 80077da <__i2b+0x1a>
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <__i2b+0x24>)
 80077d0:	4805      	ldr	r0, [pc, #20]	; (80077e8 <__i2b+0x28>)
 80077d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077d6:	f000 fe01 	bl	80083dc <__assert_func>
 80077da:	2301      	movs	r3, #1
 80077dc:	6144      	str	r4, [r0, #20]
 80077de:	6103      	str	r3, [r0, #16]
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	08009f08 	.word	0x08009f08
 80077e8:	08009f94 	.word	0x08009f94

080077ec <__multiply>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	4691      	mov	r9, r2
 80077f2:	690a      	ldr	r2, [r1, #16]
 80077f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	bfb8      	it	lt
 80077fc:	460b      	movlt	r3, r1
 80077fe:	460c      	mov	r4, r1
 8007800:	bfbc      	itt	lt
 8007802:	464c      	movlt	r4, r9
 8007804:	4699      	movlt	r9, r3
 8007806:	6927      	ldr	r7, [r4, #16]
 8007808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800780c:	68a3      	ldr	r3, [r4, #8]
 800780e:	6861      	ldr	r1, [r4, #4]
 8007810:	eb07 060a 	add.w	r6, r7, sl
 8007814:	42b3      	cmp	r3, r6
 8007816:	b085      	sub	sp, #20
 8007818:	bfb8      	it	lt
 800781a:	3101      	addlt	r1, #1
 800781c:	f7ff fe8e 	bl	800753c <_Balloc>
 8007820:	b930      	cbnz	r0, 8007830 <__multiply+0x44>
 8007822:	4602      	mov	r2, r0
 8007824:	4b44      	ldr	r3, [pc, #272]	; (8007938 <__multiply+0x14c>)
 8007826:	4845      	ldr	r0, [pc, #276]	; (800793c <__multiply+0x150>)
 8007828:	f240 115d 	movw	r1, #349	; 0x15d
 800782c:	f000 fdd6 	bl	80083dc <__assert_func>
 8007830:	f100 0514 	add.w	r5, r0, #20
 8007834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007838:	462b      	mov	r3, r5
 800783a:	2200      	movs	r2, #0
 800783c:	4543      	cmp	r3, r8
 800783e:	d321      	bcc.n	8007884 <__multiply+0x98>
 8007840:	f104 0314 	add.w	r3, r4, #20
 8007844:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007848:	f109 0314 	add.w	r3, r9, #20
 800784c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007850:	9202      	str	r2, [sp, #8]
 8007852:	1b3a      	subs	r2, r7, r4
 8007854:	3a15      	subs	r2, #21
 8007856:	f022 0203 	bic.w	r2, r2, #3
 800785a:	3204      	adds	r2, #4
 800785c:	f104 0115 	add.w	r1, r4, #21
 8007860:	428f      	cmp	r7, r1
 8007862:	bf38      	it	cc
 8007864:	2204      	movcc	r2, #4
 8007866:	9201      	str	r2, [sp, #4]
 8007868:	9a02      	ldr	r2, [sp, #8]
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	429a      	cmp	r2, r3
 800786e:	d80c      	bhi.n	800788a <__multiply+0x9e>
 8007870:	2e00      	cmp	r6, #0
 8007872:	dd03      	ble.n	800787c <__multiply+0x90>
 8007874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007878:	2b00      	cmp	r3, #0
 800787a:	d05a      	beq.n	8007932 <__multiply+0x146>
 800787c:	6106      	str	r6, [r0, #16]
 800787e:	b005      	add	sp, #20
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	f843 2b04 	str.w	r2, [r3], #4
 8007888:	e7d8      	b.n	800783c <__multiply+0x50>
 800788a:	f8b3 a000 	ldrh.w	sl, [r3]
 800788e:	f1ba 0f00 	cmp.w	sl, #0
 8007892:	d024      	beq.n	80078de <__multiply+0xf2>
 8007894:	f104 0e14 	add.w	lr, r4, #20
 8007898:	46a9      	mov	r9, r5
 800789a:	f04f 0c00 	mov.w	ip, #0
 800789e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078a2:	f8d9 1000 	ldr.w	r1, [r9]
 80078a6:	fa1f fb82 	uxth.w	fp, r2
 80078aa:	b289      	uxth	r1, r1
 80078ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80078b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078b4:	f8d9 2000 	ldr.w	r2, [r9]
 80078b8:	4461      	add	r1, ip
 80078ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078be:	fb0a c20b 	mla	r2, sl, fp, ip
 80078c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078c6:	b289      	uxth	r1, r1
 80078c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078cc:	4577      	cmp	r7, lr
 80078ce:	f849 1b04 	str.w	r1, [r9], #4
 80078d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078d6:	d8e2      	bhi.n	800789e <__multiply+0xb2>
 80078d8:	9a01      	ldr	r2, [sp, #4]
 80078da:	f845 c002 	str.w	ip, [r5, r2]
 80078de:	9a03      	ldr	r2, [sp, #12]
 80078e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078e4:	3304      	adds	r3, #4
 80078e6:	f1b9 0f00 	cmp.w	r9, #0
 80078ea:	d020      	beq.n	800792e <__multiply+0x142>
 80078ec:	6829      	ldr	r1, [r5, #0]
 80078ee:	f104 0c14 	add.w	ip, r4, #20
 80078f2:	46ae      	mov	lr, r5
 80078f4:	f04f 0a00 	mov.w	sl, #0
 80078f8:	f8bc b000 	ldrh.w	fp, [ip]
 80078fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007900:	fb09 220b 	mla	r2, r9, fp, r2
 8007904:	4492      	add	sl, r2
 8007906:	b289      	uxth	r1, r1
 8007908:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800790c:	f84e 1b04 	str.w	r1, [lr], #4
 8007910:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007914:	f8be 1000 	ldrh.w	r1, [lr]
 8007918:	0c12      	lsrs	r2, r2, #16
 800791a:	fb09 1102 	mla	r1, r9, r2, r1
 800791e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007922:	4567      	cmp	r7, ip
 8007924:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007928:	d8e6      	bhi.n	80078f8 <__multiply+0x10c>
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	50a9      	str	r1, [r5, r2]
 800792e:	3504      	adds	r5, #4
 8007930:	e79a      	b.n	8007868 <__multiply+0x7c>
 8007932:	3e01      	subs	r6, #1
 8007934:	e79c      	b.n	8007870 <__multiply+0x84>
 8007936:	bf00      	nop
 8007938:	08009f08 	.word	0x08009f08
 800793c:	08009f94 	.word	0x08009f94

08007940 <__pow5mult>:
 8007940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007944:	4615      	mov	r5, r2
 8007946:	f012 0203 	ands.w	r2, r2, #3
 800794a:	4606      	mov	r6, r0
 800794c:	460f      	mov	r7, r1
 800794e:	d007      	beq.n	8007960 <__pow5mult+0x20>
 8007950:	4c25      	ldr	r4, [pc, #148]	; (80079e8 <__pow5mult+0xa8>)
 8007952:	3a01      	subs	r2, #1
 8007954:	2300      	movs	r3, #0
 8007956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800795a:	f7ff fe51 	bl	8007600 <__multadd>
 800795e:	4607      	mov	r7, r0
 8007960:	10ad      	asrs	r5, r5, #2
 8007962:	d03d      	beq.n	80079e0 <__pow5mult+0xa0>
 8007964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007966:	b97c      	cbnz	r4, 8007988 <__pow5mult+0x48>
 8007968:	2010      	movs	r0, #16
 800796a:	f7ff fdbf 	bl	80074ec <malloc>
 800796e:	4602      	mov	r2, r0
 8007970:	6270      	str	r0, [r6, #36]	; 0x24
 8007972:	b928      	cbnz	r0, 8007980 <__pow5mult+0x40>
 8007974:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <__pow5mult+0xac>)
 8007976:	481e      	ldr	r0, [pc, #120]	; (80079f0 <__pow5mult+0xb0>)
 8007978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800797c:	f000 fd2e 	bl	80083dc <__assert_func>
 8007980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007984:	6004      	str	r4, [r0, #0]
 8007986:	60c4      	str	r4, [r0, #12]
 8007988:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800798c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007990:	b94c      	cbnz	r4, 80079a6 <__pow5mult+0x66>
 8007992:	f240 2171 	movw	r1, #625	; 0x271
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ff12 	bl	80077c0 <__i2b>
 800799c:	2300      	movs	r3, #0
 800799e:	f8c8 0008 	str.w	r0, [r8, #8]
 80079a2:	4604      	mov	r4, r0
 80079a4:	6003      	str	r3, [r0, #0]
 80079a6:	f04f 0900 	mov.w	r9, #0
 80079aa:	07eb      	lsls	r3, r5, #31
 80079ac:	d50a      	bpl.n	80079c4 <__pow5mult+0x84>
 80079ae:	4639      	mov	r1, r7
 80079b0:	4622      	mov	r2, r4
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7ff ff1a 	bl	80077ec <__multiply>
 80079b8:	4639      	mov	r1, r7
 80079ba:	4680      	mov	r8, r0
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff fdfd 	bl	80075bc <_Bfree>
 80079c2:	4647      	mov	r7, r8
 80079c4:	106d      	asrs	r5, r5, #1
 80079c6:	d00b      	beq.n	80079e0 <__pow5mult+0xa0>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	b938      	cbnz	r0, 80079dc <__pow5mult+0x9c>
 80079cc:	4622      	mov	r2, r4
 80079ce:	4621      	mov	r1, r4
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff ff0b 	bl	80077ec <__multiply>
 80079d6:	6020      	str	r0, [r4, #0]
 80079d8:	f8c0 9000 	str.w	r9, [r0]
 80079dc:	4604      	mov	r4, r0
 80079de:	e7e4      	b.n	80079aa <__pow5mult+0x6a>
 80079e0:	4638      	mov	r0, r7
 80079e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e6:	bf00      	nop
 80079e8:	0800a0e0 	.word	0x0800a0e0
 80079ec:	08009e96 	.word	0x08009e96
 80079f0:	08009f94 	.word	0x08009f94

080079f4 <__lshift>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	6849      	ldr	r1, [r1, #4]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a02:	68a3      	ldr	r3, [r4, #8]
 8007a04:	4607      	mov	r7, r0
 8007a06:	4691      	mov	r9, r2
 8007a08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a0c:	f108 0601 	add.w	r6, r8, #1
 8007a10:	42b3      	cmp	r3, r6
 8007a12:	db0b      	blt.n	8007a2c <__lshift+0x38>
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff fd91 	bl	800753c <_Balloc>
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	b948      	cbnz	r0, 8007a32 <__lshift+0x3e>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <__lshift+0xd8>)
 8007a22:	482b      	ldr	r0, [pc, #172]	; (8007ad0 <__lshift+0xdc>)
 8007a24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a28:	f000 fcd8 	bl	80083dc <__assert_func>
 8007a2c:	3101      	adds	r1, #1
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	e7ee      	b.n	8007a10 <__lshift+0x1c>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f100 0114 	add.w	r1, r0, #20
 8007a38:	f100 0210 	add.w	r2, r0, #16
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	4553      	cmp	r3, sl
 8007a40:	db37      	blt.n	8007ab2 <__lshift+0xbe>
 8007a42:	6920      	ldr	r0, [r4, #16]
 8007a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a48:	f104 0314 	add.w	r3, r4, #20
 8007a4c:	f019 091f 	ands.w	r9, r9, #31
 8007a50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a58:	d02f      	beq.n	8007aba <__lshift+0xc6>
 8007a5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a5e:	468a      	mov	sl, r1
 8007a60:	f04f 0c00 	mov.w	ip, #0
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	fa02 f209 	lsl.w	r2, r2, r9
 8007a6a:	ea42 020c 	orr.w	r2, r2, ip
 8007a6e:	f84a 2b04 	str.w	r2, [sl], #4
 8007a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a76:	4298      	cmp	r0, r3
 8007a78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a7c:	d8f2      	bhi.n	8007a64 <__lshift+0x70>
 8007a7e:	1b03      	subs	r3, r0, r4
 8007a80:	3b15      	subs	r3, #21
 8007a82:	f023 0303 	bic.w	r3, r3, #3
 8007a86:	3304      	adds	r3, #4
 8007a88:	f104 0215 	add.w	r2, r4, #21
 8007a8c:	4290      	cmp	r0, r2
 8007a8e:	bf38      	it	cc
 8007a90:	2304      	movcc	r3, #4
 8007a92:	f841 c003 	str.w	ip, [r1, r3]
 8007a96:	f1bc 0f00 	cmp.w	ip, #0
 8007a9a:	d001      	beq.n	8007aa0 <__lshift+0xac>
 8007a9c:	f108 0602 	add.w	r6, r8, #2
 8007aa0:	3e01      	subs	r6, #1
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	612e      	str	r6, [r5, #16]
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f7ff fd88 	bl	80075bc <_Bfree>
 8007aac:	4628      	mov	r0, r5
 8007aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	e7c1      	b.n	8007a3e <__lshift+0x4a>
 8007aba:	3904      	subs	r1, #4
 8007abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ac4:	4298      	cmp	r0, r3
 8007ac6:	d8f9      	bhi.n	8007abc <__lshift+0xc8>
 8007ac8:	e7ea      	b.n	8007aa0 <__lshift+0xac>
 8007aca:	bf00      	nop
 8007acc:	08009f08 	.word	0x08009f08
 8007ad0:	08009f94 	.word	0x08009f94

08007ad4 <__mcmp>:
 8007ad4:	b530      	push	{r4, r5, lr}
 8007ad6:	6902      	ldr	r2, [r0, #16]
 8007ad8:	690c      	ldr	r4, [r1, #16]
 8007ada:	1b12      	subs	r2, r2, r4
 8007adc:	d10e      	bne.n	8007afc <__mcmp+0x28>
 8007ade:	f100 0314 	add.w	r3, r0, #20
 8007ae2:	3114      	adds	r1, #20
 8007ae4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ae8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007aec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007af0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007af4:	42a5      	cmp	r5, r4
 8007af6:	d003      	beq.n	8007b00 <__mcmp+0x2c>
 8007af8:	d305      	bcc.n	8007b06 <__mcmp+0x32>
 8007afa:	2201      	movs	r2, #1
 8007afc:	4610      	mov	r0, r2
 8007afe:	bd30      	pop	{r4, r5, pc}
 8007b00:	4283      	cmp	r3, r0
 8007b02:	d3f3      	bcc.n	8007aec <__mcmp+0x18>
 8007b04:	e7fa      	b.n	8007afc <__mcmp+0x28>
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0a:	e7f7      	b.n	8007afc <__mcmp+0x28>

08007b0c <__mdiff>:
 8007b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	460c      	mov	r4, r1
 8007b12:	4606      	mov	r6, r0
 8007b14:	4611      	mov	r1, r2
 8007b16:	4620      	mov	r0, r4
 8007b18:	4690      	mov	r8, r2
 8007b1a:	f7ff ffdb 	bl	8007ad4 <__mcmp>
 8007b1e:	1e05      	subs	r5, r0, #0
 8007b20:	d110      	bne.n	8007b44 <__mdiff+0x38>
 8007b22:	4629      	mov	r1, r5
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff fd09 	bl	800753c <_Balloc>
 8007b2a:	b930      	cbnz	r0, 8007b3a <__mdiff+0x2e>
 8007b2c:	4b3a      	ldr	r3, [pc, #232]	; (8007c18 <__mdiff+0x10c>)
 8007b2e:	4602      	mov	r2, r0
 8007b30:	f240 2132 	movw	r1, #562	; 0x232
 8007b34:	4839      	ldr	r0, [pc, #228]	; (8007c1c <__mdiff+0x110>)
 8007b36:	f000 fc51 	bl	80083dc <__assert_func>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	bfa4      	itt	ge
 8007b46:	4643      	movge	r3, r8
 8007b48:	46a0      	movge	r8, r4
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b50:	bfa6      	itte	ge
 8007b52:	461c      	movge	r4, r3
 8007b54:	2500      	movge	r5, #0
 8007b56:	2501      	movlt	r5, #1
 8007b58:	f7ff fcf0 	bl	800753c <_Balloc>
 8007b5c:	b920      	cbnz	r0, 8007b68 <__mdiff+0x5c>
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <__mdiff+0x10c>)
 8007b60:	4602      	mov	r2, r0
 8007b62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b66:	e7e5      	b.n	8007b34 <__mdiff+0x28>
 8007b68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b6c:	6926      	ldr	r6, [r4, #16]
 8007b6e:	60c5      	str	r5, [r0, #12]
 8007b70:	f104 0914 	add.w	r9, r4, #20
 8007b74:	f108 0514 	add.w	r5, r8, #20
 8007b78:	f100 0e14 	add.w	lr, r0, #20
 8007b7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b84:	f108 0210 	add.w	r2, r8, #16
 8007b88:	46f2      	mov	sl, lr
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b94:	fa1f f883 	uxth.w	r8, r3
 8007b98:	fa11 f18b 	uxtah	r1, r1, fp
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	eba1 0808 	sub.w	r8, r1, r8
 8007ba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ba6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007baa:	fa1f f888 	uxth.w	r8, r8
 8007bae:	1419      	asrs	r1, r3, #16
 8007bb0:	454e      	cmp	r6, r9
 8007bb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bb6:	f84a 3b04 	str.w	r3, [sl], #4
 8007bba:	d8e7      	bhi.n	8007b8c <__mdiff+0x80>
 8007bbc:	1b33      	subs	r3, r6, r4
 8007bbe:	3b15      	subs	r3, #21
 8007bc0:	f023 0303 	bic.w	r3, r3, #3
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	3415      	adds	r4, #21
 8007bc8:	42a6      	cmp	r6, r4
 8007bca:	bf38      	it	cc
 8007bcc:	2304      	movcc	r3, #4
 8007bce:	441d      	add	r5, r3
 8007bd0:	4473      	add	r3, lr
 8007bd2:	469e      	mov	lr, r3
 8007bd4:	462e      	mov	r6, r5
 8007bd6:	4566      	cmp	r6, ip
 8007bd8:	d30e      	bcc.n	8007bf8 <__mdiff+0xec>
 8007bda:	f10c 0203 	add.w	r2, ip, #3
 8007bde:	1b52      	subs	r2, r2, r5
 8007be0:	f022 0203 	bic.w	r2, r2, #3
 8007be4:	3d03      	subs	r5, #3
 8007be6:	45ac      	cmp	ip, r5
 8007be8:	bf38      	it	cc
 8007bea:	2200      	movcc	r2, #0
 8007bec:	441a      	add	r2, r3
 8007bee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bf2:	b17b      	cbz	r3, 8007c14 <__mdiff+0x108>
 8007bf4:	6107      	str	r7, [r0, #16]
 8007bf6:	e7a3      	b.n	8007b40 <__mdiff+0x34>
 8007bf8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007bfc:	fa11 f288 	uxtah	r2, r1, r8
 8007c00:	1414      	asrs	r4, r2, #16
 8007c02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c06:	b292      	uxth	r2, r2
 8007c08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c0c:	f84e 2b04 	str.w	r2, [lr], #4
 8007c10:	1421      	asrs	r1, r4, #16
 8007c12:	e7e0      	b.n	8007bd6 <__mdiff+0xca>
 8007c14:	3f01      	subs	r7, #1
 8007c16:	e7ea      	b.n	8007bee <__mdiff+0xe2>
 8007c18:	08009f08 	.word	0x08009f08
 8007c1c:	08009f94 	.word	0x08009f94

08007c20 <__ulp>:
 8007c20:	b082      	sub	sp, #8
 8007c22:	ed8d 0b00 	vstr	d0, [sp]
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	4912      	ldr	r1, [pc, #72]	; (8007c74 <__ulp+0x54>)
 8007c2a:	4019      	ands	r1, r3
 8007c2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007c30:	2900      	cmp	r1, #0
 8007c32:	dd05      	ble.n	8007c40 <__ulp+0x20>
 8007c34:	2200      	movs	r2, #0
 8007c36:	460b      	mov	r3, r1
 8007c38:	ec43 2b10 	vmov	d0, r2, r3
 8007c3c:	b002      	add	sp, #8
 8007c3e:	4770      	bx	lr
 8007c40:	4249      	negs	r1, r1
 8007c42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007c46:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	da04      	bge.n	8007c5e <__ulp+0x3e>
 8007c54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c58:	fa41 f300 	asr.w	r3, r1, r0
 8007c5c:	e7ec      	b.n	8007c38 <__ulp+0x18>
 8007c5e:	f1a0 0114 	sub.w	r1, r0, #20
 8007c62:	291e      	cmp	r1, #30
 8007c64:	bfda      	itte	le
 8007c66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007c6a:	fa20 f101 	lsrle.w	r1, r0, r1
 8007c6e:	2101      	movgt	r1, #1
 8007c70:	460a      	mov	r2, r1
 8007c72:	e7e1      	b.n	8007c38 <__ulp+0x18>
 8007c74:	7ff00000 	.word	0x7ff00000

08007c78 <__b2d>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	6905      	ldr	r5, [r0, #16]
 8007c7c:	f100 0714 	add.w	r7, r0, #20
 8007c80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c84:	1f2e      	subs	r6, r5, #4
 8007c86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f7ff fd48 	bl	8007720 <__hi0bits>
 8007c90:	f1c0 0320 	rsb	r3, r0, #32
 8007c94:	280a      	cmp	r0, #10
 8007c96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007d14 <__b2d+0x9c>
 8007c9a:	600b      	str	r3, [r1, #0]
 8007c9c:	dc14      	bgt.n	8007cc8 <__b2d+0x50>
 8007c9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007ca2:	fa24 f10e 	lsr.w	r1, r4, lr
 8007ca6:	42b7      	cmp	r7, r6
 8007ca8:	ea41 030c 	orr.w	r3, r1, ip
 8007cac:	bf34      	ite	cc
 8007cae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cb2:	2100      	movcs	r1, #0
 8007cb4:	3015      	adds	r0, #21
 8007cb6:	fa04 f000 	lsl.w	r0, r4, r0
 8007cba:	fa21 f10e 	lsr.w	r1, r1, lr
 8007cbe:	ea40 0201 	orr.w	r2, r0, r1
 8007cc2:	ec43 2b10 	vmov	d0, r2, r3
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	42b7      	cmp	r7, r6
 8007cca:	bf3a      	itte	cc
 8007ccc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cd0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007cd4:	2100      	movcs	r1, #0
 8007cd6:	380b      	subs	r0, #11
 8007cd8:	d017      	beq.n	8007d0a <__b2d+0x92>
 8007cda:	f1c0 0c20 	rsb	ip, r0, #32
 8007cde:	fa04 f500 	lsl.w	r5, r4, r0
 8007ce2:	42be      	cmp	r6, r7
 8007ce4:	fa21 f40c 	lsr.w	r4, r1, ip
 8007ce8:	ea45 0504 	orr.w	r5, r5, r4
 8007cec:	bf8c      	ite	hi
 8007cee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007cf2:	2400      	movls	r4, #0
 8007cf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007cf8:	fa01 f000 	lsl.w	r0, r1, r0
 8007cfc:	fa24 f40c 	lsr.w	r4, r4, ip
 8007d00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d04:	ea40 0204 	orr.w	r2, r0, r4
 8007d08:	e7db      	b.n	8007cc2 <__b2d+0x4a>
 8007d0a:	ea44 030c 	orr.w	r3, r4, ip
 8007d0e:	460a      	mov	r2, r1
 8007d10:	e7d7      	b.n	8007cc2 <__b2d+0x4a>
 8007d12:	bf00      	nop
 8007d14:	3ff00000 	.word	0x3ff00000

08007d18 <__d2b>:
 8007d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d1c:	4689      	mov	r9, r1
 8007d1e:	2101      	movs	r1, #1
 8007d20:	ec57 6b10 	vmov	r6, r7, d0
 8007d24:	4690      	mov	r8, r2
 8007d26:	f7ff fc09 	bl	800753c <_Balloc>
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	b930      	cbnz	r0, 8007d3c <__d2b+0x24>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4b25      	ldr	r3, [pc, #148]	; (8007dc8 <__d2b+0xb0>)
 8007d32:	4826      	ldr	r0, [pc, #152]	; (8007dcc <__d2b+0xb4>)
 8007d34:	f240 310a 	movw	r1, #778	; 0x30a
 8007d38:	f000 fb50 	bl	80083dc <__assert_func>
 8007d3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d44:	bb35      	cbnz	r5, 8007d94 <__d2b+0x7c>
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	d028      	beq.n	8007d9e <__d2b+0x86>
 8007d4c:	4668      	mov	r0, sp
 8007d4e:	9600      	str	r6, [sp, #0]
 8007d50:	f7ff fd06 	bl	8007760 <__lo0bits>
 8007d54:	9900      	ldr	r1, [sp, #0]
 8007d56:	b300      	cbz	r0, 8007d9a <__d2b+0x82>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	f1c0 0320 	rsb	r3, r0, #32
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	430b      	orrs	r3, r1
 8007d64:	40c2      	lsrs	r2, r0
 8007d66:	6163      	str	r3, [r4, #20]
 8007d68:	9201      	str	r2, [sp, #4]
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	61a3      	str	r3, [r4, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bf14      	ite	ne
 8007d72:	2202      	movne	r2, #2
 8007d74:	2201      	moveq	r2, #1
 8007d76:	6122      	str	r2, [r4, #16]
 8007d78:	b1d5      	cbz	r5, 8007db0 <__d2b+0x98>
 8007d7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d7e:	4405      	add	r5, r0
 8007d80:	f8c9 5000 	str.w	r5, [r9]
 8007d84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d88:	f8c8 0000 	str.w	r0, [r8]
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	b003      	add	sp, #12
 8007d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d98:	e7d5      	b.n	8007d46 <__d2b+0x2e>
 8007d9a:	6161      	str	r1, [r4, #20]
 8007d9c:	e7e5      	b.n	8007d6a <__d2b+0x52>
 8007d9e:	a801      	add	r0, sp, #4
 8007da0:	f7ff fcde 	bl	8007760 <__lo0bits>
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	2201      	movs	r2, #1
 8007daa:	6122      	str	r2, [r4, #16]
 8007dac:	3020      	adds	r0, #32
 8007dae:	e7e3      	b.n	8007d78 <__d2b+0x60>
 8007db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007db8:	f8c9 0000 	str.w	r0, [r9]
 8007dbc:	6918      	ldr	r0, [r3, #16]
 8007dbe:	f7ff fcaf 	bl	8007720 <__hi0bits>
 8007dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dc6:	e7df      	b.n	8007d88 <__d2b+0x70>
 8007dc8:	08009f08 	.word	0x08009f08
 8007dcc:	08009f94 	.word	0x08009f94

08007dd0 <__ratio>:
 8007dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	4688      	mov	r8, r1
 8007dd6:	4669      	mov	r1, sp
 8007dd8:	4681      	mov	r9, r0
 8007dda:	f7ff ff4d 	bl	8007c78 <__b2d>
 8007dde:	a901      	add	r1, sp, #4
 8007de0:	4640      	mov	r0, r8
 8007de2:	ec55 4b10 	vmov	r4, r5, d0
 8007de6:	f7ff ff47 	bl	8007c78 <__b2d>
 8007dea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007df2:	eba3 0c02 	sub.w	ip, r3, r2
 8007df6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007e00:	ec51 0b10 	vmov	r0, r1, d0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfd6      	itet	le
 8007e08:	460a      	movle	r2, r1
 8007e0a:	462a      	movgt	r2, r5
 8007e0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e10:	468b      	mov	fp, r1
 8007e12:	462f      	mov	r7, r5
 8007e14:	bfd4      	ite	le
 8007e16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007e1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e1e:	4620      	mov	r0, r4
 8007e20:	ee10 2a10 	vmov	r2, s0
 8007e24:	465b      	mov	r3, fp
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 fd18 	bl	800085c <__aeabi_ddiv>
 8007e2c:	ec41 0b10 	vmov	d0, r0, r1
 8007e30:	b003      	add	sp, #12
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e36 <__copybits>:
 8007e36:	3901      	subs	r1, #1
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	1149      	asrs	r1, r1, #5
 8007e3c:	6914      	ldr	r4, [r2, #16]
 8007e3e:	3101      	adds	r1, #1
 8007e40:	f102 0314 	add.w	r3, r2, #20
 8007e44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e4c:	1f05      	subs	r5, r0, #4
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	d30c      	bcc.n	8007e6c <__copybits+0x36>
 8007e52:	1aa3      	subs	r3, r4, r2
 8007e54:	3b11      	subs	r3, #17
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	3211      	adds	r2, #17
 8007e5c:	42a2      	cmp	r2, r4
 8007e5e:	bf88      	it	hi
 8007e60:	2300      	movhi	r3, #0
 8007e62:	4418      	add	r0, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	4288      	cmp	r0, r1
 8007e68:	d305      	bcc.n	8007e76 <__copybits+0x40>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e70:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e74:	e7eb      	b.n	8007e4e <__copybits+0x18>
 8007e76:	f840 3b04 	str.w	r3, [r0], #4
 8007e7a:	e7f4      	b.n	8007e66 <__copybits+0x30>

08007e7c <__any_on>:
 8007e7c:	f100 0214 	add.w	r2, r0, #20
 8007e80:	6900      	ldr	r0, [r0, #16]
 8007e82:	114b      	asrs	r3, r1, #5
 8007e84:	4298      	cmp	r0, r3
 8007e86:	b510      	push	{r4, lr}
 8007e88:	db11      	blt.n	8007eae <__any_on+0x32>
 8007e8a:	dd0a      	ble.n	8007ea2 <__any_on+0x26>
 8007e8c:	f011 011f 	ands.w	r1, r1, #31
 8007e90:	d007      	beq.n	8007ea2 <__any_on+0x26>
 8007e92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e96:	fa24 f001 	lsr.w	r0, r4, r1
 8007e9a:	fa00 f101 	lsl.w	r1, r0, r1
 8007e9e:	428c      	cmp	r4, r1
 8007ea0:	d10b      	bne.n	8007eba <__any_on+0x3e>
 8007ea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d803      	bhi.n	8007eb2 <__any_on+0x36>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	4603      	mov	r3, r0
 8007eb0:	e7f7      	b.n	8007ea2 <__any_on+0x26>
 8007eb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	d0f5      	beq.n	8007ea6 <__any_on+0x2a>
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7f6      	b.n	8007eac <__any_on+0x30>

08007ebe <_calloc_r>:
 8007ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ec0:	fba1 2402 	umull	r2, r4, r1, r2
 8007ec4:	b94c      	cbnz	r4, 8007eda <_calloc_r+0x1c>
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	9201      	str	r2, [sp, #4]
 8007eca:	f000 f87b 	bl	8007fc4 <_malloc_r>
 8007ece:	9a01      	ldr	r2, [sp, #4]
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	b930      	cbnz	r0, 8007ee2 <_calloc_r+0x24>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	b003      	add	sp, #12
 8007ed8:	bd30      	pop	{r4, r5, pc}
 8007eda:	220c      	movs	r2, #12
 8007edc:	6002      	str	r2, [r0, #0]
 8007ede:	2500      	movs	r5, #0
 8007ee0:	e7f8      	b.n	8007ed4 <_calloc_r+0x16>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f7fc fb8a 	bl	80045fc <memset>
 8007ee8:	e7f4      	b.n	8007ed4 <_calloc_r+0x16>
	...

08007eec <_free_r>:
 8007eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d044      	beq.n	8007f7c <_free_r+0x90>
 8007ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef6:	9001      	str	r0, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f1a1 0404 	sub.w	r4, r1, #4
 8007efe:	bfb8      	it	lt
 8007f00:	18e4      	addlt	r4, r4, r3
 8007f02:	f000 fab5 	bl	8008470 <__malloc_lock>
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <_free_r+0x94>)
 8007f08:	9801      	ldr	r0, [sp, #4]
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	b933      	cbnz	r3, 8007f1c <_free_r+0x30>
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	6014      	str	r4, [r2, #0]
 8007f12:	b003      	add	sp, #12
 8007f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f18:	f000 bab0 	b.w	800847c <__malloc_unlock>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d908      	bls.n	8007f32 <_free_r+0x46>
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf01      	itttt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	1949      	addeq	r1, r1, r5
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	e7ed      	b.n	8007f0e <_free_r+0x22>
 8007f32:	461a      	mov	r2, r3
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b10b      	cbz	r3, 8007f3c <_free_r+0x50>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d9fa      	bls.n	8007f32 <_free_r+0x46>
 8007f3c:	6811      	ldr	r1, [r2, #0]
 8007f3e:	1855      	adds	r5, r2, r1
 8007f40:	42a5      	cmp	r5, r4
 8007f42:	d10b      	bne.n	8007f5c <_free_r+0x70>
 8007f44:	6824      	ldr	r4, [r4, #0]
 8007f46:	4421      	add	r1, r4
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	d1e0      	bne.n	8007f12 <_free_r+0x26>
 8007f50:	681c      	ldr	r4, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6053      	str	r3, [r2, #4]
 8007f56:	4421      	add	r1, r4
 8007f58:	6011      	str	r1, [r2, #0]
 8007f5a:	e7da      	b.n	8007f12 <_free_r+0x26>
 8007f5c:	d902      	bls.n	8007f64 <_free_r+0x78>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	e7d6      	b.n	8007f12 <_free_r+0x26>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf04      	itt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	1949      	addeq	r1, r1, r5
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	6054      	str	r4, [r2, #4]
 8007f7a:	e7ca      	b.n	8007f12 <_free_r+0x26>
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bd30      	pop	{r4, r5, pc}
 8007f80:	200006f4 	.word	0x200006f4

08007f84 <sbrk_aligned>:
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	4e0e      	ldr	r6, [pc, #56]	; (8007fc0 <sbrk_aligned+0x3c>)
 8007f88:	460c      	mov	r4, r1
 8007f8a:	6831      	ldr	r1, [r6, #0]
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	b911      	cbnz	r1, 8007f96 <sbrk_aligned+0x12>
 8007f90:	f000 f9f2 	bl	8008378 <_sbrk_r>
 8007f94:	6030      	str	r0, [r6, #0]
 8007f96:	4621      	mov	r1, r4
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 f9ed 	bl	8008378 <_sbrk_r>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d00a      	beq.n	8007fb8 <sbrk_aligned+0x34>
 8007fa2:	1cc4      	adds	r4, r0, #3
 8007fa4:	f024 0403 	bic.w	r4, r4, #3
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	d007      	beq.n	8007fbc <sbrk_aligned+0x38>
 8007fac:	1a21      	subs	r1, r4, r0
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 f9e2 	bl	8008378 <_sbrk_r>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d101      	bne.n	8007fbc <sbrk_aligned+0x38>
 8007fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	200006f8 	.word	0x200006f8

08007fc4 <_malloc_r>:
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	1ccd      	adds	r5, r1, #3
 8007fca:	f025 0503 	bic.w	r5, r5, #3
 8007fce:	3508      	adds	r5, #8
 8007fd0:	2d0c      	cmp	r5, #12
 8007fd2:	bf38      	it	cc
 8007fd4:	250c      	movcc	r5, #12
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	4607      	mov	r7, r0
 8007fda:	db01      	blt.n	8007fe0 <_malloc_r+0x1c>
 8007fdc:	42a9      	cmp	r1, r5
 8007fde:	d905      	bls.n	8007fec <_malloc_r+0x28>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fec:	4e2e      	ldr	r6, [pc, #184]	; (80080a8 <_malloc_r+0xe4>)
 8007fee:	f000 fa3f 	bl	8008470 <__malloc_lock>
 8007ff2:	6833      	ldr	r3, [r6, #0]
 8007ff4:	461c      	mov	r4, r3
 8007ff6:	bb34      	cbnz	r4, 8008046 <_malloc_r+0x82>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff ffc2 	bl	8007f84 <sbrk_aligned>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	4604      	mov	r4, r0
 8008004:	d14d      	bne.n	80080a2 <_malloc_r+0xde>
 8008006:	6834      	ldr	r4, [r6, #0]
 8008008:	4626      	mov	r6, r4
 800800a:	2e00      	cmp	r6, #0
 800800c:	d140      	bne.n	8008090 <_malloc_r+0xcc>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	4631      	mov	r1, r6
 8008012:	4638      	mov	r0, r7
 8008014:	eb04 0803 	add.w	r8, r4, r3
 8008018:	f000 f9ae 	bl	8008378 <_sbrk_r>
 800801c:	4580      	cmp	r8, r0
 800801e:	d13a      	bne.n	8008096 <_malloc_r+0xd2>
 8008020:	6821      	ldr	r1, [r4, #0]
 8008022:	3503      	adds	r5, #3
 8008024:	1a6d      	subs	r5, r5, r1
 8008026:	f025 0503 	bic.w	r5, r5, #3
 800802a:	3508      	adds	r5, #8
 800802c:	2d0c      	cmp	r5, #12
 800802e:	bf38      	it	cc
 8008030:	250c      	movcc	r5, #12
 8008032:	4629      	mov	r1, r5
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ffa5 	bl	8007f84 <sbrk_aligned>
 800803a:	3001      	adds	r0, #1
 800803c:	d02b      	beq.n	8008096 <_malloc_r+0xd2>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	442b      	add	r3, r5
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	e00e      	b.n	8008064 <_malloc_r+0xa0>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	1b52      	subs	r2, r2, r5
 800804a:	d41e      	bmi.n	800808a <_malloc_r+0xc6>
 800804c:	2a0b      	cmp	r2, #11
 800804e:	d916      	bls.n	800807e <_malloc_r+0xba>
 8008050:	1961      	adds	r1, r4, r5
 8008052:	42a3      	cmp	r3, r4
 8008054:	6025      	str	r5, [r4, #0]
 8008056:	bf18      	it	ne
 8008058:	6059      	strne	r1, [r3, #4]
 800805a:	6863      	ldr	r3, [r4, #4]
 800805c:	bf08      	it	eq
 800805e:	6031      	streq	r1, [r6, #0]
 8008060:	5162      	str	r2, [r4, r5]
 8008062:	604b      	str	r3, [r1, #4]
 8008064:	4638      	mov	r0, r7
 8008066:	f104 060b 	add.w	r6, r4, #11
 800806a:	f000 fa07 	bl	800847c <__malloc_unlock>
 800806e:	f026 0607 	bic.w	r6, r6, #7
 8008072:	1d23      	adds	r3, r4, #4
 8008074:	1af2      	subs	r2, r6, r3
 8008076:	d0b6      	beq.n	8007fe6 <_malloc_r+0x22>
 8008078:	1b9b      	subs	r3, r3, r6
 800807a:	50a3      	str	r3, [r4, r2]
 800807c:	e7b3      	b.n	8007fe6 <_malloc_r+0x22>
 800807e:	6862      	ldr	r2, [r4, #4]
 8008080:	42a3      	cmp	r3, r4
 8008082:	bf0c      	ite	eq
 8008084:	6032      	streq	r2, [r6, #0]
 8008086:	605a      	strne	r2, [r3, #4]
 8008088:	e7ec      	b.n	8008064 <_malloc_r+0xa0>
 800808a:	4623      	mov	r3, r4
 800808c:	6864      	ldr	r4, [r4, #4]
 800808e:	e7b2      	b.n	8007ff6 <_malloc_r+0x32>
 8008090:	4634      	mov	r4, r6
 8008092:	6876      	ldr	r6, [r6, #4]
 8008094:	e7b9      	b.n	800800a <_malloc_r+0x46>
 8008096:	230c      	movs	r3, #12
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	4638      	mov	r0, r7
 800809c:	f000 f9ee 	bl	800847c <__malloc_unlock>
 80080a0:	e7a1      	b.n	8007fe6 <_malloc_r+0x22>
 80080a2:	6025      	str	r5, [r4, #0]
 80080a4:	e7de      	b.n	8008064 <_malloc_r+0xa0>
 80080a6:	bf00      	nop
 80080a8:	200006f4 	.word	0x200006f4

080080ac <__ssputs_r>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	688e      	ldr	r6, [r1, #8]
 80080b2:	429e      	cmp	r6, r3
 80080b4:	4682      	mov	sl, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	4690      	mov	r8, r2
 80080ba:	461f      	mov	r7, r3
 80080bc:	d838      	bhi.n	8008130 <__ssputs_r+0x84>
 80080be:	898a      	ldrh	r2, [r1, #12]
 80080c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080c4:	d032      	beq.n	800812c <__ssputs_r+0x80>
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	6909      	ldr	r1, [r1, #16]
 80080ca:	eba5 0901 	sub.w	r9, r5, r1
 80080ce:	6965      	ldr	r5, [r4, #20]
 80080d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080d8:	3301      	adds	r3, #1
 80080da:	444b      	add	r3, r9
 80080dc:	106d      	asrs	r5, r5, #1
 80080de:	429d      	cmp	r5, r3
 80080e0:	bf38      	it	cc
 80080e2:	461d      	movcc	r5, r3
 80080e4:	0553      	lsls	r3, r2, #21
 80080e6:	d531      	bpl.n	800814c <__ssputs_r+0xa0>
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7ff ff6b 	bl	8007fc4 <_malloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	b950      	cbnz	r0, 8008108 <__ssputs_r+0x5c>
 80080f2:	230c      	movs	r3, #12
 80080f4:	f8ca 3000 	str.w	r3, [sl]
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	6921      	ldr	r1, [r4, #16]
 800810a:	464a      	mov	r2, r9
 800810c:	f7ff fa08 	bl	8007520 <memcpy>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	6126      	str	r6, [r4, #16]
 800811e:	6165      	str	r5, [r4, #20]
 8008120:	444e      	add	r6, r9
 8008122:	eba5 0509 	sub.w	r5, r5, r9
 8008126:	6026      	str	r6, [r4, #0]
 8008128:	60a5      	str	r5, [r4, #8]
 800812a:	463e      	mov	r6, r7
 800812c:	42be      	cmp	r6, r7
 800812e:	d900      	bls.n	8008132 <__ssputs_r+0x86>
 8008130:	463e      	mov	r6, r7
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	4632      	mov	r2, r6
 8008136:	4641      	mov	r1, r8
 8008138:	f000 f980 	bl	800843c <memmove>
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	1b9b      	subs	r3, r3, r6
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	4433      	add	r3, r6
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	2000      	movs	r0, #0
 800814a:	e7db      	b.n	8008104 <__ssputs_r+0x58>
 800814c:	462a      	mov	r2, r5
 800814e:	f000 f99b 	bl	8008488 <_realloc_r>
 8008152:	4606      	mov	r6, r0
 8008154:	2800      	cmp	r0, #0
 8008156:	d1e1      	bne.n	800811c <__ssputs_r+0x70>
 8008158:	6921      	ldr	r1, [r4, #16]
 800815a:	4650      	mov	r0, sl
 800815c:	f7ff fec6 	bl	8007eec <_free_r>
 8008160:	e7c7      	b.n	80080f2 <__ssputs_r+0x46>
	...

08008164 <_svfiprintf_r>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	4698      	mov	r8, r3
 800816a:	898b      	ldrh	r3, [r1, #12]
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	b09d      	sub	sp, #116	; 0x74
 8008170:	4607      	mov	r7, r0
 8008172:	460d      	mov	r5, r1
 8008174:	4614      	mov	r4, r2
 8008176:	d50e      	bpl.n	8008196 <_svfiprintf_r+0x32>
 8008178:	690b      	ldr	r3, [r1, #16]
 800817a:	b963      	cbnz	r3, 8008196 <_svfiprintf_r+0x32>
 800817c:	2140      	movs	r1, #64	; 0x40
 800817e:	f7ff ff21 	bl	8007fc4 <_malloc_r>
 8008182:	6028      	str	r0, [r5, #0]
 8008184:	6128      	str	r0, [r5, #16]
 8008186:	b920      	cbnz	r0, 8008192 <_svfiprintf_r+0x2e>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e0d1      	b.n	8008336 <_svfiprintf_r+0x1d2>
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	616b      	str	r3, [r5, #20]
 8008196:	2300      	movs	r3, #0
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	2320      	movs	r3, #32
 800819c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a4:	2330      	movs	r3, #48	; 0x30
 80081a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008350 <_svfiprintf_r+0x1ec>
 80081aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ae:	f04f 0901 	mov.w	r9, #1
 80081b2:	4623      	mov	r3, r4
 80081b4:	469a      	mov	sl, r3
 80081b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ba:	b10a      	cbz	r2, 80081c0 <_svfiprintf_r+0x5c>
 80081bc:	2a25      	cmp	r2, #37	; 0x25
 80081be:	d1f9      	bne.n	80081b4 <_svfiprintf_r+0x50>
 80081c0:	ebba 0b04 	subs.w	fp, sl, r4
 80081c4:	d00b      	beq.n	80081de <_svfiprintf_r+0x7a>
 80081c6:	465b      	mov	r3, fp
 80081c8:	4622      	mov	r2, r4
 80081ca:	4629      	mov	r1, r5
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff ff6d 	bl	80080ac <__ssputs_r>
 80081d2:	3001      	adds	r0, #1
 80081d4:	f000 80aa 	beq.w	800832c <_svfiprintf_r+0x1c8>
 80081d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081da:	445a      	add	r2, fp
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80a2 	beq.w	800832c <_svfiprintf_r+0x1c8>
 80081e8:	2300      	movs	r3, #0
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295
 80081ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f2:	f10a 0a01 	add.w	sl, sl, #1
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	9307      	str	r3, [sp, #28]
 80081fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008200:	4654      	mov	r4, sl
 8008202:	2205      	movs	r2, #5
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	4851      	ldr	r0, [pc, #324]	; (8008350 <_svfiprintf_r+0x1ec>)
 800820a:	f7f7 fff1 	bl	80001f0 <memchr>
 800820e:	9a04      	ldr	r2, [sp, #16]
 8008210:	b9d8      	cbnz	r0, 800824a <_svfiprintf_r+0xe6>
 8008212:	06d0      	lsls	r0, r2, #27
 8008214:	bf44      	itt	mi
 8008216:	2320      	movmi	r3, #32
 8008218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821c:	0711      	lsls	r1, r2, #28
 800821e:	bf44      	itt	mi
 8008220:	232b      	movmi	r3, #43	; 0x2b
 8008222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008226:	f89a 3000 	ldrb.w	r3, [sl]
 800822a:	2b2a      	cmp	r3, #42	; 0x2a
 800822c:	d015      	beq.n	800825a <_svfiprintf_r+0xf6>
 800822e:	9a07      	ldr	r2, [sp, #28]
 8008230:	4654      	mov	r4, sl
 8008232:	2000      	movs	r0, #0
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4621      	mov	r1, r4
 800823a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800823e:	3b30      	subs	r3, #48	; 0x30
 8008240:	2b09      	cmp	r3, #9
 8008242:	d94e      	bls.n	80082e2 <_svfiprintf_r+0x17e>
 8008244:	b1b0      	cbz	r0, 8008274 <_svfiprintf_r+0x110>
 8008246:	9207      	str	r2, [sp, #28]
 8008248:	e014      	b.n	8008274 <_svfiprintf_r+0x110>
 800824a:	eba0 0308 	sub.w	r3, r0, r8
 800824e:	fa09 f303 	lsl.w	r3, r9, r3
 8008252:	4313      	orrs	r3, r2
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	46a2      	mov	sl, r4
 8008258:	e7d2      	b.n	8008200 <_svfiprintf_r+0x9c>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	1d19      	adds	r1, r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	9103      	str	r1, [sp, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfbb      	ittet	lt
 8008266:	425b      	neglt	r3, r3
 8008268:	f042 0202 	orrlt.w	r2, r2, #2
 800826c:	9307      	strge	r3, [sp, #28]
 800826e:	9307      	strlt	r3, [sp, #28]
 8008270:	bfb8      	it	lt
 8008272:	9204      	strlt	r2, [sp, #16]
 8008274:	7823      	ldrb	r3, [r4, #0]
 8008276:	2b2e      	cmp	r3, #46	; 0x2e
 8008278:	d10c      	bne.n	8008294 <_svfiprintf_r+0x130>
 800827a:	7863      	ldrb	r3, [r4, #1]
 800827c:	2b2a      	cmp	r3, #42	; 0x2a
 800827e:	d135      	bne.n	80082ec <_svfiprintf_r+0x188>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d1a      	adds	r2, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9203      	str	r2, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfb8      	it	lt
 800828c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008290:	3402      	adds	r4, #2
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008360 <_svfiprintf_r+0x1fc>
 8008298:	7821      	ldrb	r1, [r4, #0]
 800829a:	2203      	movs	r2, #3
 800829c:	4650      	mov	r0, sl
 800829e:	f7f7 ffa7 	bl	80001f0 <memchr>
 80082a2:	b140      	cbz	r0, 80082b6 <_svfiprintf_r+0x152>
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	eba0 000a 	sub.w	r0, r0, sl
 80082aa:	fa03 f000 	lsl.w	r0, r3, r0
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	4303      	orrs	r3, r0
 80082b2:	3401      	adds	r4, #1
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	4826      	ldr	r0, [pc, #152]	; (8008354 <_svfiprintf_r+0x1f0>)
 80082bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082c0:	2206      	movs	r2, #6
 80082c2:	f7f7 ff95 	bl	80001f0 <memchr>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d038      	beq.n	800833c <_svfiprintf_r+0x1d8>
 80082ca:	4b23      	ldr	r3, [pc, #140]	; (8008358 <_svfiprintf_r+0x1f4>)
 80082cc:	bb1b      	cbnz	r3, 8008316 <_svfiprintf_r+0x1b2>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	3307      	adds	r3, #7
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	3308      	adds	r3, #8
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082dc:	4433      	add	r3, r6
 80082de:	9309      	str	r3, [sp, #36]	; 0x24
 80082e0:	e767      	b.n	80081b2 <_svfiprintf_r+0x4e>
 80082e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e6:	460c      	mov	r4, r1
 80082e8:	2001      	movs	r0, #1
 80082ea:	e7a5      	b.n	8008238 <_svfiprintf_r+0xd4>
 80082ec:	2300      	movs	r3, #0
 80082ee:	3401      	adds	r4, #1
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	4619      	mov	r1, r3
 80082f4:	f04f 0c0a 	mov.w	ip, #10
 80082f8:	4620      	mov	r0, r4
 80082fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fe:	3a30      	subs	r2, #48	; 0x30
 8008300:	2a09      	cmp	r2, #9
 8008302:	d903      	bls.n	800830c <_svfiprintf_r+0x1a8>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0c5      	beq.n	8008294 <_svfiprintf_r+0x130>
 8008308:	9105      	str	r1, [sp, #20]
 800830a:	e7c3      	b.n	8008294 <_svfiprintf_r+0x130>
 800830c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008310:	4604      	mov	r4, r0
 8008312:	2301      	movs	r3, #1
 8008314:	e7f0      	b.n	80082f8 <_svfiprintf_r+0x194>
 8008316:	ab03      	add	r3, sp, #12
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	462a      	mov	r2, r5
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <_svfiprintf_r+0x1f8>)
 800831e:	a904      	add	r1, sp, #16
 8008320:	4638      	mov	r0, r7
 8008322:	f7fc fa13 	bl	800474c <_printf_float>
 8008326:	1c42      	adds	r2, r0, #1
 8008328:	4606      	mov	r6, r0
 800832a:	d1d6      	bne.n	80082da <_svfiprintf_r+0x176>
 800832c:	89ab      	ldrh	r3, [r5, #12]
 800832e:	065b      	lsls	r3, r3, #25
 8008330:	f53f af2c 	bmi.w	800818c <_svfiprintf_r+0x28>
 8008334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008336:	b01d      	add	sp, #116	; 0x74
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <_svfiprintf_r+0x1f8>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4638      	mov	r0, r7
 8008348:	f7fc fca4 	bl	8004c94 <_printf_i>
 800834c:	e7eb      	b.n	8008326 <_svfiprintf_r+0x1c2>
 800834e:	bf00      	nop
 8008350:	0800a0ec 	.word	0x0800a0ec
 8008354:	0800a0f6 	.word	0x0800a0f6
 8008358:	0800474d 	.word	0x0800474d
 800835c:	080080ad 	.word	0x080080ad
 8008360:	0800a0f2 	.word	0x0800a0f2
 8008364:	00000000 	.word	0x00000000

08008368 <nan>:
 8008368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008370 <nan+0x8>
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	00000000 	.word	0x00000000
 8008374:	7ff80000 	.word	0x7ff80000

08008378 <_sbrk_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d06      	ldr	r5, [pc, #24]	; (8008394 <_sbrk_r+0x1c>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7f9 fc5c 	bl	8001c40 <_sbrk>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_sbrk_r+0x1a>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_sbrk_r+0x1a>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	200006fc 	.word	0x200006fc

08008398 <strncmp>:
 8008398:	b510      	push	{r4, lr}
 800839a:	b17a      	cbz	r2, 80083bc <strncmp+0x24>
 800839c:	4603      	mov	r3, r0
 800839e:	3901      	subs	r1, #1
 80083a0:	1884      	adds	r4, r0, r2
 80083a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083aa:	4290      	cmp	r0, r2
 80083ac:	d101      	bne.n	80083b2 <strncmp+0x1a>
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	d101      	bne.n	80083b6 <strncmp+0x1e>
 80083b2:	1a80      	subs	r0, r0, r2
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d1f3      	bne.n	80083a2 <strncmp+0xa>
 80083ba:	e7fa      	b.n	80083b2 <strncmp+0x1a>
 80083bc:	4610      	mov	r0, r2
 80083be:	e7f9      	b.n	80083b4 <strncmp+0x1c>

080083c0 <__ascii_wctomb>:
 80083c0:	b149      	cbz	r1, 80083d6 <__ascii_wctomb+0x16>
 80083c2:	2aff      	cmp	r2, #255	; 0xff
 80083c4:	bf85      	ittet	hi
 80083c6:	238a      	movhi	r3, #138	; 0x8a
 80083c8:	6003      	strhi	r3, [r0, #0]
 80083ca:	700a      	strbls	r2, [r1, #0]
 80083cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80083d0:	bf98      	it	ls
 80083d2:	2001      	movls	r0, #1
 80083d4:	4770      	bx	lr
 80083d6:	4608      	mov	r0, r1
 80083d8:	4770      	bx	lr
	...

080083dc <__assert_func>:
 80083dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083de:	4614      	mov	r4, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <__assert_func+0x2c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4605      	mov	r5, r0
 80083e8:	68d8      	ldr	r0, [r3, #12]
 80083ea:	b14c      	cbz	r4, 8008400 <__assert_func+0x24>
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <__assert_func+0x30>)
 80083ee:	9100      	str	r1, [sp, #0]
 80083f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083f4:	4906      	ldr	r1, [pc, #24]	; (8008410 <__assert_func+0x34>)
 80083f6:	462b      	mov	r3, r5
 80083f8:	f000 f80e 	bl	8008418 <fiprintf>
 80083fc:	f000 fa8c 	bl	8008918 <abort>
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <__assert_func+0x38>)
 8008402:	461c      	mov	r4, r3
 8008404:	e7f3      	b.n	80083ee <__assert_func+0x12>
 8008406:	bf00      	nop
 8008408:	20000014 	.word	0x20000014
 800840c:	0800a0fd 	.word	0x0800a0fd
 8008410:	0800a10a 	.word	0x0800a10a
 8008414:	0800a138 	.word	0x0800a138

08008418 <fiprintf>:
 8008418:	b40e      	push	{r1, r2, r3}
 800841a:	b503      	push	{r0, r1, lr}
 800841c:	4601      	mov	r1, r0
 800841e:	ab03      	add	r3, sp, #12
 8008420:	4805      	ldr	r0, [pc, #20]	; (8008438 <fiprintf+0x20>)
 8008422:	f853 2b04 	ldr.w	r2, [r3], #4
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	f000 f885 	bl	8008538 <_vfiprintf_r>
 800842e:	b002      	add	sp, #8
 8008430:	f85d eb04 	ldr.w	lr, [sp], #4
 8008434:	b003      	add	sp, #12
 8008436:	4770      	bx	lr
 8008438:	20000014 	.word	0x20000014

0800843c <memmove>:
 800843c:	4288      	cmp	r0, r1
 800843e:	b510      	push	{r4, lr}
 8008440:	eb01 0402 	add.w	r4, r1, r2
 8008444:	d902      	bls.n	800844c <memmove+0x10>
 8008446:	4284      	cmp	r4, r0
 8008448:	4623      	mov	r3, r4
 800844a:	d807      	bhi.n	800845c <memmove+0x20>
 800844c:	1e43      	subs	r3, r0, #1
 800844e:	42a1      	cmp	r1, r4
 8008450:	d008      	beq.n	8008464 <memmove+0x28>
 8008452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800845a:	e7f8      	b.n	800844e <memmove+0x12>
 800845c:	4402      	add	r2, r0
 800845e:	4601      	mov	r1, r0
 8008460:	428a      	cmp	r2, r1
 8008462:	d100      	bne.n	8008466 <memmove+0x2a>
 8008464:	bd10      	pop	{r4, pc}
 8008466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800846a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800846e:	e7f7      	b.n	8008460 <memmove+0x24>

08008470 <__malloc_lock>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__malloc_lock+0x8>)
 8008472:	f000 bc11 	b.w	8008c98 <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	20000700 	.word	0x20000700

0800847c <__malloc_unlock>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__malloc_unlock+0x8>)
 800847e:	f000 bc0c 	b.w	8008c9a <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	20000700 	.word	0x20000700

08008488 <_realloc_r>:
 8008488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848c:	4680      	mov	r8, r0
 800848e:	4614      	mov	r4, r2
 8008490:	460e      	mov	r6, r1
 8008492:	b921      	cbnz	r1, 800849e <_realloc_r+0x16>
 8008494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008498:	4611      	mov	r1, r2
 800849a:	f7ff bd93 	b.w	8007fc4 <_malloc_r>
 800849e:	b92a      	cbnz	r2, 80084ac <_realloc_r+0x24>
 80084a0:	f7ff fd24 	bl	8007eec <_free_r>
 80084a4:	4625      	mov	r5, r4
 80084a6:	4628      	mov	r0, r5
 80084a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ac:	f000 fc5c 	bl	8008d68 <_malloc_usable_size_r>
 80084b0:	4284      	cmp	r4, r0
 80084b2:	4607      	mov	r7, r0
 80084b4:	d802      	bhi.n	80084bc <_realloc_r+0x34>
 80084b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084ba:	d812      	bhi.n	80084e2 <_realloc_r+0x5a>
 80084bc:	4621      	mov	r1, r4
 80084be:	4640      	mov	r0, r8
 80084c0:	f7ff fd80 	bl	8007fc4 <_malloc_r>
 80084c4:	4605      	mov	r5, r0
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d0ed      	beq.n	80084a6 <_realloc_r+0x1e>
 80084ca:	42bc      	cmp	r4, r7
 80084cc:	4622      	mov	r2, r4
 80084ce:	4631      	mov	r1, r6
 80084d0:	bf28      	it	cs
 80084d2:	463a      	movcs	r2, r7
 80084d4:	f7ff f824 	bl	8007520 <memcpy>
 80084d8:	4631      	mov	r1, r6
 80084da:	4640      	mov	r0, r8
 80084dc:	f7ff fd06 	bl	8007eec <_free_r>
 80084e0:	e7e1      	b.n	80084a6 <_realloc_r+0x1e>
 80084e2:	4635      	mov	r5, r6
 80084e4:	e7df      	b.n	80084a6 <_realloc_r+0x1e>

080084e6 <__sfputc_r>:
 80084e6:	6893      	ldr	r3, [r2, #8]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	b410      	push	{r4}
 80084ee:	6093      	str	r3, [r2, #8]
 80084f0:	da08      	bge.n	8008504 <__sfputc_r+0x1e>
 80084f2:	6994      	ldr	r4, [r2, #24]
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	db01      	blt.n	80084fc <__sfputc_r+0x16>
 80084f8:	290a      	cmp	r1, #10
 80084fa:	d103      	bne.n	8008504 <__sfputc_r+0x1e>
 80084fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008500:	f000 b94a 	b.w	8008798 <__swbuf_r>
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1c58      	adds	r0, r3, #1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	7019      	strb	r1, [r3, #0]
 800850c:	4608      	mov	r0, r1
 800850e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008512:	4770      	bx	lr

08008514 <__sfputs_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	4614      	mov	r4, r2
 800851c:	18d5      	adds	r5, r2, r3
 800851e:	42ac      	cmp	r4, r5
 8008520:	d101      	bne.n	8008526 <__sfputs_r+0x12>
 8008522:	2000      	movs	r0, #0
 8008524:	e007      	b.n	8008536 <__sfputs_r+0x22>
 8008526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852a:	463a      	mov	r2, r7
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ffda 	bl	80084e6 <__sfputc_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d1f3      	bne.n	800851e <__sfputs_r+0xa>
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008538 <_vfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460d      	mov	r5, r1
 800853e:	b09d      	sub	sp, #116	; 0x74
 8008540:	4614      	mov	r4, r2
 8008542:	4698      	mov	r8, r3
 8008544:	4606      	mov	r6, r0
 8008546:	b118      	cbz	r0, 8008550 <_vfiprintf_r+0x18>
 8008548:	6983      	ldr	r3, [r0, #24]
 800854a:	b90b      	cbnz	r3, 8008550 <_vfiprintf_r+0x18>
 800854c:	f000 fb06 	bl	8008b5c <__sinit>
 8008550:	4b89      	ldr	r3, [pc, #548]	; (8008778 <_vfiprintf_r+0x240>)
 8008552:	429d      	cmp	r5, r3
 8008554:	d11b      	bne.n	800858e <_vfiprintf_r+0x56>
 8008556:	6875      	ldr	r5, [r6, #4]
 8008558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	d405      	bmi.n	800856a <_vfiprintf_r+0x32>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	059a      	lsls	r2, r3, #22
 8008562:	d402      	bmi.n	800856a <_vfiprintf_r+0x32>
 8008564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008566:	f000 fb97 	bl	8008c98 <__retarget_lock_acquire_recursive>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	071b      	lsls	r3, r3, #28
 800856e:	d501      	bpl.n	8008574 <_vfiprintf_r+0x3c>
 8008570:	692b      	ldr	r3, [r5, #16]
 8008572:	b9eb      	cbnz	r3, 80085b0 <_vfiprintf_r+0x78>
 8008574:	4629      	mov	r1, r5
 8008576:	4630      	mov	r0, r6
 8008578:	f000 f960 	bl	800883c <__swsetup_r>
 800857c:	b1c0      	cbz	r0, 80085b0 <_vfiprintf_r+0x78>
 800857e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008580:	07dc      	lsls	r4, r3, #31
 8008582:	d50e      	bpl.n	80085a2 <_vfiprintf_r+0x6a>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b01d      	add	sp, #116	; 0x74
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	4b7b      	ldr	r3, [pc, #492]	; (800877c <_vfiprintf_r+0x244>)
 8008590:	429d      	cmp	r5, r3
 8008592:	d101      	bne.n	8008598 <_vfiprintf_r+0x60>
 8008594:	68b5      	ldr	r5, [r6, #8]
 8008596:	e7df      	b.n	8008558 <_vfiprintf_r+0x20>
 8008598:	4b79      	ldr	r3, [pc, #484]	; (8008780 <_vfiprintf_r+0x248>)
 800859a:	429d      	cmp	r5, r3
 800859c:	bf08      	it	eq
 800859e:	68f5      	ldreq	r5, [r6, #12]
 80085a0:	e7da      	b.n	8008558 <_vfiprintf_r+0x20>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	0598      	lsls	r0, r3, #22
 80085a6:	d4ed      	bmi.n	8008584 <_vfiprintf_r+0x4c>
 80085a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085aa:	f000 fb76 	bl	8008c9a <__retarget_lock_release_recursive>
 80085ae:	e7e9      	b.n	8008584 <_vfiprintf_r+0x4c>
 80085b0:	2300      	movs	r3, #0
 80085b2:	9309      	str	r3, [sp, #36]	; 0x24
 80085b4:	2320      	movs	r3, #32
 80085b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80085be:	2330      	movs	r3, #48	; 0x30
 80085c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008784 <_vfiprintf_r+0x24c>
 80085c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	4623      	mov	r3, r4
 80085ce:	469a      	mov	sl, r3
 80085d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d4:	b10a      	cbz	r2, 80085da <_vfiprintf_r+0xa2>
 80085d6:	2a25      	cmp	r2, #37	; 0x25
 80085d8:	d1f9      	bne.n	80085ce <_vfiprintf_r+0x96>
 80085da:	ebba 0b04 	subs.w	fp, sl, r4
 80085de:	d00b      	beq.n	80085f8 <_vfiprintf_r+0xc0>
 80085e0:	465b      	mov	r3, fp
 80085e2:	4622      	mov	r2, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ff94 	bl	8008514 <__sfputs_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	f000 80aa 	beq.w	8008746 <_vfiprintf_r+0x20e>
 80085f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f4:	445a      	add	r2, fp
 80085f6:	9209      	str	r2, [sp, #36]	; 0x24
 80085f8:	f89a 3000 	ldrb.w	r3, [sl]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80a2 	beq.w	8008746 <_vfiprintf_r+0x20e>
 8008602:	2300      	movs	r3, #0
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800860c:	f10a 0a01 	add.w	sl, sl, #1
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	9307      	str	r3, [sp, #28]
 8008614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008618:	931a      	str	r3, [sp, #104]	; 0x68
 800861a:	4654      	mov	r4, sl
 800861c:	2205      	movs	r2, #5
 800861e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008622:	4858      	ldr	r0, [pc, #352]	; (8008784 <_vfiprintf_r+0x24c>)
 8008624:	f7f7 fde4 	bl	80001f0 <memchr>
 8008628:	9a04      	ldr	r2, [sp, #16]
 800862a:	b9d8      	cbnz	r0, 8008664 <_vfiprintf_r+0x12c>
 800862c:	06d1      	lsls	r1, r2, #27
 800862e:	bf44      	itt	mi
 8008630:	2320      	movmi	r3, #32
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008636:	0713      	lsls	r3, r2, #28
 8008638:	bf44      	itt	mi
 800863a:	232b      	movmi	r3, #43	; 0x2b
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008640:	f89a 3000 	ldrb.w	r3, [sl]
 8008644:	2b2a      	cmp	r3, #42	; 0x2a
 8008646:	d015      	beq.n	8008674 <_vfiprintf_r+0x13c>
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	4654      	mov	r4, sl
 800864c:	2000      	movs	r0, #0
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	4621      	mov	r1, r4
 8008654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008658:	3b30      	subs	r3, #48	; 0x30
 800865a:	2b09      	cmp	r3, #9
 800865c:	d94e      	bls.n	80086fc <_vfiprintf_r+0x1c4>
 800865e:	b1b0      	cbz	r0, 800868e <_vfiprintf_r+0x156>
 8008660:	9207      	str	r2, [sp, #28]
 8008662:	e014      	b.n	800868e <_vfiprintf_r+0x156>
 8008664:	eba0 0308 	sub.w	r3, r0, r8
 8008668:	fa09 f303 	lsl.w	r3, r9, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	46a2      	mov	sl, r4
 8008672:	e7d2      	b.n	800861a <_vfiprintf_r+0xe2>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	1d19      	adds	r1, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	9103      	str	r1, [sp, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfbb      	ittet	lt
 8008680:	425b      	neglt	r3, r3
 8008682:	f042 0202 	orrlt.w	r2, r2, #2
 8008686:	9307      	strge	r3, [sp, #28]
 8008688:	9307      	strlt	r3, [sp, #28]
 800868a:	bfb8      	it	lt
 800868c:	9204      	strlt	r2, [sp, #16]
 800868e:	7823      	ldrb	r3, [r4, #0]
 8008690:	2b2e      	cmp	r3, #46	; 0x2e
 8008692:	d10c      	bne.n	80086ae <_vfiprintf_r+0x176>
 8008694:	7863      	ldrb	r3, [r4, #1]
 8008696:	2b2a      	cmp	r3, #42	; 0x2a
 8008698:	d135      	bne.n	8008706 <_vfiprintf_r+0x1ce>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	9203      	str	r2, [sp, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfb8      	it	lt
 80086a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086aa:	3402      	adds	r4, #2
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008794 <_vfiprintf_r+0x25c>
 80086b2:	7821      	ldrb	r1, [r4, #0]
 80086b4:	2203      	movs	r2, #3
 80086b6:	4650      	mov	r0, sl
 80086b8:	f7f7 fd9a 	bl	80001f0 <memchr>
 80086bc:	b140      	cbz	r0, 80086d0 <_vfiprintf_r+0x198>
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	eba0 000a 	sub.w	r0, r0, sl
 80086c4:	fa03 f000 	lsl.w	r0, r3, r0
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	4303      	orrs	r3, r0
 80086cc:	3401      	adds	r4, #1
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d4:	482c      	ldr	r0, [pc, #176]	; (8008788 <_vfiprintf_r+0x250>)
 80086d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086da:	2206      	movs	r2, #6
 80086dc:	f7f7 fd88 	bl	80001f0 <memchr>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d03f      	beq.n	8008764 <_vfiprintf_r+0x22c>
 80086e4:	4b29      	ldr	r3, [pc, #164]	; (800878c <_vfiprintf_r+0x254>)
 80086e6:	bb1b      	cbnz	r3, 8008730 <_vfiprintf_r+0x1f8>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	3307      	adds	r3, #7
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	3308      	adds	r3, #8
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f6:	443b      	add	r3, r7
 80086f8:	9309      	str	r3, [sp, #36]	; 0x24
 80086fa:	e767      	b.n	80085cc <_vfiprintf_r+0x94>
 80086fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008700:	460c      	mov	r4, r1
 8008702:	2001      	movs	r0, #1
 8008704:	e7a5      	b.n	8008652 <_vfiprintf_r+0x11a>
 8008706:	2300      	movs	r3, #0
 8008708:	3401      	adds	r4, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	4619      	mov	r1, r3
 800870e:	f04f 0c0a 	mov.w	ip, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008718:	3a30      	subs	r2, #48	; 0x30
 800871a:	2a09      	cmp	r2, #9
 800871c:	d903      	bls.n	8008726 <_vfiprintf_r+0x1ee>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c5      	beq.n	80086ae <_vfiprintf_r+0x176>
 8008722:	9105      	str	r1, [sp, #20]
 8008724:	e7c3      	b.n	80086ae <_vfiprintf_r+0x176>
 8008726:	fb0c 2101 	mla	r1, ip, r1, r2
 800872a:	4604      	mov	r4, r0
 800872c:	2301      	movs	r3, #1
 800872e:	e7f0      	b.n	8008712 <_vfiprintf_r+0x1da>
 8008730:	ab03      	add	r3, sp, #12
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	462a      	mov	r2, r5
 8008736:	4b16      	ldr	r3, [pc, #88]	; (8008790 <_vfiprintf_r+0x258>)
 8008738:	a904      	add	r1, sp, #16
 800873a:	4630      	mov	r0, r6
 800873c:	f7fc f806 	bl	800474c <_printf_float>
 8008740:	4607      	mov	r7, r0
 8008742:	1c78      	adds	r0, r7, #1
 8008744:	d1d6      	bne.n	80086f4 <_vfiprintf_r+0x1bc>
 8008746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008748:	07d9      	lsls	r1, r3, #31
 800874a:	d405      	bmi.n	8008758 <_vfiprintf_r+0x220>
 800874c:	89ab      	ldrh	r3, [r5, #12]
 800874e:	059a      	lsls	r2, r3, #22
 8008750:	d402      	bmi.n	8008758 <_vfiprintf_r+0x220>
 8008752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008754:	f000 faa1 	bl	8008c9a <__retarget_lock_release_recursive>
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	065b      	lsls	r3, r3, #25
 800875c:	f53f af12 	bmi.w	8008584 <_vfiprintf_r+0x4c>
 8008760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008762:	e711      	b.n	8008588 <_vfiprintf_r+0x50>
 8008764:	ab03      	add	r3, sp, #12
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	462a      	mov	r2, r5
 800876a:	4b09      	ldr	r3, [pc, #36]	; (8008790 <_vfiprintf_r+0x258>)
 800876c:	a904      	add	r1, sp, #16
 800876e:	4630      	mov	r0, r6
 8008770:	f7fc fa90 	bl	8004c94 <_printf_i>
 8008774:	e7e4      	b.n	8008740 <_vfiprintf_r+0x208>
 8008776:	bf00      	nop
 8008778:	0800a15c 	.word	0x0800a15c
 800877c:	0800a17c 	.word	0x0800a17c
 8008780:	0800a13c 	.word	0x0800a13c
 8008784:	0800a0ec 	.word	0x0800a0ec
 8008788:	0800a0f6 	.word	0x0800a0f6
 800878c:	0800474d 	.word	0x0800474d
 8008790:	08008515 	.word	0x08008515
 8008794:	0800a0f2 	.word	0x0800a0f2

08008798 <__swbuf_r>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	460e      	mov	r6, r1
 800879c:	4614      	mov	r4, r2
 800879e:	4605      	mov	r5, r0
 80087a0:	b118      	cbz	r0, 80087aa <__swbuf_r+0x12>
 80087a2:	6983      	ldr	r3, [r0, #24]
 80087a4:	b90b      	cbnz	r3, 80087aa <__swbuf_r+0x12>
 80087a6:	f000 f9d9 	bl	8008b5c <__sinit>
 80087aa:	4b21      	ldr	r3, [pc, #132]	; (8008830 <__swbuf_r+0x98>)
 80087ac:	429c      	cmp	r4, r3
 80087ae:	d12b      	bne.n	8008808 <__swbuf_r+0x70>
 80087b0:	686c      	ldr	r4, [r5, #4]
 80087b2:	69a3      	ldr	r3, [r4, #24]
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	071a      	lsls	r2, r3, #28
 80087ba:	d52f      	bpl.n	800881c <__swbuf_r+0x84>
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	b36b      	cbz	r3, 800881c <__swbuf_r+0x84>
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	1ac0      	subs	r0, r0, r3
 80087c6:	6963      	ldr	r3, [r4, #20]
 80087c8:	b2f6      	uxtb	r6, r6
 80087ca:	4283      	cmp	r3, r0
 80087cc:	4637      	mov	r7, r6
 80087ce:	dc04      	bgt.n	80087da <__swbuf_r+0x42>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f92e 	bl	8008a34 <_fflush_r>
 80087d8:	bb30      	cbnz	r0, 8008828 <__swbuf_r+0x90>
 80087da:	68a3      	ldr	r3, [r4, #8]
 80087dc:	3b01      	subs	r3, #1
 80087de:	60a3      	str	r3, [r4, #8]
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	701e      	strb	r6, [r3, #0]
 80087e8:	6963      	ldr	r3, [r4, #20]
 80087ea:	3001      	adds	r0, #1
 80087ec:	4283      	cmp	r3, r0
 80087ee:	d004      	beq.n	80087fa <__swbuf_r+0x62>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	07db      	lsls	r3, r3, #31
 80087f4:	d506      	bpl.n	8008804 <__swbuf_r+0x6c>
 80087f6:	2e0a      	cmp	r6, #10
 80087f8:	d104      	bne.n	8008804 <__swbuf_r+0x6c>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 f919 	bl	8008a34 <_fflush_r>
 8008802:	b988      	cbnz	r0, 8008828 <__swbuf_r+0x90>
 8008804:	4638      	mov	r0, r7
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <__swbuf_r+0x9c>)
 800880a:	429c      	cmp	r4, r3
 800880c:	d101      	bne.n	8008812 <__swbuf_r+0x7a>
 800880e:	68ac      	ldr	r4, [r5, #8]
 8008810:	e7cf      	b.n	80087b2 <__swbuf_r+0x1a>
 8008812:	4b09      	ldr	r3, [pc, #36]	; (8008838 <__swbuf_r+0xa0>)
 8008814:	429c      	cmp	r4, r3
 8008816:	bf08      	it	eq
 8008818:	68ec      	ldreq	r4, [r5, #12]
 800881a:	e7ca      	b.n	80087b2 <__swbuf_r+0x1a>
 800881c:	4621      	mov	r1, r4
 800881e:	4628      	mov	r0, r5
 8008820:	f000 f80c 	bl	800883c <__swsetup_r>
 8008824:	2800      	cmp	r0, #0
 8008826:	d0cb      	beq.n	80087c0 <__swbuf_r+0x28>
 8008828:	f04f 37ff 	mov.w	r7, #4294967295
 800882c:	e7ea      	b.n	8008804 <__swbuf_r+0x6c>
 800882e:	bf00      	nop
 8008830:	0800a15c 	.word	0x0800a15c
 8008834:	0800a17c 	.word	0x0800a17c
 8008838:	0800a13c 	.word	0x0800a13c

0800883c <__swsetup_r>:
 800883c:	4b32      	ldr	r3, [pc, #200]	; (8008908 <__swsetup_r+0xcc>)
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	681d      	ldr	r5, [r3, #0]
 8008842:	4606      	mov	r6, r0
 8008844:	460c      	mov	r4, r1
 8008846:	b125      	cbz	r5, 8008852 <__swsetup_r+0x16>
 8008848:	69ab      	ldr	r3, [r5, #24]
 800884a:	b913      	cbnz	r3, 8008852 <__swsetup_r+0x16>
 800884c:	4628      	mov	r0, r5
 800884e:	f000 f985 	bl	8008b5c <__sinit>
 8008852:	4b2e      	ldr	r3, [pc, #184]	; (800890c <__swsetup_r+0xd0>)
 8008854:	429c      	cmp	r4, r3
 8008856:	d10f      	bne.n	8008878 <__swsetup_r+0x3c>
 8008858:	686c      	ldr	r4, [r5, #4]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008860:	0719      	lsls	r1, r3, #28
 8008862:	d42c      	bmi.n	80088be <__swsetup_r+0x82>
 8008864:	06dd      	lsls	r5, r3, #27
 8008866:	d411      	bmi.n	800888c <__swsetup_r+0x50>
 8008868:	2309      	movs	r3, #9
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	e03e      	b.n	80088f6 <__swsetup_r+0xba>
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <__swsetup_r+0xd4>)
 800887a:	429c      	cmp	r4, r3
 800887c:	d101      	bne.n	8008882 <__swsetup_r+0x46>
 800887e:	68ac      	ldr	r4, [r5, #8]
 8008880:	e7eb      	b.n	800885a <__swsetup_r+0x1e>
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <__swsetup_r+0xd8>)
 8008884:	429c      	cmp	r4, r3
 8008886:	bf08      	it	eq
 8008888:	68ec      	ldreq	r4, [r5, #12]
 800888a:	e7e6      	b.n	800885a <__swsetup_r+0x1e>
 800888c:	0758      	lsls	r0, r3, #29
 800888e:	d512      	bpl.n	80088b6 <__swsetup_r+0x7a>
 8008890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008892:	b141      	cbz	r1, 80088a6 <__swsetup_r+0x6a>
 8008894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008898:	4299      	cmp	r1, r3
 800889a:	d002      	beq.n	80088a2 <__swsetup_r+0x66>
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff fb25 	bl	8007eec <_free_r>
 80088a2:	2300      	movs	r3, #0
 80088a4:	6363      	str	r3, [r4, #52]	; 0x34
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	2300      	movs	r3, #0
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f043 0308 	orr.w	r3, r3, #8
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	b94b      	cbnz	r3, 80088d6 <__swsetup_r+0x9a>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088cc:	d003      	beq.n	80088d6 <__swsetup_r+0x9a>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 fa09 	bl	8008ce8 <__smakebuf_r>
 80088d6:	89a0      	ldrh	r0, [r4, #12]
 80088d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088dc:	f010 0301 	ands.w	r3, r0, #1
 80088e0:	d00a      	beq.n	80088f8 <__swsetup_r+0xbc>
 80088e2:	2300      	movs	r3, #0
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	6963      	ldr	r3, [r4, #20]
 80088e8:	425b      	negs	r3, r3
 80088ea:	61a3      	str	r3, [r4, #24]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b943      	cbnz	r3, 8008902 <__swsetup_r+0xc6>
 80088f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088f4:	d1ba      	bne.n	800886c <__swsetup_r+0x30>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	0781      	lsls	r1, r0, #30
 80088fa:	bf58      	it	pl
 80088fc:	6963      	ldrpl	r3, [r4, #20]
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	e7f4      	b.n	80088ec <__swsetup_r+0xb0>
 8008902:	2000      	movs	r0, #0
 8008904:	e7f7      	b.n	80088f6 <__swsetup_r+0xba>
 8008906:	bf00      	nop
 8008908:	20000014 	.word	0x20000014
 800890c:	0800a15c 	.word	0x0800a15c
 8008910:	0800a17c 	.word	0x0800a17c
 8008914:	0800a13c 	.word	0x0800a13c

08008918 <abort>:
 8008918:	b508      	push	{r3, lr}
 800891a:	2006      	movs	r0, #6
 800891c:	f000 fa54 	bl	8008dc8 <raise>
 8008920:	2001      	movs	r0, #1
 8008922:	f7f9 f915 	bl	8001b50 <_exit>
	...

08008928 <__sflush_r>:
 8008928:	898a      	ldrh	r2, [r1, #12]
 800892a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892e:	4605      	mov	r5, r0
 8008930:	0710      	lsls	r0, r2, #28
 8008932:	460c      	mov	r4, r1
 8008934:	d458      	bmi.n	80089e8 <__sflush_r+0xc0>
 8008936:	684b      	ldr	r3, [r1, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	dc05      	bgt.n	8008948 <__sflush_r+0x20>
 800893c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	dc02      	bgt.n	8008948 <__sflush_r+0x20>
 8008942:	2000      	movs	r0, #0
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800894a:	2e00      	cmp	r6, #0
 800894c:	d0f9      	beq.n	8008942 <__sflush_r+0x1a>
 800894e:	2300      	movs	r3, #0
 8008950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008954:	682f      	ldr	r7, [r5, #0]
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	d032      	beq.n	80089c0 <__sflush_r+0x98>
 800895a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	075a      	lsls	r2, r3, #29
 8008960:	d505      	bpl.n	800896e <__sflush_r+0x46>
 8008962:	6863      	ldr	r3, [r4, #4]
 8008964:	1ac0      	subs	r0, r0, r3
 8008966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008968:	b10b      	cbz	r3, 800896e <__sflush_r+0x46>
 800896a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800896c:	1ac0      	subs	r0, r0, r3
 800896e:	2300      	movs	r3, #0
 8008970:	4602      	mov	r2, r0
 8008972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008974:	6a21      	ldr	r1, [r4, #32]
 8008976:	4628      	mov	r0, r5
 8008978:	47b0      	blx	r6
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	d106      	bne.n	800898e <__sflush_r+0x66>
 8008980:	6829      	ldr	r1, [r5, #0]
 8008982:	291d      	cmp	r1, #29
 8008984:	d82c      	bhi.n	80089e0 <__sflush_r+0xb8>
 8008986:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <__sflush_r+0x108>)
 8008988:	40ca      	lsrs	r2, r1
 800898a:	07d6      	lsls	r6, r2, #31
 800898c:	d528      	bpl.n	80089e0 <__sflush_r+0xb8>
 800898e:	2200      	movs	r2, #0
 8008990:	6062      	str	r2, [r4, #4]
 8008992:	04d9      	lsls	r1, r3, #19
 8008994:	6922      	ldr	r2, [r4, #16]
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	d504      	bpl.n	80089a4 <__sflush_r+0x7c>
 800899a:	1c42      	adds	r2, r0, #1
 800899c:	d101      	bne.n	80089a2 <__sflush_r+0x7a>
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	b903      	cbnz	r3, 80089a4 <__sflush_r+0x7c>
 80089a2:	6560      	str	r0, [r4, #84]	; 0x54
 80089a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a6:	602f      	str	r7, [r5, #0]
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d0ca      	beq.n	8008942 <__sflush_r+0x1a>
 80089ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <__sflush_r+0x92>
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7ff fa99 	bl	8007eec <_free_r>
 80089ba:	2000      	movs	r0, #0
 80089bc:	6360      	str	r0, [r4, #52]	; 0x34
 80089be:	e7c1      	b.n	8008944 <__sflush_r+0x1c>
 80089c0:	6a21      	ldr	r1, [r4, #32]
 80089c2:	2301      	movs	r3, #1
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b0      	blx	r6
 80089c8:	1c41      	adds	r1, r0, #1
 80089ca:	d1c7      	bne.n	800895c <__sflush_r+0x34>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0c4      	beq.n	800895c <__sflush_r+0x34>
 80089d2:	2b1d      	cmp	r3, #29
 80089d4:	d001      	beq.n	80089da <__sflush_r+0xb2>
 80089d6:	2b16      	cmp	r3, #22
 80089d8:	d101      	bne.n	80089de <__sflush_r+0xb6>
 80089da:	602f      	str	r7, [r5, #0]
 80089dc:	e7b1      	b.n	8008942 <__sflush_r+0x1a>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	e7ad      	b.n	8008944 <__sflush_r+0x1c>
 80089e8:	690f      	ldr	r7, [r1, #16]
 80089ea:	2f00      	cmp	r7, #0
 80089ec:	d0a9      	beq.n	8008942 <__sflush_r+0x1a>
 80089ee:	0793      	lsls	r3, r2, #30
 80089f0:	680e      	ldr	r6, [r1, #0]
 80089f2:	bf08      	it	eq
 80089f4:	694b      	ldreq	r3, [r1, #20]
 80089f6:	600f      	str	r7, [r1, #0]
 80089f8:	bf18      	it	ne
 80089fa:	2300      	movne	r3, #0
 80089fc:	eba6 0807 	sub.w	r8, r6, r7
 8008a00:	608b      	str	r3, [r1, #8]
 8008a02:	f1b8 0f00 	cmp.w	r8, #0
 8008a06:	dd9c      	ble.n	8008942 <__sflush_r+0x1a>
 8008a08:	6a21      	ldr	r1, [r4, #32]
 8008a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a0c:	4643      	mov	r3, r8
 8008a0e:	463a      	mov	r2, r7
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	2800      	cmp	r0, #0
 8008a16:	dc06      	bgt.n	8008a26 <__sflush_r+0xfe>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e78e      	b.n	8008944 <__sflush_r+0x1c>
 8008a26:	4407      	add	r7, r0
 8008a28:	eba8 0800 	sub.w	r8, r8, r0
 8008a2c:	e7e9      	b.n	8008a02 <__sflush_r+0xda>
 8008a2e:	bf00      	nop
 8008a30:	20400001 	.word	0x20400001

08008a34 <_fflush_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	690b      	ldr	r3, [r1, #16]
 8008a38:	4605      	mov	r5, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	b913      	cbnz	r3, 8008a44 <_fflush_r+0x10>
 8008a3e:	2500      	movs	r5, #0
 8008a40:	4628      	mov	r0, r5
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	b118      	cbz	r0, 8008a4e <_fflush_r+0x1a>
 8008a46:	6983      	ldr	r3, [r0, #24]
 8008a48:	b90b      	cbnz	r3, 8008a4e <_fflush_r+0x1a>
 8008a4a:	f000 f887 	bl	8008b5c <__sinit>
 8008a4e:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <_fflush_r+0x6c>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d11b      	bne.n	8008a8c <_fflush_r+0x58>
 8008a54:	686c      	ldr	r4, [r5, #4]
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0ef      	beq.n	8008a3e <_fflush_r+0xa>
 8008a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d404      	bmi.n	8008a6e <_fflush_r+0x3a>
 8008a64:	0599      	lsls	r1, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_fflush_r+0x3a>
 8008a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6a:	f000 f915 	bl	8008c98 <__retarget_lock_acquire_recursive>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7ff ff59 	bl	8008928 <__sflush_r>
 8008a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d4e0      	bmi.n	8008a40 <_fflush_r+0xc>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	059b      	lsls	r3, r3, #22
 8008a82:	d4dd      	bmi.n	8008a40 <_fflush_r+0xc>
 8008a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a86:	f000 f908 	bl	8008c9a <__retarget_lock_release_recursive>
 8008a8a:	e7d9      	b.n	8008a40 <_fflush_r+0xc>
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <_fflush_r+0x70>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d101      	bne.n	8008a96 <_fflush_r+0x62>
 8008a92:	68ac      	ldr	r4, [r5, #8]
 8008a94:	e7df      	b.n	8008a56 <_fflush_r+0x22>
 8008a96:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <_fflush_r+0x74>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	bf08      	it	eq
 8008a9c:	68ec      	ldreq	r4, [r5, #12]
 8008a9e:	e7da      	b.n	8008a56 <_fflush_r+0x22>
 8008aa0:	0800a15c 	.word	0x0800a15c
 8008aa4:	0800a17c 	.word	0x0800a17c
 8008aa8:	0800a13c 	.word	0x0800a13c

08008aac <std>:
 8008aac:	2300      	movs	r3, #0
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aba:	6083      	str	r3, [r0, #8]
 8008abc:	8181      	strh	r1, [r0, #12]
 8008abe:	6643      	str	r3, [r0, #100]	; 0x64
 8008ac0:	81c2      	strh	r2, [r0, #14]
 8008ac2:	6183      	str	r3, [r0, #24]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	305c      	adds	r0, #92	; 0x5c
 8008aca:	f7fb fd97 	bl	80045fc <memset>
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <std+0x38>)
 8008ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ad2:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <std+0x3c>)
 8008ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <std+0x40>)
 8008ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <std+0x44>)
 8008adc:	6224      	str	r4, [r4, #32]
 8008ade:	6323      	str	r3, [r4, #48]	; 0x30
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop
 8008ae4:	08008e01 	.word	0x08008e01
 8008ae8:	08008e23 	.word	0x08008e23
 8008aec:	08008e5b 	.word	0x08008e5b
 8008af0:	08008e7f 	.word	0x08008e7f

08008af4 <_cleanup_r>:
 8008af4:	4901      	ldr	r1, [pc, #4]	; (8008afc <_cleanup_r+0x8>)
 8008af6:	f000 b8af 	b.w	8008c58 <_fwalk_reent>
 8008afa:	bf00      	nop
 8008afc:	08008a35 	.word	0x08008a35

08008b00 <__sfmoreglue>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	2268      	movs	r2, #104	; 0x68
 8008b04:	1e4d      	subs	r5, r1, #1
 8008b06:	4355      	muls	r5, r2
 8008b08:	460e      	mov	r6, r1
 8008b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b0e:	f7ff fa59 	bl	8007fc4 <_malloc_r>
 8008b12:	4604      	mov	r4, r0
 8008b14:	b140      	cbz	r0, 8008b28 <__sfmoreglue+0x28>
 8008b16:	2100      	movs	r1, #0
 8008b18:	e9c0 1600 	strd	r1, r6, [r0]
 8008b1c:	300c      	adds	r0, #12
 8008b1e:	60a0      	str	r0, [r4, #8]
 8008b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b24:	f7fb fd6a 	bl	80045fc <memset>
 8008b28:	4620      	mov	r0, r4
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}

08008b2c <__sfp_lock_acquire>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__sfp_lock_acquire+0x8>)
 8008b2e:	f000 b8b3 	b.w	8008c98 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000701 	.word	0x20000701

08008b38 <__sfp_lock_release>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__sfp_lock_release+0x8>)
 8008b3a:	f000 b8ae 	b.w	8008c9a <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000701 	.word	0x20000701

08008b44 <__sinit_lock_acquire>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__sinit_lock_acquire+0x8>)
 8008b46:	f000 b8a7 	b.w	8008c98 <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000702 	.word	0x20000702

08008b50 <__sinit_lock_release>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__sinit_lock_release+0x8>)
 8008b52:	f000 b8a2 	b.w	8008c9a <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000702 	.word	0x20000702

08008b5c <__sinit>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	f7ff fff0 	bl	8008b44 <__sinit_lock_acquire>
 8008b64:	69a3      	ldr	r3, [r4, #24]
 8008b66:	b11b      	cbz	r3, 8008b70 <__sinit+0x14>
 8008b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6c:	f7ff bff0 	b.w	8008b50 <__sinit_lock_release>
 8008b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b74:	6523      	str	r3, [r4, #80]	; 0x50
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <__sinit+0x68>)
 8008b78:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <__sinit+0x6c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	bf04      	itt	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	61a3      	streq	r3, [r4, #24]
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 f820 	bl	8008bcc <__sfp>
 8008b8c:	6060      	str	r0, [r4, #4]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f81c 	bl	8008bcc <__sfp>
 8008b94:	60a0      	str	r0, [r4, #8]
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 f818 	bl	8008bcc <__sfp>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	60e0      	str	r0, [r4, #12]
 8008ba0:	2104      	movs	r1, #4
 8008ba2:	6860      	ldr	r0, [r4, #4]
 8008ba4:	f7ff ff82 	bl	8008aac <std>
 8008ba8:	68a0      	ldr	r0, [r4, #8]
 8008baa:	2201      	movs	r2, #1
 8008bac:	2109      	movs	r1, #9
 8008bae:	f7ff ff7d 	bl	8008aac <std>
 8008bb2:	68e0      	ldr	r0, [r4, #12]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	2112      	movs	r1, #18
 8008bb8:	f7ff ff78 	bl	8008aac <std>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	61a3      	str	r3, [r4, #24]
 8008bc0:	e7d2      	b.n	8008b68 <__sinit+0xc>
 8008bc2:	bf00      	nop
 8008bc4:	08009cf8 	.word	0x08009cf8
 8008bc8:	08008af5 	.word	0x08008af5

08008bcc <__sfp>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	4607      	mov	r7, r0
 8008bd0:	f7ff ffac 	bl	8008b2c <__sfp_lock_acquire>
 8008bd4:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <__sfp+0x84>)
 8008bd6:	681e      	ldr	r6, [r3, #0]
 8008bd8:	69b3      	ldr	r3, [r6, #24]
 8008bda:	b913      	cbnz	r3, 8008be2 <__sfp+0x16>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff ffbd 	bl	8008b5c <__sinit>
 8008be2:	3648      	adds	r6, #72	; 0x48
 8008be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	d503      	bpl.n	8008bf4 <__sfp+0x28>
 8008bec:	6833      	ldr	r3, [r6, #0]
 8008bee:	b30b      	cbz	r3, 8008c34 <__sfp+0x68>
 8008bf0:	6836      	ldr	r6, [r6, #0]
 8008bf2:	e7f7      	b.n	8008be4 <__sfp+0x18>
 8008bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bf8:	b9d5      	cbnz	r5, 8008c30 <__sfp+0x64>
 8008bfa:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <__sfp+0x88>)
 8008bfc:	60e3      	str	r3, [r4, #12]
 8008bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c02:	6665      	str	r5, [r4, #100]	; 0x64
 8008c04:	f000 f847 	bl	8008c96 <__retarget_lock_init_recursive>
 8008c08:	f7ff ff96 	bl	8008b38 <__sfp_lock_release>
 8008c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c14:	6025      	str	r5, [r4, #0]
 8008c16:	61a5      	str	r5, [r4, #24]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c20:	f7fb fcec 	bl	80045fc <memset>
 8008c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	3468      	adds	r4, #104	; 0x68
 8008c32:	e7d9      	b.n	8008be8 <__sfp+0x1c>
 8008c34:	2104      	movs	r1, #4
 8008c36:	4638      	mov	r0, r7
 8008c38:	f7ff ff62 	bl	8008b00 <__sfmoreglue>
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	6030      	str	r0, [r6, #0]
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1d5      	bne.n	8008bf0 <__sfp+0x24>
 8008c44:	f7ff ff78 	bl	8008b38 <__sfp_lock_release>
 8008c48:	230c      	movs	r3, #12
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	e7ee      	b.n	8008c2c <__sfp+0x60>
 8008c4e:	bf00      	nop
 8008c50:	08009cf8 	.word	0x08009cf8
 8008c54:	ffff0001 	.word	0xffff0001

08008c58 <_fwalk_reent>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	4688      	mov	r8, r1
 8008c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c64:	2700      	movs	r7, #0
 8008c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c6e:	d505      	bpl.n	8008c7c <_fwalk_reent+0x24>
 8008c70:	6824      	ldr	r4, [r4, #0]
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	d1f7      	bne.n	8008c66 <_fwalk_reent+0xe>
 8008c76:	4638      	mov	r0, r7
 8008c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c7c:	89ab      	ldrh	r3, [r5, #12]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d907      	bls.n	8008c92 <_fwalk_reent+0x3a>
 8008c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c86:	3301      	adds	r3, #1
 8008c88:	d003      	beq.n	8008c92 <_fwalk_reent+0x3a>
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	47c0      	blx	r8
 8008c90:	4307      	orrs	r7, r0
 8008c92:	3568      	adds	r5, #104	; 0x68
 8008c94:	e7e9      	b.n	8008c6a <_fwalk_reent+0x12>

08008c96 <__retarget_lock_init_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <__retarget_lock_acquire_recursive>:
 8008c98:	4770      	bx	lr

08008c9a <__retarget_lock_release_recursive>:
 8008c9a:	4770      	bx	lr

08008c9c <__swhatbuf_r>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	460e      	mov	r6, r1
 8008ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	b096      	sub	sp, #88	; 0x58
 8008ca8:	4614      	mov	r4, r2
 8008caa:	461d      	mov	r5, r3
 8008cac:	da08      	bge.n	8008cc0 <__swhatbuf_r+0x24>
 8008cae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	061a      	lsls	r2, r3, #24
 8008cb8:	d410      	bmi.n	8008cdc <__swhatbuf_r+0x40>
 8008cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cbe:	e00e      	b.n	8008cde <__swhatbuf_r+0x42>
 8008cc0:	466a      	mov	r2, sp
 8008cc2:	f000 f903 	bl	8008ecc <_fstat_r>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	dbf1      	blt.n	8008cae <__swhatbuf_r+0x12>
 8008cca:	9a01      	ldr	r2, [sp, #4]
 8008ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cd4:	425a      	negs	r2, r3
 8008cd6:	415a      	adcs	r2, r3
 8008cd8:	602a      	str	r2, [r5, #0]
 8008cda:	e7ee      	b.n	8008cba <__swhatbuf_r+0x1e>
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	2000      	movs	r0, #0
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	b016      	add	sp, #88	; 0x58
 8008ce4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ce8 <__smakebuf_r>:
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cec:	079d      	lsls	r5, r3, #30
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	d507      	bpl.n	8008d04 <__smakebuf_r+0x1c>
 8008cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	6163      	str	r3, [r4, #20]
 8008d00:	b002      	add	sp, #8
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	ab01      	add	r3, sp, #4
 8008d06:	466a      	mov	r2, sp
 8008d08:	f7ff ffc8 	bl	8008c9c <__swhatbuf_r>
 8008d0c:	9900      	ldr	r1, [sp, #0]
 8008d0e:	4605      	mov	r5, r0
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff f957 	bl	8007fc4 <_malloc_r>
 8008d16:	b948      	cbnz	r0, 8008d2c <__smakebuf_r+0x44>
 8008d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1c:	059a      	lsls	r2, r3, #22
 8008d1e:	d4ef      	bmi.n	8008d00 <__smakebuf_r+0x18>
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	f043 0302 	orr.w	r3, r3, #2
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	e7e3      	b.n	8008cf4 <__smakebuf_r+0xc>
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <__smakebuf_r+0x7c>)
 8008d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	6020      	str	r0, [r4, #0]
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	6163      	str	r3, [r4, #20]
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	6120      	str	r0, [r4, #16]
 8008d42:	b15b      	cbz	r3, 8008d5c <__smakebuf_r+0x74>
 8008d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 f8d1 	bl	8008ef0 <_isatty_r>
 8008d4e:	b128      	cbz	r0, 8008d5c <__smakebuf_r+0x74>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	89a0      	ldrh	r0, [r4, #12]
 8008d5e:	4305      	orrs	r5, r0
 8008d60:	81a5      	strh	r5, [r4, #12]
 8008d62:	e7cd      	b.n	8008d00 <__smakebuf_r+0x18>
 8008d64:	08008af5 	.word	0x08008af5

08008d68 <_malloc_usable_size_r>:
 8008d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6c:	1f18      	subs	r0, r3, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfbc      	itt	lt
 8008d72:	580b      	ldrlt	r3, [r1, r0]
 8008d74:	18c0      	addlt	r0, r0, r3
 8008d76:	4770      	bx	lr

08008d78 <_raise_r>:
 8008d78:	291f      	cmp	r1, #31
 8008d7a:	b538      	push	{r3, r4, r5, lr}
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	460d      	mov	r5, r1
 8008d80:	d904      	bls.n	8008d8c <_raise_r+0x14>
 8008d82:	2316      	movs	r3, #22
 8008d84:	6003      	str	r3, [r0, #0]
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d8e:	b112      	cbz	r2, 8008d96 <_raise_r+0x1e>
 8008d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d94:	b94b      	cbnz	r3, 8008daa <_raise_r+0x32>
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f830 	bl	8008dfc <_getpid_r>
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4601      	mov	r1, r0
 8008da0:	4620      	mov	r0, r4
 8008da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008da6:	f000 b817 	b.w	8008dd8 <_kill_r>
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d00a      	beq.n	8008dc4 <_raise_r+0x4c>
 8008dae:	1c59      	adds	r1, r3, #1
 8008db0:	d103      	bne.n	8008dba <_raise_r+0x42>
 8008db2:	2316      	movs	r3, #22
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	2001      	movs	r0, #1
 8008db8:	e7e7      	b.n	8008d8a <_raise_r+0x12>
 8008dba:	2400      	movs	r4, #0
 8008dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	4798      	blx	r3
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e7e0      	b.n	8008d8a <_raise_r+0x12>

08008dc8 <raise>:
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <raise+0xc>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	f7ff bfd3 	b.w	8008d78 <_raise_r>
 8008dd2:	bf00      	nop
 8008dd4:	20000014 	.word	0x20000014

08008dd8 <_kill_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d07      	ldr	r5, [pc, #28]	; (8008df8 <_kill_r+0x20>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	4611      	mov	r1, r2
 8008de4:	602b      	str	r3, [r5, #0]
 8008de6:	f7f8 fea3 	bl	8001b30 <_kill>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d102      	bne.n	8008df4 <_kill_r+0x1c>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b103      	cbz	r3, 8008df4 <_kill_r+0x1c>
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	bd38      	pop	{r3, r4, r5, pc}
 8008df6:	bf00      	nop
 8008df8:	200006fc 	.word	0x200006fc

08008dfc <_getpid_r>:
 8008dfc:	f7f8 be90 	b.w	8001b20 <_getpid>

08008e00 <__sread>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	460c      	mov	r4, r1
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	f000 f894 	bl	8008f34 <_read_r>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	bfab      	itete	ge
 8008e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e12:	89a3      	ldrhlt	r3, [r4, #12]
 8008e14:	181b      	addge	r3, r3, r0
 8008e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e1a:	bfac      	ite	ge
 8008e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e1e:	81a3      	strhlt	r3, [r4, #12]
 8008e20:	bd10      	pop	{r4, pc}

08008e22 <__swrite>:
 8008e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e26:	461f      	mov	r7, r3
 8008e28:	898b      	ldrh	r3, [r1, #12]
 8008e2a:	05db      	lsls	r3, r3, #23
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4616      	mov	r6, r2
 8008e32:	d505      	bpl.n	8008e40 <__swrite+0x1e>
 8008e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e38:	2302      	movs	r3, #2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f000 f868 	bl	8008f10 <_lseek_r>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	4628      	mov	r0, r5
 8008e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e56:	f000 b817 	b.w	8008e88 <_write_r>

08008e5a <__sseek>:
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e62:	f000 f855 	bl	8008f10 <_lseek_r>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	bf15      	itete	ne
 8008e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e76:	81a3      	strheq	r3, [r4, #12]
 8008e78:	bf18      	it	ne
 8008e7a:	81a3      	strhne	r3, [r4, #12]
 8008e7c:	bd10      	pop	{r4, pc}

08008e7e <__sclose>:
 8008e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e82:	f000 b813 	b.w	8008eac <_close_r>
	...

08008e88 <_write_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d07      	ldr	r5, [pc, #28]	; (8008ea8 <_write_r+0x20>)
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	4608      	mov	r0, r1
 8008e90:	4611      	mov	r1, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	602a      	str	r2, [r5, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	f7f8 fe81 	bl	8001b9e <_write>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d102      	bne.n	8008ea6 <_write_r+0x1e>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	b103      	cbz	r3, 8008ea6 <_write_r+0x1e>
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	200006fc 	.word	0x200006fc

08008eac <_close_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d06      	ldr	r5, [pc, #24]	; (8008ec8 <_close_r+0x1c>)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	f7f8 fe8d 	bl	8001bd6 <_close>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_close_r+0x1a>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_close_r+0x1a>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	200006fc 	.word	0x200006fc

08008ecc <_fstat_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d07      	ldr	r5, [pc, #28]	; (8008eec <_fstat_r+0x20>)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	f7f8 fe88 	bl	8001bee <_fstat>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d102      	bne.n	8008ee8 <_fstat_r+0x1c>
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	b103      	cbz	r3, 8008ee8 <_fstat_r+0x1c>
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	bf00      	nop
 8008eec:	200006fc 	.word	0x200006fc

08008ef0 <_isatty_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d06      	ldr	r5, [pc, #24]	; (8008f0c <_isatty_r+0x1c>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	f7f8 fe87 	bl	8001c0e <_isatty>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d102      	bne.n	8008f0a <_isatty_r+0x1a>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b103      	cbz	r3, 8008f0a <_isatty_r+0x1a>
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	200006fc 	.word	0x200006fc

08008f10 <_lseek_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d07      	ldr	r5, [pc, #28]	; (8008f30 <_lseek_r+0x20>)
 8008f14:	4604      	mov	r4, r0
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7f8 fe80 	bl	8001c24 <_lseek>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_lseek_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_lseek_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	200006fc 	.word	0x200006fc

08008f34 <_read_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d07      	ldr	r5, [pc, #28]	; (8008f54 <_read_r+0x20>)
 8008f38:	4604      	mov	r4, r0
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	2200      	movs	r2, #0
 8008f40:	602a      	str	r2, [r5, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f7f8 fe0e 	bl	8001b64 <_read>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_read_r+0x1e>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_read_r+0x1e>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	200006fc 	.word	0x200006fc

08008f58 <_init>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr

08008f64 <_fini>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr
